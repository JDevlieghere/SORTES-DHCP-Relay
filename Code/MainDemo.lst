gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-15-2010  11:43:33
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:28 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _message
                                           	global _AN0String
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _DisplayIPValue
                                           	global _strlcpy
                                           	global _AppConfig
                                           	global _LowISR
                                           	global _HighISR
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _uitoa
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _StackInit
                                           	extern _StackTask
                                           	extern _TickInit
                                           	extern _TickGetDiv256
                                           	extern _TickUpdate
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _main_t_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _main_dwLastIP_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_MainDemo_0	udata
                                           _AN0String	res	8
                                           
                                           udata_MainDemo_1	udata
                                           _message	res	3
                                           
                                           udata_MainDemo_2	udata
                                           _AppConfig	res	51
                                           
                                           udata_MainDemo_3	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_MainDemo_4	udata
                                           _DisplayIPValue_IPDigit_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x2_LowISR	code	0X000018
                                           ivec_0x2_LowISR:
000018   ef9f     goto	0x713e              	GOTO	_LowISR
00001a   f038
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x1_HighISR	code	0X000008
                                           ivec_0x1_HighISR:
000008   ef5c     goto	0x72b8              	GOTO	_HighISR
00000a   f039
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_MainDemo__main	code
                                           _main:
                                           ;	.line	201; MainDemo.c	InitializeBoard();
004d1c   ec68     call	0x76d0, 0           	CALL	_InitializeBoard
004d1e   f03b
                                           ;	.line	204; MainDemo.c	LCDInit();
004d20   ec9f     call	0x353e, 0           	CALL	_LCDInit
004d22   f01a
                                           ;	.line	205; MainDemo.c	DelayMs(100);
004d24   0e10     movlw	0x10               	MOVLW	0x10
004d26   6e00     movwf	0, 0               	MOVWF	r0x00
004d28   0e98     movlw	0x98               	MOVLW	0x98
004d2a   6e01     movwf	0x1, 0             	MOVWF	r0x01
004d2c   0e02     movlw	0x2                	MOVLW	0x02
004d2e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004d30   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00115_DS_:
004d32   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
004d34   f004
004d36   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004d38   f005
004d3a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004d3c   f006
004d3e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004d40   f007
004d42   0eff     movlw	0xff               	MOVLW	0xff
004d44   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004d46   0eff     movlw	0xff               	MOVLW	0xff
004d48   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004d4a   0eff     movlw	0xff               	MOVLW	0xff
004d4c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004d4e   0eff     movlw	0xff               	MOVLW	0xff
004d50   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d54   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
004d56   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004d58   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004d5a   e1eb     bnz	0x4d32               	BNZ	_00115_DS_
                                           ;	.line	206; MainDemo.c	DisplayString (0,"Olimex"); //first arg is start position on 32 pos LCD
004d5c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
004d5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d60   0e71     movlw	0x71               	MOVLW	HIGH(__str_0)
004d62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d64   0e98     movlw	0x98               	MOVLW	LOW(__str_0)
004d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d68   0e00     movlw	0                  	MOVLW	0x00
004d6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d6c   ec21     call	0x6242, 0           	CALL	_DisplayString
004d6e   f031
004d70   0e04     movlw	0x4                	MOVLW	0x04
004d72   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	209; MainDemo.c	TickInit();
004d74   ecad     call	0x795a, 0           	CALL	_TickInit
004d76   f03c
                                           ;	.line	212; MainDemo.c	InitAppConfig();
004d78   ece9     call	0x59d2, 0           	CALL	_InitAppConfig
004d7a   f02c
                                           ;	.line	216; MainDemo.c	StackInit();
004d7c   ecf8     call	0x6bf0, 0           	CALL	_StackInit
004d7e   f035
                                           _00129_DS_:
                                           ;	.line	237; MainDemo.c	nt =  TickGetDiv256();
004d80   ec27     call	0x764e, 0           	CALL	_TickGetDiv256
004d82   f03b
004d84   6e00     movwf	0, 0               	MOVWF	r0x00
004d86   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004d88   f001
004d8a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
004d8c   f002
004d8e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
004d90   f003
004d92   0108     movlb	0x8                	BANKSEL	_main_t_1_1
                                           ;	.line	238; MainDemo.c	if((nt - t) >= (DWORD)(TICK_SECOND/1024ul))
004d94   5138     movf	0x38, 0, 0x1        	MOVF	_main_t_1_1, W, B
004d96   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
004d98   6e04     movwf	0x4, 0             	MOVWF	r0x04
004d9a   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 1)
004d9c   5139     movf	0x39, 0, 0x1        	MOVF	(_main_t_1_1 + 1), W, B
004d9e   5801     subwfb	0x1, 0, 0         	SUBWFB	r0x01, W
004da0   6e05     movwf	0x5, 0             	MOVWF	r0x05
004da2   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 2)
004da4   513a     movf	0x3a, 0, 0x1        	MOVF	(_main_t_1_1 + 2), W, B
004da6   5802     subwfb	0x2, 0, 0         	SUBWFB	r0x02, W
004da8   6e06     movwf	0x6, 0             	MOVWF	r0x06
004daa   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 3)
004dac   513b     movf	0x3b, 0, 0x1        	MOVF	(_main_t_1_1 + 3), W, B
004dae   5803     subwfb	0x3, 0, 0         	SUBWFB	r0x03, W
004db0   6e07     movwf	0x7, 0             	MOVWF	r0x07
004db2   0e00     movlw	0                  	MOVLW	0x00
004db4   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
004db6   e108     bnz	0x4dc8               	BNZ	_00139_DS_
004db8   0e00     movlw	0                  	MOVLW	0x00
004dba   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
004dbc   e105     bnz	0x4dc8               	BNZ	_00139_DS_
004dbe   0e00     movlw	0                  	MOVLW	0x00
004dc0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
004dc2   e102     bnz	0x4dc8               	BNZ	_00139_DS_
004dc4   0e27     movlw	0x27               	MOVLW	0x27
004dc6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00139_DS_:
004dc8   e315     bnc	0x4df4               	BNC	_00125_DS_
                                           ;	.line	240; MainDemo.c	t = nt;
004dca   c000     movff	0, 0x838           	MOVFF	r0x00, _main_t_1_1
004dcc   f838
004dce   c001     movff	0x1, 0x839         	MOVFF	r0x01, (_main_t_1_1 + 1)
004dd0   f839
004dd2   c002     movff	0x2, 0x83a         	MOVFF	r0x02, (_main_t_1_1 + 2)
004dd4   f83a
004dd6   c003     movff	0x3, 0x83b         	MOVFF	r0x03, (_main_t_1_1 + 3)
004dd8   f83b
                                           ;	.line	241; MainDemo.c	LED0_IO ^= 1;
004dda   6a00     clrf	0, 0                	CLRF	r0x00
004ddc   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
004dde   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004de0   0e01     movlw	0x1                	MOVLW	0x01
004de2   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
004de4   5000     movf	0, 0, 0             	MOVF	r0x00, W
004de6   0b01     andlw	0x1                	ANDLW	0x01
004de8   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004dea   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
004dec   0bfe     andlw	0xfe               	ANDLW	0xfe
004dee   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
004df0   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
004df2   0004     clrwdt                   	clrwdt 
                                           _00125_DS_:
                                           ;	.line	248; MainDemo.c	StackTask();
004df4   ece5     call	0x1bca, 0           	CALL	_StackTask
004df6   f00d
                                           ;	.line	258; MainDemo.c	if(dwLastIP != AppConfig.MyIPAddr.Val)
004df8   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
004dfa   f000
004dfc   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
004dfe   f001
004e00   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
004e02   f002
004e04   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
004e06   f003
004e08   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
004e0a   513c     movf	0x3c, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
004e0c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
004e0e   e10d     bnz	0x4e2a               	BNZ	_00142_DS_
004e10   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
004e12   513d     movf	0x3d, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
004e14   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
004e16   e109     bnz	0x4e2a               	BNZ	_00142_DS_
004e18   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
004e1a   513e     movf	0x3e, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
004e1c   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
004e1e   e105     bnz	0x4e2a               	BNZ	_00142_DS_
004e20   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
004e22   513f     movf	0x3f, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
004e24   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
004e26   e101     bnz	0x4e2a               	BNZ	_00142_DS_
004e28   d7ab     bra	0x4d80               	BRA	_00129_DS_
                                           _00142_DS_:
                                           ;	.line	260; MainDemo.c	dwLastIP = AppConfig.MyIPAddr.Val;
004e2a   c000     movff	0, 0x83c           	MOVFF	r0x00, _main_dwLastIP_1_1
004e2c   f83c
004e2e   c001     movff	0x1, 0x83d         	MOVFF	r0x01, (_main_dwLastIP_1_1 + 1)
004e30   f83d
004e32   c002     movff	0x2, 0x83e         	MOVFF	r0x02, (_main_dwLastIP_1_1 + 2)
004e34   f83e
004e36   c003     movff	0x3, 0x83f         	MOVFF	r0x03, (_main_dwLastIP_1_1 + 3)
004e38   f83f
004e3a   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
                                           ;	.line	262; MainDemo.c	DisplayIPValue(dwLastIP); // must be a WORD: sdcc does not
004e3c   513f     movf	0x3f, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
004e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e40   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
004e42   513e     movf	0x3e, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
004e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e46   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
004e48   513d     movf	0x3d, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
004e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e4c   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
004e4e   513c     movf	0x3c, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
004e50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e52   ecf7     call	0x43ee, 0           	CALL	_DisplayIPValue
004e54   f021
004e56   0e04     movlw	0x4                	MOVLW	0x04
004e58   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004e5a   d792     bra	0x4d80               	BRA	_00129_DS_
004e5c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__strlcpy	code
                                           _strlcpy:
                                           ;	.line	504; MainDemo.c	strlcpy(char *dst, const char *src, size_t siz)
003e16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003e18   ffe5
003e1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003e1c   ffd9
003e1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003e20   ffe5
003e22   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003e24   ffe5
003e26   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003e28   ffe5
003e2a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003e2c   ffe5
003e2e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003e30   ffe5
003e32   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003e34   ffe5
003e36   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003e38   ffe5
003e3a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003e3c   ffe5
003e3e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003e40   ffe5
003e42   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003e44   ffe5
003e46   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003e48   ffe5
003e4a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003e4c   ffe5
003e4e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003e50   ffe5
003e52   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003e54   ffe5
003e56   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003e58   ffe5
003e5a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003e5c   ffe5
003e5e   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
003e60   ffe5
003e62   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003e64   ffe5
003e66   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003e68   ffe5
003e6a   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
003e6c   ffe5
003e6e   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
003e70   ffe5
003e72   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003e74   ffe5
003e76   0e02     movlw	0x2                	MOVLW	0x02
003e78   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003e7a   f000
003e7c   0e03     movlw	0x3                	MOVLW	0x03
003e7e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003e80   f001
003e82   0e04     movlw	0x4                	MOVLW	0x04
003e84   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003e86   f002
003e88   0e05     movlw	0x5                	MOVLW	0x05
003e8a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003e8c   f003
003e8e   0e06     movlw	0x6                	MOVLW	0x06
003e90   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003e92   f004
003e94   0e07     movlw	0x7                	MOVLW	0x07
003e96   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003e98   f005
003e9a   0e08     movlw	0x8                	MOVLW	0x08
003e9c   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003e9e   f006
003ea0   0e09     movlw	0x9                	MOVLW	0x09
003ea2   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003ea4   f007
                                           ;	.line	506; MainDemo.c	char       *d = dst;
003ea6   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003ea8   f008
003eaa   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003eac   f009
003eae   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003eb0   f00a
                                           ;	.line	507; MainDemo.c	const char *s = src;
003eb2   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
003eb4   f00b
003eb6   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
003eb8   f00c
003eba   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
003ebc   f00d
                                           ;	.line	508; MainDemo.c	size_t      n = siz;
003ebe   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
003ec0   f00e
003ec2   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003ec4   f00f
                                           ;	.line	511; MainDemo.c	if (n != 0)
003ec6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003ec8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003eca   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003ecc   d03e     bra	0x3f4a               	BRA	_00230_DS_
                                           ;	.line	513; MainDemo.c	while (--n != 0)
003ece   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
003ed0   f010
003ed2   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
003ed4   f011
003ed6   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
003ed8   f012
003eda   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
003edc   f013
003ede   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
003ee0   f014
                                           _00226_DS_:
003ee2   0eff     movlw	0xff               	MOVLW	0xff
003ee4   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
003ee6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003ee8   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
003eea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
003eec   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
003eee   e01d     bz	0x3f2a                	BZ	_00245_DS_
                                           ;	.line	515; MainDemo.c	if ((*d++ = *s++) == '\0')
003ef0   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003ef2   ffe9
003ef4   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003ef6   fff3
003ef8   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003efa   ec31     call	0x7862, 0           	CALL	__gptrget1
003efc   f03c
003efe   6e15     movwf	0x15, 0            	MOVWF	r0x15
003f00   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
003f02   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f04   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
003f06   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f08   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
003f0a   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003f0c   ffe5
003f0e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003f10   ffe9
003f12   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003f14   fff3
003f16   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f18   ecf3     call	0x79e6, 0           	CALL	__gptrput1
003f1a   f03c
003f1c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003f1e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f20   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003f22   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f24   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003f26   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
003f28   e1dc     bnz	0x3ee2               	BNZ	_00226_DS_
                                           _00245_DS_:
                                           ;	.line	516; MainDemo.c	break;
003f2a   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
003f2c   f00b
003f2e   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
003f30   f00c
003f32   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
003f34   f00d
003f36   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003f38   f008
003f3a   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003f3c   f009
003f3e   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003f40   f00a
003f42   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
003f44   f00e
003f46   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
003f48   f00f
                                           _00230_DS_:
                                           ;	.line	521; MainDemo.c	if (n == 0)
003f4a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003f4c   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
003f4e   e127     bnz	0x3f9e               	BNZ	_00237_DS_
                                           ;	.line	523; MainDemo.c	if (siz != 0)
003f50   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003f52   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003f54   e009     bz	0x3f68                	BZ	_00244_DS_
                                           ;	.line	524; MainDemo.c	*d = '\0';          /* NUL-terminate dst */
003f56   0e00     movlw	0                  	MOVLW	0x00
003f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f5a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003f5c   ffe9
003f5e   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
003f60   fff3
003f62   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003f64   ecf3     call	0x79e6, 0           	CALL	__gptrput1
003f66   f03c
                                           _00244_DS_:
                                           ;	.line	525; MainDemo.c	while (*s++)
003f68   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
003f6a   f000
003f6c   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
003f6e   f001
003f70   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
003f72   f002
                                           _00233_DS_:
003f74   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003f76   ffe9
003f78   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003f7a   fff3
003f7c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f7e   ec31     call	0x7862, 0           	CALL	__gptrget1
003f80   f03c
003f82   6e06     movwf	0x6, 0             	MOVWF	r0x06
003f84   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003f86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f88   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003f8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f8c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003f8e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003f90   e1f1     bnz	0x3f74               	BNZ	_00233_DS_
003f92   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
003f94   f00b
003f96   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
003f98   f00c
003f9a   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
003f9c   f00d
                                           _00237_DS_:
                                           ;	.line	529; MainDemo.c	return (s - src - 1);       /* count does not include NUL */
003f9e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003fa0   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
003fa2   6e03     movwf	0x3, 0             	MOVWF	r0x03
003fa4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003fa6   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
003fa8   6e04     movwf	0x4, 0             	MOVWF	r0x04
003faa   0eff     movlw	0xff               	MOVLW	0xff
003fac   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
003fae   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003fb0   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
003fb2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003fb4   fff3
003fb6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003fb8   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
003fba   f015
003fbc   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
003fbe   f014
003fc0   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003fc2   f013
003fc4   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003fc6   f012
003fc8   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003fca   f011
003fcc   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
003fce   f010
003fd0   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003fd2   f00f
003fd4   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003fd6   f00e
003fd8   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003fda   f00d
003fdc   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003fde   f00c
003fe0   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003fe2   f00b
003fe4   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003fe6   f00a
003fe8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003fea   f009
003fec   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003fee   f008
003ff0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003ff2   f007
003ff4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003ff6   f006
003ff8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003ffa   f005
003ffc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003ffe   f004
004000   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004002   f003
004004   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004006   f002
004008   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00400a   f001
00400c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00400e   f000
004010   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004012   ffd9
004014   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitAppConfig	code
                                           _InitAppConfig:
                                           ;	.line	433; MainDemo.c	static void InitAppConfig(void)
0059d2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0059d4   ffe5
0059d6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0059d8   ffd9
0059da   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0059dc   ffe5
0059de   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0059e0   ffe5
0059e2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0059e4   ffe5
0059e6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0059e8   ffe5
0059ea   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	435; MainDemo.c	AppConfig.Flags.bIsDHCPEnabled = TRUE;
0059ec   8d2c     bsf	0x2c, 0x6, 0x1       	BSF	(_AppConfig + 44), 6, B
0059ee   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	436; MainDemo.c	AppConfig.Flags.bInConfigMode = TRUE;
0059f0   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
0059f2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 45)
                                           ;	.line	440; MainDemo.c	AppConfig.MyMACAddr.v[0] = 0;
0059f4   6b2d     clrf	0x2d, 0x1           	CLRF	(_AppConfig + 45), B
                                           ;	.line	441; MainDemo.c	AppConfig.MyMACAddr.v[1] = 0x04;
0059f6   0e04     movlw	0x4                	MOVLW	0x04
0059f8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 46)
0059fa   6f2e     movwf	0x2e, 0x1          	MOVWF	(_AppConfig + 46), B
                                           ;	.line	442; MainDemo.c	AppConfig.MyMACAddr.v[2] = 0xA3;
0059fc   0ea3     movlw	0xa3               	MOVLW	0xa3
0059fe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 47)
005a00   6f2f     movwf	0x2f, 0x1          	MOVWF	(_AppConfig + 47), B
                                           ;	.line	443; MainDemo.c	AppConfig.MyMACAddr.v[3] = 0x01;
005a02   0e01     movlw	0x1                	MOVLW	0x01
005a04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 48)
005a06   6f30     movwf	0x30, 0x1          	MOVWF	(_AppConfig + 48), B
                                           ;	.line	444; MainDemo.c	AppConfig.MyMACAddr.v[4] = 0x02;
005a08   0e02     movlw	0x2                	MOVLW	0x02
005a0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 49)
005a0c   6f31     movwf	0x31, 0x1          	MOVWF	(_AppConfig + 49), B
                                           ;	.line	445; MainDemo.c	AppConfig.MyMACAddr.v[5] = 0x03;
005a0e   0e03     movlw	0x3                	MOVLW	0x03
005a10   010e     movlb	0xe                	BANKSEL	(_AppConfig + 50)
005a12   6f32     movwf	0x32, 0x1          	MOVWF	(_AppConfig + 50), B
                                           ;	.line	448; MainDemo.c	AppConfig.MyIPAddr.Val = MY_DEFAULT_IP_ADDR_BYTE1 | 
005a14   0ec0     movlw	0xc0               	MOVLW	0xc0
005a16   010e     movlb	0xe                	BANKSEL	_AppConfig
005a18   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
005a1a   0ea8     movlw	0xa8               	MOVLW	0xa8
005a1c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
005a1e   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
005a20   0e61     movlw	0x61               	MOVLW	0x61
005a22   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
005a24   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
005a26   0e3c     movlw	0x3c               	MOVLW	0x3c
005a28   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
005a2a   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	451; MainDemo.c	AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
005a2c   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
005a2e   f000
005a30   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
005a32   f001
005a34   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
005a36   f002
005a38   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
005a3a   f003
005a3c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005a3e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 20)
005a40   6f14     movwf	0x14, 0x1          	MOVWF	(_AppConfig + 20), B
005a42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005a44   010e     movlb	0xe                	BANKSEL	(_AppConfig + 21)
005a46   6f15     movwf	0x15, 0x1          	MOVWF	(_AppConfig + 21), B
005a48   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005a4a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 22)
005a4c   6f16     movwf	0x16, 0x1          	MOVWF	(_AppConfig + 22), B
005a4e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005a50   010e     movlb	0xe                	BANKSEL	(_AppConfig + 23)
005a52   6f17     movwf	0x17, 0x1          	MOVWF	(_AppConfig + 23), B
005a54   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	452; MainDemo.c	AppConfig.MyMask.Val = MY_DEFAULT_MASK_BYTE1 | 
005a56   6904     setf	0x4, 0x1            	SETF	(_AppConfig + 4), B
005a58   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
005a5a   6905     setf	0x5, 0x1            	SETF	(_AppConfig + 5), B
005a5c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
005a5e   6906     setf	0x6, 0x1            	SETF	(_AppConfig + 6), B
005a60   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
005a62   6b07     clrf	0x7, 0x1            	CLRF	(_AppConfig + 7), B
                                           ;	.line	455; MainDemo.c	AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
005a64   ce04     movff	0xe04, 0           	MOVFF	(_AppConfig + 4), r0x00
005a66   f000
005a68   ce05     movff	0xe05, 0x1         	MOVFF	(_AppConfig + 5), r0x01
005a6a   f001
005a6c   ce06     movff	0xe06, 0x2         	MOVFF	(_AppConfig + 6), r0x02
005a6e   f002
005a70   ce07     movff	0xe07, 0x3         	MOVFF	(_AppConfig + 7), r0x03
005a72   f003
005a74   5000     movf	0, 0, 0             	MOVF	r0x00, W
005a76   010e     movlb	0xe                	BANKSEL	(_AppConfig + 24)
005a78   6f18     movwf	0x18, 0x1          	MOVWF	(_AppConfig + 24), B
005a7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005a7c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 25)
005a7e   6f19     movwf	0x19, 0x1          	MOVWF	(_AppConfig + 25), B
005a80   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005a82   010e     movlb	0xe                	BANKSEL	(_AppConfig + 26)
005a84   6f1a     movwf	0x1a, 0x1          	MOVWF	(_AppConfig + 26), B
005a86   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005a88   010e     movlb	0xe                	BANKSEL	(_AppConfig + 27)
005a8a   6f1b     movwf	0x1b, 0x1          	MOVWF	(_AppConfig + 27), B
                                           ;	.line	456; MainDemo.c	AppConfig.MyGateway.Val = MY_DEFAULT_GATE_BYTE1 | 
005a8c   0ec0     movlw	0xc0               	MOVLW	0xc0
005a8e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
005a90   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
005a92   0ea8     movlw	0xa8               	MOVLW	0xa8
005a94   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
005a96   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
005a98   0e61     movlw	0x61               	MOVLW	0x61
005a9a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
005a9c   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
005a9e   0e01     movlw	0x1                	MOVLW	0x01
005aa0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
005aa2   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	459; MainDemo.c	AppConfig.PrimaryDNSServer.Val = MY_DEFAULT_PRIMARY_DNS_BYTE1 | 
005aa4   0ec0     movlw	0xc0               	MOVLW	0xc0
005aa6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 12)
005aa8   6f0c     movwf	0xc, 0x1           	MOVWF	(_AppConfig + 12), B
005aaa   0ea8     movlw	0xa8               	MOVLW	0xa8
005aac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 13)
005aae   6f0d     movwf	0xd, 0x1           	MOVWF	(_AppConfig + 13), B
005ab0   0e61     movlw	0x61               	MOVLW	0x61
005ab2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 14)
005ab4   6f0e     movwf	0xe, 0x1           	MOVWF	(_AppConfig + 14), B
005ab6   0e01     movlw	0x1                	MOVLW	0x01
005ab8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 15)
005aba   6f0f     movwf	0xf, 0x1           	MOVWF	(_AppConfig + 15), B
005abc   010e     movlb	0xe                	BANKSEL	(_AppConfig + 16)
                                           ;	.line	463; MainDemo.c	AppConfig.SecondaryDNSServer.Val = MY_DEFAULT_SECONDARY_DNS_BYTE1 | 
005abe   6b10     clrf	0x10, 0x1           	CLRF	(_AppConfig + 16), B
005ac0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 17)
005ac2   6b11     clrf	0x11, 0x1           	CLRF	(_AppConfig + 17), B
005ac4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 18)
005ac6   6b12     clrf	0x12, 0x1           	CLRF	(_AppConfig + 18), B
005ac8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 19)
005aca   6b13     clrf	0x13, 0x1           	CLRF	(_AppConfig + 19), B
005acc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005ace   f003
005ad0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005ad2   f002
005ad4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005ad6   f001
005ad8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005ada   f000
005adc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005ade   ffd9
005ae0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitializeBoard	code
                                           _InitializeBoard:
                                           ;	.line	377; MainDemo.c	static void InitializeBoard(void)
0076d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0076d2   ffe5
0076d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0076d6   ffd9
                                           ;	.line	380; MainDemo.c	LED0_TRIS = 0;  //LED0
0076d8   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	381; MainDemo.c	LED1_TRIS = 0;  //LED1
0076da   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	382; MainDemo.c	LED2_TRIS = 0;  //LED2
0076dc   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	383; MainDemo.c	LED3_TRIS = 0;  //LED_LCD1
0076de   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	384; MainDemo.c	LED4_TRIS = 0;  //LED_LCD2
0076e0   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	385; MainDemo.c	LED5_TRIS = 0;  //LED5=RELAY1
0076e2   9e98     bcf	0x98, 0x7, 0         	BCF	_TRISGbits, 7
                                           ;	.line	386; MainDemo.c	LED6_TRIS = 0;  //LED7=RELAY2
0076e4   9c98     bcf	0x98, 0x6, 0         	BCF	_TRISGbits, 6
                                           ;	.line	391; MainDemo.c	LED_PUT(0x00);  //turn off LED0 - LED2
0076e6   0ef8     movlw	0xf8               	MOVLW	0xf8
0076e8   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	392; MainDemo.c	RELAY_PUT(0x00); //turn relays off to save power
0076ea   0e3f     movlw	0x3f               	MOVLW	0x3f
0076ec   168f     andwf	0x8f, 0x1, 0       	ANDWF	_LATG, F
                                           ;	.line	398; MainDemo.c	OSCTUNE = 0x40;
0076ee   0e40     movlw	0x40               	MOVLW	0x40
0076f0   6e9b     movwf	0x9b, 0            	MOVWF	_OSCTUNE
                                           ;	.line	405; MainDemo.c	if(OSCCONbits.IDLEN) //IDLEN = 0x80; 0x02 selects the primary clock
0076f2   aed3     btfss	0xd3, 0x7, 0       	BTFSS	_OSCCONbits, 7
0076f4   d003     bra	0x76fc               	BRA	_00212_DS_
                                           ;	.line	406; MainDemo.c	OSCCON = 0x82;
0076f6   0e82     movlw	0x82               	MOVLW	0x82
0076f8   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
0076fa   d002     bra	0x7700               	BRA	_00213_DS_
                                           _00212_DS_:
                                           ;	.line	408; MainDemo.c	OSCCON = 0x02;
0076fc   0e02     movlw	0x2                	MOVLW	0x02
0076fe   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           _00213_DS_:
                                           ;	.line	411; MainDemo.c	RCONbits.IPEN = 1;		// Enable interrupt priorities
007700   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	412; MainDemo.c	INTCONbits.GIEH = 1;
007702   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	413; MainDemo.c	INTCONbits.GIEL = 1;
007704   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
007706   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007708   ffd9
00770a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayIPValue	code
                                           _DisplayIPValue:
                                           ;	.line	319; MainDemo.c	void DisplayIPValue(DWORD IPdw) // 32 bits
0043ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0043f0   ffe5
0043f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0043f4   ffd9
0043f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0043f8   ffe5
0043fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0043fc   ffe5
0043fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004400   ffe5
004402   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004404   ffe5
004406   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004408   ffe5
00440a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00440c   ffe5
00440e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004410   ffe5
004412   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004414   ffe5
004416   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004418   ffe5
00441a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00441c   ffe5
00441e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004420   ffe5
004422   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004424   ffe5
004426   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
004428   ffe5
00442a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00442c   ffe5
00442e   0e02     movlw	0x2                	MOVLW	0x02
004430   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004432   f000
004434   0e03     movlw	0x3                	MOVLW	0x03
004436   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004438   f001
00443a   0e04     movlw	0x4                	MOVLW	0x04
00443c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00443e   f002
004440   0e05     movlw	0x5                	MOVLW	0x05
004442   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004444   f003
                                           ;	.line	327; MainDemo.c	BYTE LCDPos=16;  //write on second line of LCD
004446   0e10     movlw	0x10               	MOVLW	0x10
004448   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	332; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
00444a   6a05     clrf	0x5, 0              	CLRF	r0x05
00444c   6a06     clrf	0x6, 0              	CLRF	r0x06
00444e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00177_DS_:
004450   0e04     movlw	0x4                	MOVLW	0x04
004452   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
004454   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004456   d081     bra	0x455a               	BRA	_00180_DS_
                                           ;	.line	335; MainDemo.c	IP_field =(WORD)(IPdw>>(i*8))&0xff;      //ML
004458   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
00445a   f008
00445c   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
00445e   f009
004460   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
004462   f00a
004464   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
004466   f00b
004468   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00446a   e011     bz	0x448e                	BZ	_00198_DS_
00446c   e609     bn	0x4480                	BN	_00201_DS_
00446e   6ce8     negf	0xe8, 0             	NEGF	WREG
004470   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00199_DS_:
004472   320b     rrcf	0xb, 0x1, 0         	RRCF	r0x0b, F
004474   320a     rrcf	0xa, 0x1, 0         	RRCF	r0x0a, F
004476   3209     rrcf	0x9, 0x1, 0         	RRCF	r0x09, F
004478   3208     rrcf	0x8, 0x1, 0         	RRCF	r0x08, F
00447a   0f01     addlw	0x1                	ADDLW	0x01
00447c   e3fa     bnc	0x4472               	BNC	_00199_DS_
00447e   d007     bra	0x448e               	BRA	_00198_DS_
                                           _00201_DS_:
004480   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00200_DS_:
004482   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
004484   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
004486   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
004488   360b     rlcf	0xb, 0x1, 0         	RLCF	r0x0b, F
00448a   0f01     addlw	0x1                	ADDLW	0x01
00448c   e3fa     bnc	0x4482               	BNC	_00200_DS_
                                           _00198_DS_:
00448e   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	336; MainDemo.c	uitoa(IP_field, IPDigit, radix);      //ML
004490   0e0a     movlw	0xa                	MOVLW	0x0a
004492   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004494   0e0e     movlw	0xe                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
004496   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004498   0e7c     movlw	0x7c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
00449a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00449c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00449e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044a0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0044a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044a4   ecfd     call	0x6ffa, 0           	CALL	_uitoa
0044a6   f037
0044a8   0e05     movlw	0x5                	MOVLW	0x05
0044aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	341; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
0044ac   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0044ae   f008
0044b0   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00183_DS_:
0044b2   0e0e     movlw	0xe                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
0044b4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0044b6   0e7c     movlw	0x7c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
0044b8   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0044ba   0e80     movlw	0x80               	MOVLW	0x80
0044bc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0044be   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0044c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044c2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0044c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044c6   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0044c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044ca   ec42     call	0x6e84, 0           	CALL	_strlen
0044cc   f037
0044ce   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0044d0   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
0044d2   f00b
0044d4   0e03     movlw	0x3                	MOVLW	0x03
0044d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0044d8   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
0044da   f00c
0044dc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0044de   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0044e0   0f80     addlw	0x80               	ADDLW	0x80
0044e2   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0044e4   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0044e6   0f80     addlw	0x80               	ADDLW	0x80
0044e8   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0044ea   e102     bnz	0x44f0               	BNZ	_00203_DS_
0044ec   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0044ee   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00203_DS_:
0044f0   e21c     bc	0x452a                	BC	_00195_DS_
                                           ;	.line	343; MainDemo.c	LCDText[LCDPos++] = IPDigit[j];
0044f2   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
0044f4   f00a
0044f6   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
0044f8   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0044fa   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0044fc   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
0044fe   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004500   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
004502   0e7c     movlw	0x7c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
004504   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
004506   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
004508   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00450a   0e0e     movlw	0xe                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
00450c   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00450e   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
004510   ffe9
004512   c00d     movff	0xd, 0xfea         	MOVFF	r0x0d, FSR0H
004514   ffea
004516   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
004518   f00c
00451a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00451c   ffe9
00451e   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
004520   ffea
004522   c00c     movff	0xc, 0xfef         	MOVFF	r0x0c, INDF0
004524   ffef
                                           ;	.line	341; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
004526   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
004528   d7c4     bra	0x44b2               	BRA	_00183_DS_
                                           _00195_DS_:
00452a   c008     movff	0x8, 0x4           	MOVFF	r0x08, r0x04
00452c   f004
                                           ;	.line	345; MainDemo.c	if(i == sizeof(IP_ADDR)-1)
00452e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004530   0a03     xorlw	0x3                	XORLW	0x03
004532   e013     bz	0x455a                	BZ	_00180_DS_
                                           ;	.line	347; MainDemo.c	LCDText[LCDPos++] = '.';
004534   2808     incf	0x8, 0, 0           	INCF	r0x08, W
004536   6e04     movwf	0x4, 0             	MOVWF	r0x04
004538   6a09     clrf	0x9, 0              	CLRF	r0x09
00453a   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00453c   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
00453e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004540   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
004542   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004544   ffe9
004546   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
004548   ffea
00454a   0e2e     movlw	0x2e               	MOVLW	0x2e
00454c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	332; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
00454e   0e08     movlw	0x8                	MOVLW	0x08
004550   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004552   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004554   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
004556   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
004558   d77b     bra	0x4450               	BRA	_00177_DS_
                                           _00180_DS_:
                                           ;	.line	350; MainDemo.c	if(LCDPos < 32u)
00455a   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
00455c   f000
00455e   6a01     clrf	0x1, 0              	CLRF	r0x01
004560   0e00     movlw	0                  	MOVLW	0x00
004562   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004564   e102     bnz	0x456a               	BNZ	_00206_DS_
004566   0e20     movlw	0x20               	MOVLW	0x20
004568   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00206_DS_:
00456a   e20b     bc	0x4582                	BC	_00182_DS_
                                           ;	.line	351; MainDemo.c	LCDText[LCDPos] = 0;
00456c   6a00     clrf	0, 0                	CLRF	r0x00
00456e   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
004570   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004572   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004574   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
004576   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
004578   ffe9
00457a   c000     movff	0, 0xfea           	MOVFF	r0x00, FSR0H
00457c   ffea
00457e   0e00     movlw	0                  	MOVLW	0x00
004580   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00182_DS_:
                                           ;	.line	352; MainDemo.c	LCDUpdate();
004582   ec39     call	0x3072, 0           	CALL	_LCDUpdate
004584   f018
004586   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
004588   f00d
00458a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00458c   f00c
00458e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004590   f00b
004592   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004594   f00a
004596   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004598   f009
00459a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00459c   f008
00459e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0045a0   f007
0045a2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0045a4   f006
0045a6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0045a8   f005
0045aa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0045ac   f004
0045ae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0045b0   f003
0045b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0045b4   f002
0045b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0045b8   f001
0045ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0045bc   f000
0045be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0045c0   ffd9
0045c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayString	code
                                           _DisplayString:
                                           ;	.line	303; MainDemo.c	void DisplayString(BYTE pos, char* text)
006242   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006244   ffe5
006246   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006248   ffd9
00624a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00624c   ffe5
00624e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006250   ffe5
006252   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006254   ffe5
006256   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006258   ffe5
00625a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00625c   ffe5
00625e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006260   ffe5
006262   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006264   ffe5
006266   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006268   ffe5
00626a   0e02     movlw	0x2                	MOVLW	0x02
00626c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00626e   f000
006270   0e03     movlw	0x3                	MOVLW	0x03
006272   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006274   f001
006276   0e04     movlw	0x4                	MOVLW	0x04
006278   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00627a   f002
00627c   0e05     movlw	0x5                	MOVLW	0x05
00627e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006280   f003
                                           ;	.line	305; MainDemo.c	BYTE l= strlen(text)+1;
006282   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006284   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006286   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006288   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00628a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00628c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00628e   ec42     call	0x6e84, 0           	CALL	_strlen
006290   f037
006292   6e04     movwf	0x4, 0             	MOVWF	r0x04
006294   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
006296   f005
006298   0e03     movlw	0x3                	MOVLW	0x03
00629a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00629c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	306; MainDemo.c	BYTE max= 32-pos;
00629e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0062a0   0820     sublw	0x20               	SUBLW	0x20
0062a2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	307; MainDemo.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0062a4   6a06     clrf	0x6, 0              	CLRF	r0x06
0062a6   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0062a8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0062aa   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0062ac   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0062ae   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0062b0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0062b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0062b4   6e00     movwf	0, 0               	MOVWF	r0x00
0062b6   0e80     movlw	0x80               	MOVLW	0x80
0062b8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0062ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0062bc   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0062be   e302     bnc	0x62c4               	BNC	_00168_DS_
0062c0   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0062c2   f004
                                           _00168_DS_:
0062c4   6a05     clrf	0x5, 0              	CLRF	r0x05
0062c6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0062c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062ca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0062cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0062d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0062d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0062d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062da   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0062dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062de   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0062e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0062e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062e6   ec0b     call	0x3e16, 0           	CALL	_strlcpy
0062e8   f01f
0062ea   0e08     movlw	0x8                	MOVLW	0x08
0062ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	308; MainDemo.c	LCDUpdate();
0062ee   ec39     call	0x3072, 0           	CALL	_LCDUpdate
0062f0   f018
0062f2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0062f4   f007
0062f6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0062f8   f006
0062fa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0062fc   f005
0062fe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006300   f004
006302   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006304   f003
006306   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006308   f002
00630a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00630c   f001
00630e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006310   f000
006312   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006314   ffd9
006316   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	281; MainDemo.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00533a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00533c   ffe5
00533e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005340   ffd9
005342   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005344   ffe5
005346   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005348   ffe5
00534a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00534c   ffe5
00534e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005350   ffe5
005352   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005354   ffe5
005356   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005358   ffe5
00535a   0e02     movlw	0x2                	MOVLW	0x02
00535c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00535e   f000
005360   0e03     movlw	0x3                	MOVLW	0x03
005362   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005364   f001
005366   0e04     movlw	0x4                	MOVLW	0x04
005368   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00536a   f002
                                           ;	.line	289; MainDemo.c	ultoa(w, WDigit, radix);      
00536c   6a03     clrf	0x3, 0              	CLRF	r0x03
00536e   6a04     clrf	0x4, 0              	CLRF	r0x04
005370   0e0a     movlw	0xa                	MOVLW	0x0a
005372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005374   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
005376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005378   0ece     movlw	0xce               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00537a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00537c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00537e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005380   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005384   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005388   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00538a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00538c   ece2     call	0x45c4, 0           	CALL	_ultoa
00538e   f022
005390   0e07     movlw	0x7                	MOVLW	0x07
005392   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	290; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
005394   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00149_DS_:
005396   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
005398   6e03     movwf	0x3, 0             	MOVWF	r0x03
00539a   0ece     movlw	0xce               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00539c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00539e   0e80     movlw	0x80               	MOVLW	0x80
0053a0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0053a2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0053a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053a6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0053a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053aa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ae   ec42     call	0x6e84, 0           	CALL	_strlen
0053b0   f037
0053b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0053b4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0053b6   f003
0053b8   0e03     movlw	0x3                	MOVLW	0x03
0053ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0053bc   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0053be   f004
0053c0   6a05     clrf	0x5, 0              	CLRF	r0x05
0053c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0053c4   0f80     addlw	0x80               	ADDLW	0x80
0053c6   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0053c8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0053ca   0f80     addlw	0x80               	ADDLW	0x80
0053cc   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0053ce   e102     bnz	0x53d4               	BNZ	_00159_DS_
0053d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053d2   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00159_DS_:
0053d4   e21c     bc	0x540e                	BC	_00152_DS_
                                           ;	.line	292; MainDemo.c	LCDText[LCDPos++] = WDigit[j];
0053d6   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0053d8   f002
0053da   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0053dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0053de   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0053e0   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0053e2   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0053e4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0053e6   0ece     movlw	0xce               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0053e8   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0053ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0053ec   6a05     clrf	0x5, 0              	CLRF	r0x05
0053ee   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0053f0   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0053f2   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0053f4   ffe9
0053f6   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0053f8   ffea
0053fa   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0053fc   f004
0053fe   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005400   ffe9
005402   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005404   ffea
005406   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
005408   ffef
                                           ;	.line	290; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
00540a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00540c   d7c4     bra	0x5396               	BRA	_00149_DS_
                                           _00152_DS_:
                                           ;	.line	294; MainDemo.c	if(LCDPos < 32u)
00540e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005410   f001
005412   6a02     clrf	0x2, 0              	CLRF	r0x02
005414   0e00     movlw	0                  	MOVLW	0x00
005416   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
005418   e102     bnz	0x541e               	BNZ	_00160_DS_
00541a   0e20     movlw	0x20               	MOVLW	0x20
00541c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00160_DS_:
00541e   e20b     bc	0x5436                	BC	_00148_DS_
                                           ;	.line	295; MainDemo.c	LCDText[LCDPos] = 0;
005420   6a01     clrf	0x1, 0              	CLRF	r0x01
005422   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
005424   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005426   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
005428   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00542a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00542c   ffe9
00542e   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
005430   ffea
005432   0e00     movlw	0                  	MOVLW	0x00
005434   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00148_DS_:
                                           ;	.line	296; MainDemo.c	LCDUpdate();
005436   ec39     call	0x3072, 0           	CALL	_LCDUpdate
005438   f018
00543a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00543c   f005
00543e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005440   f004
005442   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005444   f003
005446   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005448   f002
00544a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00544c   f001
00544e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005450   f000
005452   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005454   ffd9
005456   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__HighISR	code
                                           _HighISR:
                                           ;	.line	163; MainDemo.c	void HighISR(void) __interrupt(1) //ML for sdcc        
0072b8   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0072ba   ffe5
0072bc   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0072be   ffe5
0072c0   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0072c2   ffe5
0072c4   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0072c6   ffe5
0072c8   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0072ca   ffe5
0072cc   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0072ce   ffe5
0072d0   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0072d2   ffe5
0072d4   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0072d6   ffe5
0072d8   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0072da   ffe5
0072dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0072de   ffe5
0072e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0072e2   ffd9
                                           ;	.line	170; MainDemo.c	}
0072e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0072e6   ffd9
0072e8   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0072ea   fffb
0072ec   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0072ee   fffa
0072f0   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0072f2   ffea
0072f4   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0072f6   ffe9
0072f8   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0072fa   fff4
0072fc   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0072fe   fff3
007300   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
007302   ffe0
007304   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
007306   ffd8
007308   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00730a   ffe8
00730c   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__LowISR	code
                                           _LowISR:
                                           ;	.line	143; MainDemo.c	void LowISR(void) __interrupt (2) //ML for sdcc
00713e   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
007140   ffe5
007142   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
007144   ffe5
007146   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
007148   ffe5
00714a   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00714c   ffe5
00714e   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
007150   ffe5
007152   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
007154   ffe5
007156   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
007158   ffe5
00715a   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00715c   ffe5
00715e   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
007160   ffe5
007162   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007164   ffe5
007166   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007168   ffd9
                                           ;	.line	149; MainDemo.c	TickUpdate();
00716a   ece3     call	0x77c6, 0           	CALL	_TickUpdate
00716c   f03b
00716e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007170   ffd9
007172   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
007174   fffb
007176   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
007178   fffa
00717a   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00717c   ffea
00717e   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
007180   ffe9
007182   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
007184   fff4
007186   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
007188   fff3
00718a   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00718c   ffe0
00718e   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
007190   ffd8
007192   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
007194   ffe8
007196   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
007198   6c4f     negf	0x4f, 0             	DB	0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x00
00719a   6d69     negf	0x69, 0x1           
00719c   7865     btg	0x65, 0x4, 0         
00719e   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2318 (0x090e) bytes ( 1.77%)
                                           ;           	 1159 (0x0487) words
                                           ; udata size:	   72 (0x0048) bytes ( 1.88%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:28 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:28 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ARPInit
                                           	global _ARPProcess
                                           	global _ARPResolve
                                           	global _ARPIsResolved
                                           	global _SwapARPPacket
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _swaps
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACPutHeader
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ARPProcess_smARP_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_ARP_0	udata
                                           _Cache	res	10
                                           
                                           udata_ARP_1	udata
                                           _ARPProcess_Target_1_1	res	10
                                           
                                           udata_ARP_2	udata
                                           _ARPProcess_packet_1_1	res	28
                                           
                                           udata_ARP_3	udata
                                           _ARPResolve_packet_1_1	res	28
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ARP__SwapARPPacket	code
                                           _SwapARPPacket:
                                           ;	.line	412; TCPIP_Stack/ARP.c	void SwapARPPacket(ARP_PACKET* p)
004f9e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004fa0   ffe5
004fa2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004fa4   ffd9
004fa6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004fa8   ffe5
004faa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004fac   ffe5
004fae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004fb0   ffe5
004fb2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004fb4   ffe5
004fb6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004fb8   ffe5
004fba   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004fbc   ffe5
004fbe   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004fc0   ffe5
004fc2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004fc4   ffe5
004fc6   0e02     movlw	0x2                	MOVLW	0x02
004fc8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004fca   f000
004fcc   0e03     movlw	0x3                	MOVLW	0x03
004fce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004fd0   f001
004fd2   0e04     movlw	0x4                	MOVLW	0x04
004fd4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004fd6   f002
                                           ;	.line	414; TCPIP_Stack/ARP.c	p->HardwareType     = swaps(p->HardwareType);
004fd8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004fda   ffe9
004fdc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004fde   fff3
004fe0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004fe2   ecb8     call	0x7770, 0           	CALL	__gptrget2
004fe4   f03b
004fe6   6e03     movwf	0x3, 0             	MOVWF	r0x03
004fe8   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004fea   f004
004fec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ff0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ff4   ecb1     call	0x7362, 0           	CALL	_swaps
004ff6   f039
004ff8   6e03     movwf	0x3, 0             	MOVWF	r0x03
004ffa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004ffc   f004
004ffe   0e02     movlw	0x2                	MOVLW	0x02
005000   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005002   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005004   ffe5
005006   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
005008   fff4
00500a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00500c   ffe9
00500e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005010   fff3
005012   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005014   ecd3     call	0x79a6, 0           	CALL	__gptrput2
005016   f03c
                                           ;	.line	415; TCPIP_Stack/ARP.c	p->Protocol         = swaps(p->Protocol);
005018   5000     movf	0, 0, 0             	MOVF	r0x00, W
00501a   0f02     addlw	0x2                	ADDLW	0x02
00501c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00501e   0e00     movlw	0                  	MOVLW	0x00
005020   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005022   6e04     movwf	0x4, 0             	MOVWF	r0x04
005024   0e00     movlw	0                  	MOVLW	0x00
005026   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005028   6e05     movwf	0x5, 0             	MOVWF	r0x05
00502a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00502c   ffe9
00502e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005030   fff3
005032   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005034   ecb8     call	0x7770, 0           	CALL	__gptrget2
005036   f03b
005038   6e06     movwf	0x6, 0             	MOVWF	r0x06
00503a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00503c   f007
00503e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005040   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005042   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005044   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005046   ecb1     call	0x7362, 0           	CALL	_swaps
005048   f039
00504a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00504c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00504e   f007
005050   0e02     movlw	0x2                	MOVLW	0x02
005052   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005054   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005056   ffe5
005058   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
00505a   fff4
00505c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00505e   ffe9
005060   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005062   fff3
005064   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005066   ecd3     call	0x79a6, 0           	CALL	__gptrput2
005068   f03c
                                           ;	.line	416; TCPIP_Stack/ARP.c	p->Operation        = swaps(p->Operation);
00506a   0e06     movlw	0x6                	MOVLW	0x06
00506c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00506e   0e00     movlw	0                  	MOVLW	0x00
005070   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005072   0e00     movlw	0                  	MOVLW	0x00
005074   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005076   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005078   ffe9
00507a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00507c   fff3
00507e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005080   ecb8     call	0x7770, 0           	CALL	__gptrget2
005082   f03b
005084   6e03     movwf	0x3, 0             	MOVWF	r0x03
005086   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
005088   f004
00508a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00508c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00508e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005092   ecb1     call	0x7362, 0           	CALL	_swaps
005094   f039
005096   6e03     movwf	0x3, 0             	MOVWF	r0x03
005098   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00509a   f004
00509c   0e02     movlw	0x2                	MOVLW	0x02
00509e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0050a0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0050a2   ffe5
0050a4   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0050a6   fff4
0050a8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0050aa   ffe9
0050ac   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0050ae   fff3
0050b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050b2   ecd3     call	0x79a6, 0           	CALL	__gptrput2
0050b4   f03c
0050b6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0050b8   f007
0050ba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0050bc   f006
0050be   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0050c0   f005
0050c2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0050c4   f004
0050c6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0050c8   f003
0050ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0050cc   f002
0050ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0050d0   f001
0050d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0050d4   f000
0050d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0050d8   ffd9
0050da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPIsResolved	code
                                           _ARPIsResolved:
                                           ;	.line	377; TCPIP_Stack/ARP.c	BOOL ARPIsResolved(IP_ADDR* IPAddr, MAC_ADDR* MACAddr)
00491c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00491e   ffe5
004920   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004922   ffd9
004924   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004926   ffe5
004928   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00492a   ffe5
00492c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00492e   ffe5
004930   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004932   ffe5
004934   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004936   ffe5
004938   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00493a   ffe5
00493c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00493e   ffe5
004940   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004942   ffe5
004944   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004946   ffe5
004948   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00494a   ffe5
00494c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00494e   ffe5
004950   0e02     movlw	0x2                	MOVLW	0x02
004952   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004954   f000
004956   0e03     movlw	0x3                	MOVLW	0x03
004958   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00495a   f001
00495c   0e04     movlw	0x4                	MOVLW	0x04
00495e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004960   f002
004962   0e05     movlw	0x5                	MOVLW	0x05
004964   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004966   f003
004968   0e06     movlw	0x6                	MOVLW	0x06
00496a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00496c   f004
00496e   0e07     movlw	0x7                	MOVLW	0x07
004970   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004972   f005
                                           ;	.line	379; TCPIP_Stack/ARP.c	if((Cache.IPAddr.Val == IPAddr->Val) || 
004974   c898     movff	0x898, 0x6         	MOVFF	_Cache, r0x06
004976   f006
004978   c899     movff	0x899, 0x7         	MOVFF	(_Cache + 1), r0x07
00497a   f007
00497c   c89a     movff	0x89a, 0x8         	MOVFF	(_Cache + 2), r0x08
00497e   f008
004980   c89b     movff	0x89b, 0x9         	MOVFF	(_Cache + 3), r0x09
004982   f009
004984   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004986   ffe9
004988   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00498a   fff3
00498c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00498e   ec48     call	0x7690, 0           	CALL	__gptrget4
004990   f03b
004992   6e00     movwf	0, 0               	MOVWF	r0x00
004994   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004996   f001
004998   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00499a   f002
00499c   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
00499e   f00a
0049a0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0049a2   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
0049a4   e109     bnz	0x49b8               	BNZ	_00180_DS_
0049a6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0049a8   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
0049aa   e106     bnz	0x49b8               	BNZ	_00180_DS_
0049ac   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0049ae   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
0049b0   e103     bnz	0x49b8               	BNZ	_00180_DS_
0049b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0049b4   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
0049b6   e02e     bz	0x4a14                	BZ	_00171_DS_
                                           _00180_DS_:
                                           ;	.line	380; TCPIP_Stack/ARP.c	((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && 
0049b8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0049ba   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
0049bc   1908     xorwf	0x8, 0, 0x1        	XORWF	(_AppConfig + 8), W, B
0049be   e10c     bnz	0x49d8               	BNZ	_00181_DS_
0049c0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0049c2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
0049c4   1909     xorwf	0x9, 0, 0x1        	XORWF	(_AppConfig + 9), W, B
0049c6   e108     bnz	0x49d8               	BNZ	_00181_DS_
0049c8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0049ca   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
0049cc   190a     xorwf	0xa, 0, 0x1        	XORWF	(_AppConfig + 10), W, B
0049ce   e104     bnz	0x49d8               	BNZ	_00181_DS_
0049d0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0049d2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
0049d4   190b     xorwf	0xb, 0, 0x1        	XORWF	(_AppConfig + 11), W, B
0049d6   e001     bz	0x49da                	BZ	_00182_DS_
                                           _00181_DS_:
0049d8   d039     bra	0x4a4c               	BRA	_00172_DS_
                                           _00182_DS_:
0049da   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	381; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val)))
0049dc   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0049de   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0049e0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0049e2   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0049e4   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
0049e6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0049e8   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0049ea   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
0049ec   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
0049ee   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
0049f0   1a0a     xorwf	0xa, 0x1, 0        	XORWF	r0x0a, F
0049f2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
0049f4   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
0049f6   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0049f8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
0049fa   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
0049fc   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
0049fe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
004a00   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
004a02   1602     andwf	0x2, 0x1, 0        	ANDWF	r0x02, F
004a04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
004a06   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
004a08   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
004a0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
004a0c   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
004a0e   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
004a10   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
004a12   e01c     bz	0x4a4c                	BZ	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	384; TCPIP_Stack/ARP.c	memcpy((void*)MACAddr, (void*)&Cache.MACAddr, sizeof(Cache.MACAddr));
004a14   0e08     movlw	0x8                	MOVLW	HIGH(_Cache + 4)
004a16   6e01     movwf	0x1, 0             	MOVWF	r0x01
004a18   0e9c     movlw	0x9c               	MOVLW	LOW(_Cache + 4)
004a1a   6e00     movwf	0, 0               	MOVWF	r0x00
004a1c   0e80     movlw	0x80               	MOVLW	0x80
004a1e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004a20   0e00     movlw	0                  	MOVLW	0x00
004a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a24   0e06     movlw	0x6                	MOVLW	0x06
004a26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a28   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004a2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a2c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004a2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a30   5000     movf	0, 0, 0             	MOVF	r0x00, W
004a32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004a36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a38   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004a3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a3c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004a3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a40   ec71     call	0x5ae2, 0           	CALL	_memcpy
004a42   f02d
004a44   0e08     movlw	0x8                	MOVLW	0x08
004a46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; TCPIP_Stack/ARP.c	return TRUE;
004a48   0e01     movlw	0x1                	MOVLW	0x01
004a4a   d001     bra	0x4a4e               	BRA	_00175_DS_
                                           _00172_DS_:
                                           ;	.line	390; TCPIP_Stack/ARP.c	return FALSE;
004a4c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00175_DS_:
004a4e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004a50   f00a
004a52   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004a54   f009
004a56   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004a58   f008
004a5a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004a5c   f007
004a5e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004a60   f006
004a62   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004a64   f005
004a66   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004a68   f004
004a6a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004a6c   f003
004a6e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004a70   f002
004a72   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004a74   f001
004a76   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004a78   f000
004a7a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004a7c   ffd9
004a7e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPResolve	code
                                           _ARPResolve:
                                           ;	.line	324; TCPIP_Stack/ARP.c	void ARPResolve(IP_ADDR* IPAddr)
0050dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0050de   ffe5
0050e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0050e2   ffd9
0050e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0050e6   ffe5
0050e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0050ea   ffe5
0050ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0050ee   ffe5
0050f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0050f2   ffe5
0050f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0050f6   ffe5
0050f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0050fa   ffe5
0050fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0050fe   ffe5
005100   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005102   ffe5
005104   0e02     movlw	0x2                	MOVLW	0x02
005106   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005108   f000
00510a   0e03     movlw	0x3                	MOVLW	0x03
00510c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00510e   f001
005110   0e04     movlw	0x4                	MOVLW	0x04
005112   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005114   f002
                                           ;	.line	328; TCPIP_Stack/ARP.c	packet.Operation            = ARP_OPERATION_REQ;
005116   0e01     movlw	0x1                	MOVLW	0x01
005118   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 6)
00511a   6f06     movwf	0x6, 0x1           	MOVWF	(_ARPResolve_packet_1_1 + 6), B
00511c   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 7)
00511e   6b07     clrf	0x7, 0x1            	CLRF	(_ARPResolve_packet_1_1 + 7), B
005120   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 18)
                                           ;	.line	329; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[0]   = 0xff;
005122   6912     setf	0x12, 0x1           	SETF	(_ARPResolve_packet_1_1 + 18), B
005124   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 19)
                                           ;	.line	330; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[1]   = 0xff;
005126   6913     setf	0x13, 0x1           	SETF	(_ARPResolve_packet_1_1 + 19), B
005128   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 20)
                                           ;	.line	331; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[2]   = 0xff;
00512a   6914     setf	0x14, 0x1           	SETF	(_ARPResolve_packet_1_1 + 20), B
00512c   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 21)
                                           ;	.line	332; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[3]   = 0xff;
00512e   6915     setf	0x15, 0x1           	SETF	(_ARPResolve_packet_1_1 + 21), B
005130   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 22)
                                           ;	.line	333; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[4]   = 0xff;
005132   6916     setf	0x16, 0x1           	SETF	(_ARPResolve_packet_1_1 + 22), B
005134   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 23)
                                           ;	.line	334; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[5]   = 0xff;
005136   6917     setf	0x17, 0x1           	SETF	(_ARPResolve_packet_1_1 + 23), B
                                           ;	.line	340; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val) 
005138   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00513a   ffe9
00513c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00513e   fff3
005140   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005142   ec48     call	0x7690, 0           	CALL	__gptrget4
005144   f03b
005146   6e00     movwf	0, 0               	MOVWF	r0x00
005148   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00514a   f001
00514c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00514e   f002
005150   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
005152   f003
005154   5000     movf	0, 0, 0             	MOVF	r0x00, W
005156   010e     movlb	0xe                	BANKSEL	_AppConfig
005158   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
00515a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00515c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00515e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
005160   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
005162   6e05     movwf	0x5, 0             	MOVWF	r0x05
005164   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005166   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
005168   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
00516a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00516c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00516e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
005170   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
005172   6e07     movwf	0x7, 0             	MOVWF	r0x07
005174   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
005176   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
005178   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
00517a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
00517c   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
00517e   1605     andwf	0x5, 0x1, 0        	ANDWF	r0x05, F
005180   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
005182   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
005184   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
005186   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
005188   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
00518a   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
00518c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00518e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005190   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005192   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005194   e009     bz	0x51a8                	BZ	_00165_DS_
                                           ;	.line	341; TCPIP_Stack/ARP.c	? AppConfig.MyGateway.Val 
005196   ce08     movff	0xe08, 0x4         	MOVFF	(_AppConfig + 8), r0x04
005198   f004
00519a   ce09     movff	0xe09, 0x5         	MOVFF	(_AppConfig + 9), r0x05
00519c   f005
00519e   ce0a     movff	0xe0a, 0x6         	MOVFF	(_AppConfig + 10), r0x06
0051a0   f006
0051a2   ce0b     movff	0xe0b, 0x7         	MOVFF	(_AppConfig + 11), r0x07
0051a4   f007
0051a6   d008     bra	0x51b8               	BRA	_00166_DS_
                                           _00165_DS_:
                                           ;	.line	342; TCPIP_Stack/ARP.c	: (*IPAddr).Val;
0051a8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0051aa   f004
0051ac   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0051ae   f005
0051b0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0051b2   f006
0051b4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0051b6   f007
                                           _00166_DS_:
0051b8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0051ba   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 24)
0051bc   6f18     movwf	0x18, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 24), B
0051be   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0051c0   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 25)
0051c2   6f19     movwf	0x19, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 25), B
0051c4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0051c6   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 26)
0051c8   6f1a     movwf	0x1a, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 26), B
0051ca   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0051cc   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 27)
0051ce   6f1b     movwf	0x1b, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 27), B
                                           ;	.line	343; TCPIP_Stack/ARP.c	ARPPut(&packet);
0051d0   0e08     movlw	0x8                	MOVLW	HIGH(_ARPResolve_packet_1_1)
0051d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0051d4   0e00     movlw	0                  	MOVLW	LOW(_ARPResolve_packet_1_1)
0051d6   6e00     movwf	0, 0               	MOVWF	r0x00
0051d8   0e80     movlw	0x80               	MOVLW	0x80
0051da   6e02     movwf	0x2, 0             	MOVWF	r0x02
0051dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0051de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0051e0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0051e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0051e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0051e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0051e8   ec0b     call	0x4016, 0           	CALL	_ARPPut
0051ea   f020
0051ec   0e03     movlw	0x3                	MOVLW	0x03
0051ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0051f0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0051f2   f007
0051f4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0051f6   f006
0051f8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0051fa   f005
0051fc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0051fe   f004
005200   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005202   f003
005204   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005206   f002
005208   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00520a   f001
00520c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00520e   f000
005210   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005212   ffd9
005214   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPProcess	code
                                           _ARPProcess:
                                           ;	.line	204; TCPIP_Stack/ARP.c	BOOL ARPProcess(void)
002df2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002df4   ffe5
002df6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002df8   ffd9
002dfa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002dfc   ffe5
002dfe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e00   ffe5
002e02   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e04   ffe5
002e06   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e08   ffe5
002e0a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e0c   ffe5
002e0e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002e10   ffe5
002e12   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002e14   ffe5
002e16   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002e18   ffe5
002e1a   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	214; TCPIP_Stack/ARP.c	switch(smARP)
002e1c   5140     movf	0x40, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e1e   e006     bz	0x2e2c                	BZ	_00118_DS_
                                           _00144_DS_:
002e20   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002e22   5140     movf	0x40, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e24   0a01     xorlw	0x1                	XORLW	0x01
002e26   e101     bnz	0x2e2a               	BNZ	_00146_DS_
002e28   d0c4     bra	0x2fb2               	BRA	_00129_DS_
                                           _00146_DS_:
002e2a   d10f     bra	0x304a               	BRA	_00132_DS_
                                           _00118_DS_:
                                           ;	.line	218; TCPIP_Stack/ARP.c	MACGetArray((BYTE*)&packet, sizeof(packet));
002e2c   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e2e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e30   0e54     movlw	0x54               	MOVLW	LOW(_ARPProcess_packet_1_1)
002e32   6e00     movwf	0, 0               	MOVWF	r0x00
002e34   0e80     movlw	0x80               	MOVLW	0x80
002e36   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e38   0e00     movlw	0                  	MOVLW	0x00
002e3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e3c   0e1c     movlw	0x1c               	MOVLW	0x1c
002e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e48   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4c   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
002e4e   f02f
002e50   0e05     movlw	0x5                	MOVLW	0x05
002e52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; TCPIP_Stack/ARP.c	MACDiscardRx();
002e54   ecd7     call	0x69ae, 0           	CALL	_MACDiscardRx
002e56   f034
                                           ;	.line	220; TCPIP_Stack/ARP.c	SwapARPPacket(&packet);
002e58   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e5c   0e54     movlw	0x54               	MOVLW	LOW(_ARPProcess_packet_1_1)
002e5e   6e00     movwf	0, 0               	MOVWF	r0x00
002e60   0e80     movlw	0x80               	MOVLW	0x80
002e62   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e70   eccf     call	0x4f9e, 0           	CALL	_SwapARPPacket
002e72   f027
002e74   0e03     movlw	0x3                	MOVLW	0x03
002e76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002e78   010e     movlb	0xe                	BANKSEL	_ARPProcess_packet_1_1
                                           ;	.line	223; TCPIP_Stack/ARP.c	if ( packet.HardwareType != HW_ETHERNET     ||
002e7a   5154     movf	0x54, 0, 0x1        	MOVF	_ARPProcess_packet_1_1, W, B
002e7c   0a01     xorlw	0x1                	XORLW	0x01
002e7e   e103     bnz	0x2e86               	BNZ	_00147_DS_
002e80   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 1)
002e82   5155     movf	0x55, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 1), W, B
002e84   e001     bz	0x2e88                	BZ	_00148_DS_
                                           _00147_DS_:
002e86   d008     bra	0x2e98               	BRA	_00119_DS_
                                           _00148_DS_:
002e88   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 4)
                                           ;	.line	224; TCPIP_Stack/ARP.c	packet.MACAddrLen != sizeof(MAC_ADDR)  ||
002e8a   5158     movf	0x58, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 4), W, B
002e8c   0a06     xorlw	0x6                	XORLW	0x06
002e8e   e104     bnz	0x2e98               	BNZ	_00119_DS_
                                           _00150_DS_:
002e90   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 5)
                                           ;	.line	225; TCPIP_Stack/ARP.c	packet.ProtocolLen != sizeof(IP_ADDR) )
002e92   5159     movf	0x59, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 5), W, B
002e94   0a04     xorlw	0x4                	XORLW	0x04
002e96   e002     bz	0x2e9c                	BZ	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; TCPIP_Stack/ARP.c	return TRUE;
002e98   0e01     movlw	0x1                	MOVLW	0x01
002e9a   d0d8     bra	0x304c               	BRA	_00133_DS_
                                           _00120_DS_:
                                           ;	.line	232; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_RESP)
002e9c   ce5a     movff	0xe5a, 0           	MOVFF	(_ARPProcess_packet_1_1 + 6), r0x00
002e9e   f000
002ea0   ce5b     movff	0xe5b, 0x1         	MOVFF	(_ARPProcess_packet_1_1 + 7), r0x01
002ea2   f001
002ea4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ea6   0a02     xorlw	0x2                	XORLW	0x02
002ea8   e102     bnz	0x2eae               	BNZ	_00153_DS_
002eaa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002eac   e001     bz	0x2eb0                	BZ	_00154_DS_
                                           _00153_DS_:
002eae   d032     bra	0x2f14               	BRA	_00124_DS_
                                           _00154_DS_:
                                           ;	.line	238; TCPIP_Stack/ARP.c	memcpy((void*)&Cache.MACAddr, (void*)&packet.SenderMACAddr, 
002eb0   0e08     movlw	0x8                	MOVLW	HIGH(_Cache + 4)
002eb2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002eb4   0e9c     movlw	0x9c               	MOVLW	LOW(_Cache + 4)
002eb6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002eb8   0e80     movlw	0x80               	MOVLW	0x80
002eba   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ebc   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002ebe   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ec0   0e5c     movlw	0x5c               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002ec2   6e05     movwf	0x5, 0             	MOVWF	r0x05
002ec4   0e80     movlw	0x80               	MOVLW	0x80
002ec6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	239; TCPIP_Stack/ARP.c	sizeof(packet.SenderMACAddr));  
002ec8   0e00     movlw	0                  	MOVLW	0x00
002eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ecc   0e06     movlw	0x6                	MOVLW	0x06
002ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002edc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ede   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ee2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ee6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee8   ec71     call	0x5ae2, 0           	CALL	_memcpy
002eea   f02d
002eec   0e08     movlw	0x8                	MOVLW	0x08
002eee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ef0   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	243; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = packet.SenderIPAddr.Val;
002ef2   5162     movf	0x62, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002ef4   0108     movlb	0x8                	BANKSEL	_Cache
002ef6   6f98     movwf	0x98, 0x1          	MOVWF	_Cache, B
002ef8   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002efa   5163     movf	0x63, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002efc   0108     movlb	0x8                	BANKSEL	(_Cache + 1)
002efe   6f99     movwf	0x99, 0x1          	MOVWF	(_Cache + 1), B
002f00   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f02   5164     movf	0x64, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f04   0108     movlb	0x8                	BANKSEL	(_Cache + 2)
002f06   6f9a     movwf	0x9a, 0x1          	MOVWF	(_Cache + 2), B
002f08   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f0a   5165     movf	0x65, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f0c   0108     movlb	0x8                	BANKSEL	(_Cache + 3)
002f0e   6f9b     movwf	0x9b, 0x1          	MOVWF	(_Cache + 3), B
                                           ;	.line	244; TCPIP_Stack/ARP.c	return TRUE;
002f10   0e01     movlw	0x1                	MOVLW	0x01
002f12   d09c     bra	0x304c               	BRA	_00133_DS_
                                           _00124_DS_:
                                           ;	.line	249; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_REQ)
002f14   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f16   0a01     xorlw	0x1                	XORLW	0x01
002f18   e102     bnz	0x2f1e               	BNZ	_00155_DS_
002f1a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f1c   e001     bz	0x2f20                	BZ	_00156_DS_
                                           _00155_DS_:
002f1e   d049     bra	0x2fb2               	BRA	_00129_DS_
                                           _00156_DS_:
002f20   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
                                           ;	.line	251; TCPIP_Stack/ARP.c	if(packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val)
002f22   516c     movf	0x6c, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 24), W, B
002f24   010e     movlb	0xe                	BANKSEL	_AppConfig
002f26   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
002f28   e10f     bnz	0x2f48               	BNZ	_00158_DS_
002f2a   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
002f2c   516d     movf	0x6d, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 25), W, B
002f2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
002f30   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
002f32   e10a     bnz	0x2f48               	BNZ	_00158_DS_
002f34   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
002f36   516e     movf	0x6e, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 26), W, B
002f38   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002f3a   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
002f3c   e105     bnz	0x2f48               	BNZ	_00158_DS_
002f3e   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
002f40   516f     movf	0x6f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 27), W, B
002f42   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
002f44   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
002f46   e002     bz	0x2f4c                	BZ	_00126_DS_
                                           _00158_DS_:
                                           ;	.line	253; TCPIP_Stack/ARP.c	return TRUE;
002f48   0e01     movlw	0x1                	MOVLW	0x01
002f4a   d080     bra	0x304c               	BRA	_00133_DS_
                                           _00126_DS_:
002f4c   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	262; TCPIP_Stack/ARP.c	Target.IPAddr.Val = packet.SenderIPAddr.Val;
002f4e   5162     movf	0x62, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002f50   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
002f52   6fa2     movwf	0xa2, 0x1          	MOVWF	_ARPProcess_Target_1_1, B
002f54   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002f56   5163     movf	0x63, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002f58   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
002f5a   6fa3     movwf	0xa3, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 1), B
002f5c   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f5e   5164     movf	0x64, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f60   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
002f62   6fa4     movwf	0xa4, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 2), B
002f64   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f66   5165     movf	0x65, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f68   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
002f6a   6fa5     movwf	0xa5, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 3), B
                                           ;	.line	264; TCPIP_Stack/ARP.c	memcpy((void*)&Target.MACAddr, 
002f6c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002f6e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002f70   0ea6     movlw	0xa6               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002f72   6e00     movwf	0, 0               	MOVWF	r0x00
002f74   0e80     movlw	0x80               	MOVLW	0x80
002f76   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	265; TCPIP_Stack/ARP.c	(void*)&packet.SenderMACAddr, sizeof(packet.SenderMACAddr));
002f78   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002f7a   6e04     movwf	0x4, 0             	MOVWF	r0x04
002f7c   0e5c     movlw	0x5c               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002f7e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f80   0e80     movlw	0x80               	MOVLW	0x80
002f82   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f84   0e00     movlw	0                  	MOVLW	0x00
002f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f88   0e06     movlw	0x6                	MOVLW	0x06
002f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f8c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa4   ec71     call	0x5ae2, 0           	CALL	_memcpy
002fa6   f02d
002fa8   0e08     movlw	0x8                	MOVLW	0x08
002faa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; TCPIP_Stack/ARP.c	smARP = SM_ARP_REPLY;
002fac   0e01     movlw	0x1                	MOVLW	0x01
002fae   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002fb0   6f40     movwf	0x40, 0x1          	MOVWF	_ARPProcess_smARP_1_1, B
                                           _00129_DS_:
                                           ;	.line	274; TCPIP_Stack/ARP.c	packet.Operation  = ARP_OPERATION_RESP;
002fb2   0e02     movlw	0x2                	MOVLW	0x02
002fb4   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 6)
002fb6   6f5a     movwf	0x5a, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 6), B
002fb8   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 7)
002fba   6b5b     clrf	0x5b, 0x1           	CLRF	(_ARPProcess_packet_1_1 + 7), B
                                           ;	.line	276; TCPIP_Stack/ARP.c	memcpy(&packet.TargetMACAddr, (void*)&Target.MACAddr, 
002fbc   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 18)
002fbe   6e01     movwf	0x1, 0             	MOVWF	r0x01
002fc0   0e66     movlw	0x66               	MOVLW	LOW(_ARPProcess_packet_1_1 + 18)
002fc2   6e00     movwf	0, 0               	MOVWF	r0x00
002fc4   0e80     movlw	0x80               	MOVLW	0x80
002fc6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002fc8   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002fca   6e04     movwf	0x4, 0             	MOVWF	r0x04
002fcc   0ea6     movlw	0xa6               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002fce   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fd0   0e80     movlw	0x80               	MOVLW	0x80
002fd2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	277; TCPIP_Stack/ARP.c	sizeof(Target.MACAddr));
002fd4   0e00     movlw	0                  	MOVLW	0x00
002fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd8   0e06     movlw	0x6                	MOVLW	0x06
002fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fdc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   ec71     call	0x5ae2, 0           	CALL	_memcpy
002ff6   f02d
002ff8   0e08     movlw	0x8                	MOVLW	0x08
002ffa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ffc   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
                                           ;	.line	281; TCPIP_Stack/ARP.c	packet.TargetIPAddr.Val	= Target.IPAddr.Val;
002ffe   51a2     movf	0xa2, 0, 0x1        	MOVF	_ARPProcess_Target_1_1, W, B
003000   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
003002   6f6c     movwf	0x6c, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 24), B
003004   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
003006   51a3     movf	0xa3, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 1), W, B
003008   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
00300a   6f6d     movwf	0x6d, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 25), B
00300c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
00300e   51a4     movf	0xa4, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 2), W, B
003010   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
003012   6f6e     movwf	0x6e, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 26), B
003014   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
003016   51a5     movf	0xa5, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 3), W, B
003018   010e     movlb	0xe                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
00301a   6f6f     movwf	0x6f, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 27), B
                                           ;	.line	284; TCPIP_Stack/ARP.c	if(!ARPPut(&packet))
00301c   0e0e     movlw	0xe                	MOVLW	HIGH(_ARPProcess_packet_1_1)
00301e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003020   0e54     movlw	0x54               	MOVLW	LOW(_ARPProcess_packet_1_1)
003022   6e00     movwf	0, 0               	MOVWF	r0x00
003024   0e80     movlw	0x80               	MOVLW	0x80
003026   6e02     movwf	0x2, 0             	MOVWF	r0x02
003028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00302a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00302c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00302e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003030   5000     movf	0, 0, 0             	MOVF	r0x00, W
003032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003034   ec0b     call	0x4016, 0           	CALL	_ARPPut
003036   f020
003038   6e00     movwf	0, 0               	MOVWF	r0x00
00303a   0e03     movlw	0x3                	MOVLW	0x03
00303c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00303e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003040   e102     bnz	0x3046               	BNZ	_00131_DS_
                                           ;	.line	286; TCPIP_Stack/ARP.c	return FALSE;
003042   6ae8     clrf	0xe8, 0             	CLRF	WREG
003044   d003     bra	0x304c               	BRA	_00133_DS_
                                           _00131_DS_:
003046   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	290; TCPIP_Stack/ARP.c	smARP = SM_ARP_IDLE;
003048   6b40     clrf	0x40, 0x1           	CLRF	_ARPProcess_smARP_1_1, B
                                           _00132_DS_:
                                           ;	.line	294; TCPIP_Stack/ARP.c	return TRUE;
00304a   0e01     movlw	0x1                	MOVLW	0x01
                                           _00133_DS_:
00304c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00304e   f007
003050   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003052   f006
003054   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003056   f005
003058   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00305a   f004
00305c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00305e   f003
003060   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003062   f002
003064   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003066   f001
003068   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00306a   f000
00306c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00306e   ffd9
003070   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPInit	code
                                           _ARPInit:
                                           ;	.line	165; TCPIP_Stack/ARP.c	void ARPInit(void)
00770c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00770e   ffe5
007710   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007712   ffd9
007714   0108     movlb	0x8                	BANKSEL	(_Cache + 4)
                                           ;	.line	167; TCPIP_Stack/ARP.c	Cache.MACAddr.v[0] = 0xff;
007716   699c     setf	0x9c, 0x1           	SETF	(_Cache + 4), B
007718   0108     movlb	0x8                	BANKSEL	(_Cache + 5)
                                           ;	.line	168; TCPIP_Stack/ARP.c	Cache.MACAddr.v[1] = 0xff;
00771a   699d     setf	0x9d, 0x1           	SETF	(_Cache + 5), B
00771c   0108     movlb	0x8                	BANKSEL	(_Cache + 6)
                                           ;	.line	169; TCPIP_Stack/ARP.c	Cache.MACAddr.v[2] = 0xff;
00771e   699e     setf	0x9e, 0x1           	SETF	(_Cache + 6), B
007720   0108     movlb	0x8                	BANKSEL	(_Cache + 7)
                                           ;	.line	170; TCPIP_Stack/ARP.c	Cache.MACAddr.v[3] = 0xff;
007722   699f     setf	0x9f, 0x1           	SETF	(_Cache + 7), B
007724   0108     movlb	0x8                	BANKSEL	(_Cache + 8)
                                           ;	.line	171; TCPIP_Stack/ARP.c	Cache.MACAddr.v[4] = 0xff;
007726   69a0     setf	0xa0, 0x1           	SETF	(_Cache + 8), B
007728   0108     movlb	0x8                	BANKSEL	(_Cache + 9)
                                           ;	.line	172; TCPIP_Stack/ARP.c	Cache.MACAddr.v[5] = 0xff;
00772a   69a1     setf	0xa1, 0x1           	SETF	(_Cache + 9), B
00772c   0108     movlb	0x8                	BANKSEL	_Cache
                                           ;	.line	174; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = 0x0;
00772e   6b98     clrf	0x98, 0x1           	CLRF	_Cache, B
007730   0108     movlb	0x8                	BANKSEL	(_Cache + 1)
007732   6b99     clrf	0x99, 0x1           	CLRF	(_Cache + 1), B
007734   0108     movlb	0x8                	BANKSEL	(_Cache + 2)
007736   6b9a     clrf	0x9a, 0x1           	CLRF	(_Cache + 2), B
007738   0108     movlb	0x8                	BANKSEL	(_Cache + 3)
00773a   6b9b     clrf	0x9b, 0x1           	CLRF	(_Cache + 3), B
00773c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00773e   ffd9
007740   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPPut	code
                                           _ARPPut:
                                           ;	.line	111; TCPIP_Stack/ARP.c	static BOOL ARPPut(ARP_PACKET* packet)
004016   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004018   ffe5
00401a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00401c   ffd9
00401e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004020   ffe5
004022   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004024   ffe5
004026   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004028   ffe5
00402a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00402c   ffe5
00402e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004030   ffe5
004032   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004034   ffe5
004036   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004038   ffe5
00403a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00403c   ffe5
00403e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004040   ffe5
004042   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004044   ffe5
004046   0e02     movlw	0x2                	MOVLW	0x02
004048   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00404a   f000
00404c   0e03     movlw	0x3                	MOVLW	0x03
00404e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004050   f001
004052   0e04     movlw	0x4                	MOVLW	0x04
004054   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004056   f002
                                           _00105_DS_:
                                           ;	.line	113; TCPIP_Stack/ARP.c	while(!MACIsTxReady());
004058   ecc1     call	0x6f82, 0           	CALL	_MACIsTxReady
00405a   f037
00405c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00405e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004060   e0fb     bz	0x4058                	BZ	_00105_DS_
                                           ;	.line	114; TCPIP_Stack/ARP.c	MACSetWritePtr(BASE_TX_ADDR);
004062   0e1a     movlw	0x1a               	MOVLW	0x1a
004064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004066   0e0b     movlw	0xb                	MOVLW	0x0b
004068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00406a   ecc0     call	0x6d80, 0           	CALL	_MACSetWritePtr
00406c   f036
00406e   0e02     movlw	0x2                	MOVLW	0x02
004070   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; TCPIP_Stack/ARP.c	packet->HardwareType  = HW_ETHERNET;
004072   0e01     movlw	0x1                	MOVLW	0x01
004074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004076   0e00     movlw	0                  	MOVLW	0x00
004078   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00407a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00407c   ffe9
00407e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004080   fff3
004082   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004084   ecd3     call	0x79a6, 0           	CALL	__gptrput2
004086   f03c
                                           ;	.line	118; TCPIP_Stack/ARP.c	packet->Protocol      = ARP_IP;
004088   5000     movf	0, 0, 0             	MOVF	r0x00, W
00408a   0f02     addlw	0x2                	ADDLW	0x02
00408c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00408e   0e00     movlw	0                  	MOVLW	0x00
004090   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004092   6e04     movwf	0x4, 0             	MOVWF	r0x04
004094   0e00     movlw	0                  	MOVLW	0x00
004096   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004098   6e05     movwf	0x5, 0             	MOVWF	r0x05
00409a   0e00     movlw	0                  	MOVLW	0x00
00409c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00409e   0e08     movlw	0x8                	MOVLW	0x08
0040a0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0040a2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0040a4   ffe9
0040a6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0040a8   fff3
0040aa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040ac   ecd3     call	0x79a6, 0           	CALL	__gptrput2
0040ae   f03c
                                           ;	.line	119; TCPIP_Stack/ARP.c	packet->MACAddrLen    = sizeof(MAC_ADDR);
0040b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040b2   0f04     addlw	0x4                	ADDLW	0x04
0040b4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040b6   0e00     movlw	0                  	MOVLW	0x00
0040b8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0040ba   6e04     movwf	0x4, 0             	MOVWF	r0x04
0040bc   0e00     movlw	0                  	MOVLW	0x00
0040be   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0040c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040c2   0e06     movlw	0x6                	MOVLW	0x06
0040c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0040c8   ffe9
0040ca   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0040cc   fff3
0040ce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040d0   ecf3     call	0x79e6, 0           	CALL	__gptrput1
0040d2   f03c
                                           ;	.line	120; TCPIP_Stack/ARP.c	packet->ProtocolLen   = sizeof(IP_ADDR);
0040d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040d6   0f05     addlw	0x5                	ADDLW	0x05
0040d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040da   0e00     movlw	0                  	MOVLW	0x00
0040dc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0040de   6e04     movwf	0x4, 0             	MOVWF	r0x04
0040e0   0e00     movlw	0                  	MOVLW	0x00
0040e2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0040e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040e6   0e04     movlw	0x4                	MOVLW	0x04
0040e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ea   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0040ec   ffe9
0040ee   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0040f0   fff3
0040f2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040f4   ecf3     call	0x79e6, 0           	CALL	__gptrput1
0040f6   f03c
                                           ;	.line	122; TCPIP_Stack/ARP.c	memcpy(&packet->SenderMACAddr, (void*)&AppConfig.MyMACAddr, 
0040f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040fa   0f08     addlw	0x8                	ADDLW	0x08
0040fc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040fe   0e00     movlw	0                  	MOVLW	0x00
004100   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004102   6e04     movwf	0x4, 0             	MOVWF	r0x04
004104   0e00     movlw	0                  	MOVLW	0x00
004106   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004108   6e05     movwf	0x5, 0             	MOVWF	r0x05
00410a   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00410c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00410e   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
004110   6e06     movwf	0x6, 0             	MOVWF	r0x06
004112   0e80     movlw	0x80               	MOVLW	0x80
004114   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	123; TCPIP_Stack/ARP.c	sizeof(packet->SenderMACAddr));
004116   0e00     movlw	0                  	MOVLW	0x00
004118   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411a   0e06     movlw	0x6                	MOVLW	0x06
00411c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004120   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004122   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004124   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004126   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004128   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00412a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00412c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00412e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004130   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004132   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004134   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004136   ec71     call	0x5ae2, 0           	CALL	_memcpy
004138   f02d
00413a   0e08     movlw	0x8                	MOVLW	0x08
00413c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	127; TCPIP_Stack/ARP.c	packet->SenderIPAddr.Val  = AppConfig.MyIPAddr.Val;
00413e   5000     movf	0, 0, 0             	MOVF	r0x00, W
004140   0f0e     addlw	0xe                	ADDLW	0x0e
004142   6e03     movwf	0x3, 0             	MOVWF	r0x03
004144   0e00     movlw	0                  	MOVLW	0x00
004146   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004148   6e04     movwf	0x4, 0             	MOVWF	r0x04
00414a   0e00     movlw	0                  	MOVLW	0x00
00414c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00414e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004150   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
004152   f006
004154   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
004156   f007
004158   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
00415a   f008
00415c   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
00415e   f009
004160   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004162   ffe5
004164   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004166   fff4
004168   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
00416a   fff6
00416c   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
00416e   fff7
004170   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004172   ffe9
004174   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004176   fff3
004178   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00417a   ec62     call	0x78c4, 0           	CALL	__gptrput4
00417c   f03c
                                           ;	.line	129; TCPIP_Stack/ARP.c	SwapARPPacket(packet);
00417e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004182   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004186   5000     movf	0, 0, 0             	MOVF	r0x00, W
004188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00418a   eccf     call	0x4f9e, 0           	CALL	_SwapARPPacket
00418c   f027
00418e   0e03     movlw	0x3                	MOVLW	0x03
004190   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; TCPIP_Stack/ARP.c	MACPutHeader(&packet->TargetMACAddr, MAC_ARP, sizeof(*packet));
004192   5000     movf	0, 0, 0             	MOVF	r0x00, W
004194   0f12     addlw	0x12               	ADDLW	0x12
004196   6e03     movwf	0x3, 0             	MOVWF	r0x03
004198   0e00     movlw	0                  	MOVLW	0x00
00419a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00419c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00419e   0e00     movlw	0                  	MOVLW	0x00
0041a0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0041a2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0041a4   0e00     movlw	0                  	MOVLW	0x00
0041a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041a8   0e1c     movlw	0x1c               	MOVLW	0x1c
0041aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041ac   0e06     movlw	0x6                	MOVLW	0x06
0041ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0041b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041b4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0041b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041b8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0041ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041bc   ec2f     call	0x4e5e, 0           	CALL	_MACPutHeader
0041be   f027
0041c0   0e06     movlw	0x6                	MOVLW	0x06
0041c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	132; TCPIP_Stack/ARP.c	MACPutArray((BYTE*)packet, sizeof(*packet));
0041c4   0e00     movlw	0                  	MOVLW	0x00
0041c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041c8   0e1c     movlw	0x1c               	MOVLW	0x1c
0041ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0041ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0041d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0041d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041d8   ec41     call	0x6882, 0           	CALL	_MACPutArray
0041da   f034
0041dc   0e05     movlw	0x5                	MOVLW	0x05
0041de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; TCPIP_Stack/ARP.c	MACFlush();
0041e0   ec6c     call	0x70d8, 0           	CALL	_MACFlush
0041e2   f038
                                           ;	.line	135; TCPIP_Stack/ARP.c	return TRUE;
0041e4   0e01     movlw	0x1                	MOVLW	0x01
0041e6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0041e8   f009
0041ea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0041ec   f008
0041ee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0041f0   f007
0041f2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0041f4   f006
0041f6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0041f8   f005
0041fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0041fc   f004
0041fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004200   f003
004202   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004204   f002
004206   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004208   f001
00420a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00420c   f000
00420e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004210   ffd9
004212   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2192 (0x0890) bytes ( 1.67%)
                                           ;           	 1096 (0x0448) words
                                           ; udata size:	   76 (0x004c) bytes ( 1.98%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:29 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:29 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DHCPInit
                                           	global _DHCPDisable
                                           	global _DHCPEnable
                                           	global _DHCPIsEnabled
                                           	global _DHCPIsBound
                                           	global _DHCPStateChanged
                                           	global _DHCPIsServerDetected
                                           	global _DHCPTask
                                           	global _DHCPClientInitializedOnce
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _TickGet
                                           	extern _MACIsLinked
                                           	extern _UDPOpen
                                           	extern _UDPClose
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _DHCPClientInitializedOnce	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_DHCP_0	udata
                                           _DHCPClient	res	28
                                           
                                           udata_DHCP_1	udata
                                           __DHCPReceive_type_1_1	res	1
                                           
                                           udata_DHCP_2	udata
                                           __DHCPReceive_j_1_1	res	1
                                           
                                           udata_DHCP_3	udata
                                           __DHCPReceive_v_1_1	res	1
                                           
                                           udata_DHCP_4	udata
                                           __DHCPReceive_tempServerID_1_1	res	4
                                           
                                           udata_DHCP_5	udata
                                           __DHCPSend_MyIP_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPSend	code
                                           __DHCPSend:
                                           ;	.line	1039; TCPIP_Stack/DHCP.c	static void _DHCPSend(BYTE messageType, BOOL bRenewing)
00150c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00150e   ffe5
001510   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001512   ffd9
001514   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001516   ffe5
001518   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00151a   ffe5
00151c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00151e   ffe5
001520   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001522   ffe5
001524   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001526   ffe5
001528   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00152a   ffe5
00152c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00152e   ffe5
001530   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001532   ffe5
001534   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001536   ffe5
001538   0e02     movlw	0x2                	MOVLW	0x02
00153a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00153c   f000
00153e   0e03     movlw	0x3                	MOVLW	0x03
001540   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001542   f001
                                           ;	.line	1045; TCPIP_Stack/DHCP.c	UDPPut(BOOT_REQUEST);                       // op
001544   0e01     movlw	0x1                	MOVLW	0x01
001546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001548   ec8c     call	0x6918, 0           	CALL	_UDPPut
00154a   f034
00154c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1046; TCPIP_Stack/DHCP.c	UDPPut(BOOT_HW_TYPE);                       // htype
00154e   0e01     movlw	0x1                	MOVLW	0x01
001550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001552   ec8c     call	0x6918, 0           	CALL	_UDPPut
001554   f034
001556   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1047; TCPIP_Stack/DHCP.c	UDPPut(BOOT_LEN_OF_HW_TYPE);                // hlen
001558   0e06     movlw	0x6                	MOVLW	0x06
00155a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00155c   ec8c     call	0x6918, 0           	CALL	_UDPPut
00155e   f034
001560   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1048; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // hops
001562   0e00     movlw	0                  	MOVLW	0x00
001564   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001566   ec8c     call	0x6918, 0           	CALL	_UDPPut
001568   f034
00156a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1049; TCPIP_Stack/DHCP.c	UDPPut(0x12);                               // xid[0]
00156c   0e12     movlw	0x12               	MOVLW	0x12
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   ec8c     call	0x6918, 0           	CALL	_UDPPut
001572   f034
001574   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1050; TCPIP_Stack/DHCP.c	UDPPut(0x23);                               // xid[1]
001576   0e23     movlw	0x23               	MOVLW	0x23
001578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00157a   ec8c     call	0x6918, 0           	CALL	_UDPPut
00157c   f034
00157e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1051; TCPIP_Stack/DHCP.c	UDPPut(0x34);                               // xid[2]
001580   0e34     movlw	0x34               	MOVLW	0x34
001582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001584   ec8c     call	0x6918, 0           	CALL	_UDPPut
001586   f034
001588   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1052; TCPIP_Stack/DHCP.c	UDPPut(0x56);                               // xid[3]
00158a   0e56     movlw	0x56               	MOVLW	0x56
00158c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00158e   ec8c     call	0x6918, 0           	CALL	_UDPPut
001590   f034
001592   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1053; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[0]
001594   0e00     movlw	0                  	MOVLW	0x00
001596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001598   ec8c     call	0x6918, 0           	CALL	_UDPPut
00159a   f034
00159c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1054; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[1]
00159e   0e00     movlw	0                  	MOVLW	0x00
0015a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015a2   ec8c     call	0x6918, 0           	CALL	_UDPPut
0015a4   f034
0015a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0015a8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1055; TCPIP_Stack/DHCP.c	UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00: 0x80);
0015aa   a91e     btfss	0x1e, 0x4, 0x1     	BTFSS	(_DHCPClient + 2), 4, B
0015ac   d002     bra	0x15b2               	BRA	_00489_DS_
0015ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0015b0   d002     bra	0x15b6               	BRA	_00490_DS_
                                           _00489_DS_:
0015b2   0e80     movlw	0x80               	MOVLW	0x80
0015b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00490_DS_:
0015b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015ba   ec8c     call	0x6918, 0           	CALL	_UDPPut
0015bc   f034
0015be   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1057; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // flags[1]
0015c0   0e00     movlw	0                  	MOVLW	0x00
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   ec8c     call	0x6918, 0           	CALL	_UDPPut
0015c6   f034
0015c8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1060; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && bRenewing)
0015ca   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0015cc   f002
0015ce   6a03     clrf	0x3, 0              	CLRF	r0x03
0015d0   6a04     clrf	0x4, 0              	CLRF	r0x04
0015d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015d4   0a03     xorlw	0x3                	XORLW	0x03
0015d6   e103     bnz	0x15de               	BNZ	_00507_DS_
0015d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015da   e101     bnz	0x15de               	BNZ	_00507_DS_
0015dc   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           _00507_DS_:
0015de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0015e0   e017     bz	0x1610                	BZ	_00463_DS_
0015e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015e4   e015     bz	0x1610                	BZ	_00463_DS_
                                           ;	.line	1062; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
0015e6   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0015e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0015ea   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0015ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0015ee   0e80     movlw	0x80               	MOVLW	0x80
0015f0   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	1063; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0015f2   0e00     movlw	0                  	MOVLW	0x00
0015f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f6   0e04     movlw	0x4                	MOVLW	0x04
0015f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001602   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001606   ec74     call	0x5ce8, 0           	CALL	_UDPPutArray
001608   f02e
00160a   0e05     movlw	0x5                	MOVLW	0x05
00160c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00160e   d014     bra	0x1638               	BRA	_00464_DS_
                                           _00463_DS_:
                                           ;	.line	1067; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001610   0e00     movlw	0                  	MOVLW	0x00
001612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001614   ec8c     call	0x6918, 0           	CALL	_UDPPut
001616   f034
001618   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1068; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00161a   0e00     movlw	0                  	MOVLW	0x00
00161c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161e   ec8c     call	0x6918, 0           	CALL	_UDPPut
001620   f034
001622   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1069; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001624   0e00     movlw	0                  	MOVLW	0x00
001626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001628   ec8c     call	0x6918, 0           	CALL	_UDPPut
00162a   f034
00162c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1070; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00162e   0e00     movlw	0                  	MOVLW	0x00
001630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001632   ec8c     call	0x6918, 0           	CALL	_UDPPut
001634   f034
001636   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00464_DS_:
                                           ;	.line	1074; TCPIP_Stack/DHCP.c	for ( i = 0; i < 12u; i++ )	UDPPut(0x00);
001638   0e0c     movlw	0xc                	MOVLW	0x0c
00163a   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00483_DS_:
00163c   0e00     movlw	0                  	MOVLW	0x00
00163e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001640   ec8c     call	0x6918, 0           	CALL	_UDPPut
001642   f034
001644   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001646   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001648   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00164a   e1f8     bnz	0x163c               	BNZ	_00483_DS_
                                           ;	.line	1077; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
00164c   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00164e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001650   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
001652   6e06     movwf	0x6, 0             	MOVWF	r0x06
001654   0e80     movlw	0x80               	MOVLW	0x80
001656   6e08     movwf	0x8, 0             	MOVWF	r0x08
001658   0e00     movlw	0                  	MOVLW	0x00
00165a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165c   0e06     movlw	0x6                	MOVLW	0x06
00165e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001660   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001664   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001668   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00166a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166c   ec74     call	0x5ce8, 0           	CALL	_UDPPutArray
00166e   f02e
001670   0e05     movlw	0x5                	MOVLW	0x05
001672   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; TCPIP_Stack/DHCP.c	for ( i = 0; i < 202u; i++ ) UDPPut(0);
001674   0eca     movlw	0xca               	MOVLW	0xca
001676   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00486_DS_:
001678   0e00     movlw	0                  	MOVLW	0x00
00167a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00167c   ec8c     call	0x6918, 0           	CALL	_UDPPut
00167e   f034
001680   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001682   2e05     decfsz	0x5, 0x1, 0       	DECFSZ	r0x05, F
001684   d7f9     bra	0x1678               	BRA	_00486_DS_
                                           ;	.line	1083; TCPIP_Stack/DHCP.c	UDPPut(99);
001686   0e63     movlw	0x63               	MOVLW	0x63
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   ec8c     call	0x6918, 0           	CALL	_UDPPut
00168c   f034
00168e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1084; TCPIP_Stack/DHCP.c	UDPPut(130);
001690   0e82     movlw	0x82               	MOVLW	0x82
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   ec8c     call	0x6918, 0           	CALL	_UDPPut
001696   f034
001698   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1085; TCPIP_Stack/DHCP.c	UDPPut(83);
00169a   0e53     movlw	0x53               	MOVLW	0x53
00169c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169e   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016a0   f034
0016a2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1086; TCPIP_Stack/DHCP.c	UDPPut(99);
0016a4   0e63     movlw	0x63               	MOVLW	0x63
0016a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a8   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016aa   f034
0016ac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1089; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE);
0016ae   0e35     movlw	0x35               	MOVLW	0x35
0016b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b2   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016b4   f034
0016b6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1090; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
0016b8   0e01     movlw	0x1                	MOVLW	0x01
0016ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016bc   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016be   f034
0016c0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1091; TCPIP_Stack/DHCP.c	UDPPut(messageType);
0016c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016c6   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016c8   f034
0016ca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1093; TCPIP_Stack/DHCP.c	if(messageType == DHCP_DISCOVER_MESSAGE)
0016cc   6a00     clrf	0, 0                	CLRF	r0x00
0016ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016d0   0a01     xorlw	0x1                	XORLW	0x01
0016d2   e103     bnz	0x16da               	BNZ	_00511_DS_
0016d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016d6   e101     bnz	0x16da               	BNZ	_00511_DS_
0016d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00511_DS_:
0016da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016dc   e002     bz	0x16e2                	BZ	_00467_DS_
0016de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1096; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
0016e0   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           _00467_DS_:
                                           ;	.line	1100; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing)
0016e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016e4   e024     bz	0x172e                	BZ	_00469_DS_
0016e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016e8   e122     bnz	0x172e               	BNZ	_00469_DS_
                                           ;	.line	1108; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER);
0016ea   0e36     movlw	0x36               	MOVLW	0x36
0016ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ee   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016f0   f034
0016f2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1109; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER_LEN);
0016f4   0e04     movlw	0x4                	MOVLW	0x04
0016f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016f8   ec8c     call	0x6918, 0           	CALL	_UDPPut
0016fa   f034
0016fc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0016fe   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
                                           ;	.line	1110; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[3]);
001700   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
001702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001704   ec8c     call	0x6918, 0           	CALL	_UDPPut
001706   f034
001708   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00170a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
                                           ;	.line	1111; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[2]);
00170c   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
00170e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001710   ec8c     call	0x6918, 0           	CALL	_UDPPut
001712   f034
001714   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001716   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
                                           ;	.line	1112; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[1]);
001718   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
00171a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00171c   ec8c     call	0x6918, 0           	CALL	_UDPPut
00171e   f034
001720   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001722   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1113; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[0]);
001724   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
001726   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001728   ec8c     call	0x6918, 0           	CALL	_UDPPut
00172a   f034
00172c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00469_DS_:
                                           ;	.line	1119; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST);
00172e   0e37     movlw	0x37               	MOVLW	0x37
001730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001732   ec8c     call	0x6918, 0           	CALL	_UDPPut
001734   f034
001736   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1120; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST_LEN);
001738   0e04     movlw	0x4                	MOVLW	0x04
00173a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173c   ec8c     call	0x6918, 0           	CALL	_UDPPut
00173e   f034
001740   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1121; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SUBNET_MASK);
001742   0e01     movlw	0x1                	MOVLW	0x01
001744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001746   ec8c     call	0x6918, 0           	CALL	_UDPPut
001748   f034
00174a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1122; TCPIP_Stack/DHCP.c	UDPPut(DHCP_ROUTER);
00174c   0e03     movlw	0x3                	MOVLW	0x03
00174e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001750   ec8c     call	0x6918, 0           	CALL	_UDPPut
001752   f034
001754   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1123; TCPIP_Stack/DHCP.c	UDPPut(DHCP_DNS);
001756   0e06     movlw	0x6                	MOVLW	0x06
001758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00175a   ec8c     call	0x6918, 0           	CALL	_UDPPut
00175c   f034
00175e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1124; TCPIP_Stack/DHCP.c	UDPPut(DHCP_HOST_NAME);
001760   0e0c     movlw	0xc                	MOVLW	0x0c
001762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001764   ec8c     call	0x6918, 0           	CALL	_UDPPut
001766   f034
001768   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1127; TCPIP_Stack/DHCP.c	if( ((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing) || 
00176a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00176c   e002     bz	0x1772                	BZ	_00475_DS_
00176e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001770   e00b     bz	0x1788                	BZ	_00471_DS_
                                           _00475_DS_:
                                           ;	.line	1128; TCPIP_Stack/DHCP.c	((messageType == DHCP_DISCOVER_MESSAGE) && 
001772   5000     movf	0, 0, 0             	MOVF	r0x00, W
001774   e027     bz	0x17c4                	BZ	_00472_DS_
001776   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	1129; TCPIP_Stack/DHCP.c	DHCPClient.tempIPAddress.Val))
001778   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
00177a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
00177c   112c     iorwf	0x2c, 0, 0x1       	IORWF	(_DHCPClient + 16), W, B
00177e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
001780   112d     iorwf	0x2d, 0, 0x1       	IORWF	(_DHCPClient + 17), W, B
001782   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
001784   112e     iorwf	0x2e, 0, 0x1       	IORWF	(_DHCPClient + 18), W, B
001786   e01e     bz	0x17c4                	BZ	_00472_DS_
                                           _00471_DS_:
                                           ;	.line	1131; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS);
001788   0e32     movlw	0x32               	MOVLW	0x32
00178a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00178c   ec8c     call	0x6918, 0           	CALL	_UDPPut
00178e   f034
001790   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1132; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
001792   0e04     movlw	0x4                	MOVLW	0x04
001794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001796   ec8c     call	0x6918, 0           	CALL	_UDPPut
001798   f034
00179a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1133; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
00179c   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
00179e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0017a0   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0017a2   6e00     movwf	0, 0               	MOVWF	r0x00
0017a4   0e80     movlw	0x80               	MOVLW	0x80
0017a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	1134; TCPIP_Stack/DHCP.c	DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
0017a8   0e00     movlw	0                  	MOVLW	0x00
0017aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ac   0e04     movlw	0x4                	MOVLW	0x04
0017ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017bc   ec74     call	0x5ce8, 0           	CALL	_UDPPutArray
0017be   f02e
0017c0   0e05     movlw	0x5                	MOVLW	0x05
0017c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00472_DS_:
                                           ;	.line	1140; TCPIP_Stack/DHCP.c	UDPPut(DHCP_END_OPTION);
0017c4   0eff     movlw	0xff               	MOVLW	0xff
0017c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c8   ec8c     call	0x6918, 0           	CALL	_UDPPut
0017ca   f034
0017cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	1144; TCPIP_Stack/DHCP.c	while(UDPTxCount < 300u) UDPPut(0); 
0017ce   0e01     movlw	0x1                	MOVLW	0x01
0017d0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
0017d2   5d56     subwf	0x56, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0017d4   e103     bnz	0x17dc               	BNZ	_00512_DS_
0017d6   0e2c     movlw	0x2c               	MOVLW	0x2c
0017d8   010a     movlb	0xa                	BANKSEL	_UDPTxCount
0017da   5d55     subwf	0x55, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00512_DS_:
0017dc   e206     bc	0x17ea                	BC	_00478_DS_
0017de   0e00     movlw	0                  	MOVLW	0x00
0017e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e2   ec8c     call	0x6918, 0           	CALL	_UDPPut
0017e4   f034
0017e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0017e8   d7f2     bra	0x17ce               	BRA	_00476_DS_
                                           _00478_DS_:
0017ea   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	1149; TCPIP_Stack/DHCP.c	MyIP.Val = AppConfig.MyIPAddr.Val;
0017ec   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0017ee   0108     movlb	0x8                	BANKSEL	__DHCPSend_MyIP_1_1
0017f0   6fde     movwf	0xde, 0x1          	MOVWF	__DHCPSend_MyIP_1_1, B
0017f2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0017f4   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0017f6   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
0017f8   6fdf     movwf	0xdf, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 1), B
0017fa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0017fc   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0017fe   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001800   6fe0     movwf	0xe0, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 2), B
001802   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001804   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
001806   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
001808   6fe1     movwf	0xe1, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 3), B
                                           ;	.line	1150; TCPIP_Stack/DHCP.c	if(!bRenewing) AppConfig.MyIPAddr.Val = 0x00000000;
00180a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00180c   e108     bnz	0x181e               	BNZ	_00480_DS_
00180e   010e     movlb	0xe                	BANKSEL	_AppConfig
001810   6b00     clrf	0, 0x1              	CLRF	_AppConfig, B
001812   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001814   6b01     clrf	0x1, 0x1            	CLRF	(_AppConfig + 1), B
001816   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001818   6b02     clrf	0x2, 0x1            	CLRF	(_AppConfig + 2), B
00181a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00181c   6b03     clrf	0x3, 0x1            	CLRF	(_AppConfig + 3), B
                                           _00480_DS_:
                                           ;	.line	1151; TCPIP_Stack/DHCP.c	UDPFlush();
00181e   ec15     call	0x282a, 0           	CALL	_UDPFlush
001820   f014
001822   0108     movlb	0x8                	BANKSEL	__DHCPSend_MyIP_1_1
                                           ;	.line	1152; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = MyIP.Val;
001824   51de     movf	0xde, 0, 0x1        	MOVF	__DHCPSend_MyIP_1_1, W, B
001826   010e     movlb	0xe                	BANKSEL	_AppConfig
001828   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
00182a   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
00182c   51df     movf	0xdf, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 1), W, B
00182e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001830   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001832   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001834   51e0     movf	0xe0, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 2), W, B
001836   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001838   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
00183a   0108     movlb	0x8                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
00183c   51e1     movf	0xe1, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 3), W, B
00183e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001840   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
001842   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001844   f008
001846   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001848   f007
00184a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00184c   f006
00184e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001850   f005
001852   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001854   f004
001856   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001858   f003
00185a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00185c   f002
00185e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001860   f001
001862   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001864   f000
001866   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001868   ffd9
00186a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPReceive	code
                                           __DHCPReceive:
                                           ;	.line	720; TCPIP_Stack/DHCP.c	static BYTE _DHCPReceive(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	766; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
00003e   6b5b     clrf	0x5b, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           ;	.line	768; TCPIP_Stack/DHCP.c	UDPGet(&v);                             // op
000040   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000042   6e01     movwf	0x1, 0             	MOVWF	r0x01
000044   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000046   6e00     movwf	0, 0               	MOVWF	r0x00
000048   0e80     movlw	0x80               	MOVLW	0x80
00004a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00004c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00004e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000050   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000054   5000     movf	0, 0, 0             	MOVF	r0x00, W
000056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000058   ec3b     call	0x6c76, 0           	CALL	_UDPGet
00005a   f036
00005c   0e03     movlw	0x3                	MOVLW	0x03
00005e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	771; TCPIP_Stack/DHCP.c	if ( v == BOOT_REPLY )
000060   ca5d     movff	0xa5d, 0           	MOVFF	__DHCPReceive_v_1_1, r0x00
000062   f000
000064   6a01     clrf	0x1, 0              	CLRF	r0x01
000066   5000     movf	0, 0, 0             	MOVF	r0x00, W
000068   0a02     xorlw	0x2                	XORLW	0x02
00006a   e102     bnz	0x70                 	BNZ	_00424_DS_
00006c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00006e   e002     bz	0x74                  	BZ	_00425_DS_
                                           _00424_DS_:
000070   ef3a     goto	0x674               	GOTO	_00345_DS_
000072   f003
                                           _00425_DS_:
                                           ;	.line	774; TCPIP_Stack/DHCP.c	for ( i = 0; i < 15u; i++ ) UDPGet(&v);
000074   0e0f     movlw	0xf                	MOVLW	0x0f
000076   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00354_DS_:
000078   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e80     movlw	0x80               	MOVLW	0x80
000082   6e03     movwf	0x3, 0             	MOVWF	r0x03
000084   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00008a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00008e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000090   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000092   f036
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000098   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   e1ed     bnz	0x78                 	BNZ	_00354_DS_
00009e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	777; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0000a0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0000a2   d016     bra	0xd0                 	BRA	_00294_DS_
                                           ;	.line	780; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0000a4   0e04     movlw	0x4                	MOVLW	0x04
0000a6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00357_DS_:
0000a8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0000aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ac   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0000ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000b0   0e80     movlw	0x80               	MOVLW	0x80
0000b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c0   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0000c2   f036
0000c4   0e03     movlw	0x3                	MOVLW	0x03
0000c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0000ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000cc   e1ed     bnz	0xa8                 	BNZ	_00357_DS_
0000ce   d016     bra	0xfc                 	BRA	_00295_DS_
                                           _00294_DS_:
                                           ;	.line	785; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempIPAddress, 
0000d0   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0000d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d4   0e2b     movlw	0x2b               	MOVLW	LOW(_DHCPClient + 15)
0000d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d8   0e80     movlw	0x80               	MOVLW	0x80
0000da   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	786; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0000dc   0e00     movlw	0                  	MOVLW	0x00
0000de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e0   0e04     movlw	0x4                	MOVLW	0x04
0000e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   ec5f     call	0x5ebe, 0           	CALL	_UDPGetArray
0000f2   f02f
0000f4   0e05     movlw	0x5                	MOVLW	0x05
0000f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000f8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	787; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.IPAddress = 1;
0000fa   8137     bsf	0x37, 0, 0x1         	BSF	(_DHCPClient + 27), 0, B
                                           _00295_DS_:
                                           ;	.line	791; TCPIP_Stack/DHCP.c	for ( i = 0; i < 8u; i++ ) UDPGet(&v);
0000fc   0e08     movlw	0x8                	MOVLW	0x08
0000fe   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00360_DS_:
000100   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000106   6e01     movwf	0x1, 0             	MOVWF	r0x01
000108   0e80     movlw	0x80               	MOVLW	0x80
00010a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00010c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000118   ec3b     call	0x6c76, 0           	CALL	_UDPGet
00011a   f036
00011c   0e03     movlw	0x3                	MOVLW	0x03
00011e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000120   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000122   5000     movf	0, 0, 0             	MOVF	r0x00, W
000124   e1ed     bnz	0x100                	BNZ	_00360_DS_
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
000126   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00361_DS_:
000128   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00012a   f002
00012c   6a03     clrf	0x3, 0              	CLRF	r0x03
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000132   e102     bnz	0x138                	BNZ	_00426_DS_
000134   0e06     movlw	0x6                	MOVLW	0x06
000136   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
000138   e224     bc	0x182                 	BC	_00364_DS_
                                           ;	.line	796; TCPIP_Stack/DHCP.c	UDPGet(&v);
00013a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00013c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00013e   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000140   6e02     movwf	0x2, 0             	MOVWF	r0x02
000142   0e80     movlw	0x80               	MOVLW	0x80
000144   6e04     movwf	0x4, 0             	MOVWF	r0x04
000146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00014c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000152   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000154   f036
000156   0e03     movlw	0x3                	MOVLW	0x03
000158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	797; TCPIP_Stack/DHCP.c	if ( v != AppConfig.MyMACAddr.v[i])	goto UDPInvalid;
00015a   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
00015c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00015e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000160   6a03     clrf	0x3, 0              	CLRF	r0x03
000162   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
000164   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000166   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000168   ffe9
00016a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00016c   ffea
00016e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000170   f002
000172   010a     movlb	0xa                	BANKSEL	__DHCPReceive_v_1_1
000174   515d     movf	0x5d, 0, 0x1        	MOVF	__DHCPReceive_v_1_1, W, B
000176   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
000178   e002     bz	0x17e                 	BZ	_00428_DS_
00017a   ef71     goto	0x6e2               	GOTO	_00351_DS_
00017c   f003
                                           _00428_DS_:
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
00017e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000180   d7d3     bra	0x128                	BRA	_00361_DS_
                                           _00364_DS_:
                                           ;	.line	802; TCPIP_Stack/DHCP.c	for ( i = 0; i < 206u; i++ ) UDPGet(&v);
000182   0ece     movlw	0xce               	MOVLW	0xce
000184   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00367_DS_:
000186   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00018e   0e80     movlw	0x80               	MOVLW	0x80
000190   6e03     movwf	0x3, 0             	MOVWF	r0x03
000192   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0001a0   f036
0001a2   0e03     movlw	0x3                	MOVLW	0x03
0001a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001a6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0001a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001aa   e1ed     bnz	0x186                	BNZ	_00367_DS_
                                           ;	.line	804; TCPIP_Stack/DHCP.c	lbDone = FALSE;
0001ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
                                           ;	.line	810; TCPIP_Stack/DHCP.c	if(!UDPGet(&v))
0001ae   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0001b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001b2   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0001b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001b6   0e80     movlw	0x80               	MOVLW	0x80
0001b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c6   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0001c8   f036
0001ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001cc   0e03     movlw	0x3                	MOVLW	0x03
0001ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0001d4   ef3a     goto	0x674               	GOTO	_00345_DS_
0001d6   f003
                                           ;	.line	816; TCPIP_Stack/DHCP.c	switch(v)
0001d8   ca5d     movff	0xa5d, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0001da   f002
0001dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0001de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e0   0a01     xorlw	0x1                	XORLW	0x01
0001e2   e103     bnz	0x1ea                	BNZ	_00430_DS_
0001e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001e6   e101     bnz	0x1ea                	BNZ	_00430_DS_
0001e8   d058     bra	0x29a                	BRA	_00307_DS_
                                           _00430_DS_:
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   0a03     xorlw	0x3                	XORLW	0x03
0001ee   e103     bnz	0x1f6                	BNZ	_00432_DS_
0001f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001f2   e101     bnz	0x1f6                	BNZ	_00432_DS_
0001f4   d09c     bra	0x32e                	BRA	_00314_DS_
                                           _00432_DS_:
0001f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001f8   0a33     xorlw	0x33               	XORLW	0x33
0001fa   e103     bnz	0x202                	BNZ	_00434_DS_
0001fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001fe   e101     bnz	0x202                	BNZ	_00434_DS_
000200   d15a     bra	0x4b6                	BRA	_00329_DS_
                                           _00434_DS_:
000202   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000204   0a35     xorlw	0x35               	XORLW	0x35
000206   e102     bnz	0x20c                	BNZ	_00436_DS_
000208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020a   e00e     bz	0x228                 	BZ	_00300_DS_
                                           _00436_DS_:
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00020e   0a36     xorlw	0x36               	XORLW	0x36
000210   e103     bnz	0x218                	BNZ	_00438_DS_
000212   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000214   e101     bnz	0x218                	BNZ	_00438_DS_
000216   d0f2     bra	0x3fc                	BRA	_00324_DS_
                                           _00438_DS_:
000218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00021a   0aff     xorlw	0xff               	XORLW	0xff
00021c   e103     bnz	0x224                	BNZ	_00440_DS_
00021e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000220   e101     bnz	0x224                	BNZ	_00440_DS_
000222   d146     bra	0x4b0                	BRA	_00328_DS_
                                           _00440_DS_:
000224   ef07     goto	0x60e               	GOTO	_00336_DS_
000226   f003
                                           _00300_DS_:
                                           ;	.line	819; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
000228   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00022a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00022c   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
00022e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000230   0e80     movlw	0x80               	MOVLW	0x80
000232   6e04     movwf	0x4, 0             	MOVWF	r0x04
000234   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000238   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00023a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000240   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000242   f036
000244   0e03     movlw	0x3                	MOVLW	0x03
000246   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	821; TCPIP_Stack/DHCP.c	if ( v == 1u )
000248   ca5d     movff	0xa5d, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
00024a   f002
00024c   6a03     clrf	0x3, 0              	CLRF	r0x03
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   0a01     xorlw	0x1                	XORLW	0x01
000252   e102     bnz	0x258                	BNZ	_00441_DS_
000254   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000256   e002     bz	0x25c                 	BZ	_00442_DS_
                                           _00441_DS_:
000258   ef71     goto	0x6e2               	GOTO	_00351_DS_
00025a   f003
                                           _00442_DS_:
                                           ;	.line	823; TCPIP_Stack/DHCP.c	UDPGet(&type);                  // Get type
00025c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_type_1_1)
00025e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000260   0e5b     movlw	0x5b               	MOVLW	LOW(__DHCPReceive_type_1_1)
000262   6e02     movwf	0x2, 0             	MOVWF	r0x02
000264   0e80     movlw	0x80               	MOVLW	0x80
000266   6e04     movwf	0x4, 0             	MOVWF	r0x04
000268   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00026e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000274   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000276   f036
000278   0e03     movlw	0x3                	MOVLW	0x03
00027a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00027c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	827; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived && 
00027e   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000280   ef36     goto	0x66c               	GOTO	_00342_DS_
000282   f003
                                           ;	.line	828; TCPIP_Stack/DHCP.c	(type == DHCP_OFFER_MESSAGE))
000284   ca5b     movff	0xa5b, 0x2         	MOVFF	__DHCPReceive_type_1_1, r0x02
000286   f002
000288   6a03     clrf	0x3, 0              	CLRF	r0x03
00028a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00028c   0a02     xorlw	0x2                	XORLW	0x02
00028e   e104     bnz	0x298                	BNZ	_00444_DS_
000290   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000292   e102     bnz	0x298                	BNZ	_00444_DS_
000294   ef71     goto	0x6e2               	GOTO	_00351_DS_
000296   f003
                                           _00444_DS_:
                                           ;	.line	835; TCPIP_Stack/DHCP.c	break;
000298   d1e9     bra	0x66c                	BRA	_00342_DS_
                                           _00307_DS_:
                                           ;	.line	838; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
00029a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00029c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00029e   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e80     movlw	0x80               	MOVLW	0x80
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0002b4   f036
0002b6   0e03     movlw	0x3                	MOVLW	0x03
0002b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	840; TCPIP_Stack/DHCP.c	if ( v == 4u )
0002ba   ca5d     movff	0xa5d, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0002bc   f002
0002be   6a03     clrf	0x3, 0              	CLRF	r0x03
0002c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c2   0a04     xorlw	0x4                	XORLW	0x04
0002c4   e102     bnz	0x2ca                	BNZ	_00445_DS_
0002c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c8   e002     bz	0x2ce                 	BZ	_00446_DS_
                                           _00445_DS_:
0002ca   ef71     goto	0x6e2               	GOTO	_00351_DS_
0002cc   f003
                                           _00446_DS_:
0002ce   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	843; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0002d0   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0002d2   d016     bra	0x300                	BRA	_00309_DS_
                                           ;	.line	847; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0002d4   0e04     movlw	0x4                	MOVLW	0x04
0002d6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00370_DS_:
0002d8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0002da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002dc   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002e0   0e80     movlw	0x80               	MOVLW	0x80
0002e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f0   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0002f2   f036
0002f4   0e03     movlw	0x3                	MOVLW	0x03
0002f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002f8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002fc   e1ed     bnz	0x2d8                	BNZ	_00370_DS_
0002fe   d1b6     bra	0x66c                	BRA	_00342_DS_
                                           _00309_DS_:
                                           ;	.line	851; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempMask, 
000300   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 23)
000302   6e03     movwf	0x3, 0             	MOVWF	r0x03
000304   0e33     movlw	0x33               	MOVLW	LOW(_DHCPClient + 23)
000306   6e02     movwf	0x2, 0             	MOVWF	r0x02
000308   0e80     movlw	0x80               	MOVLW	0x80
00030a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	852; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempMask));
00030c   0e00     movlw	0                  	MOVLW	0x00
00030e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000310   0e04     movlw	0x4                	MOVLW	0x04
000312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000314   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000318   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00031a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00031e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000320   ec5f     call	0x5ebe, 0           	CALL	_UDPGetArray
000322   f02f
000324   0e05     movlw	0x5                	MOVLW	0x05
000326   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000328   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	853; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Mask = 1;
00032a   8537     bsf	0x37, 0x2, 0x1       	BSF	(_DHCPClient + 27), 2, B
00032c   d19f     bra	0x66c                	BRA	_00342_DS_
                                           _00314_DS_:
                                           ;	.line	861; TCPIP_Stack/DHCP.c	UDPGet(&j);
00032e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000330   6e03     movwf	0x3, 0             	MOVWF	r0x03
000332   0e5c     movlw	0x5c               	MOVLW	LOW(__DHCPReceive_j_1_1)
000334   6e02     movwf	0x2, 0             	MOVWF	r0x02
000336   0e80     movlw	0x80               	MOVLW	0x80
000338   6e04     movwf	0x4, 0             	MOVWF	r0x04
00033a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00033c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00033e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000346   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000348   f036
00034a   0e03     movlw	0x3                	MOVLW	0x03
00034c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	863; TCPIP_Stack/DHCP.c	if ( j >= 4u )
00034e   ca5c     movff	0xa5c, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
000350   f002
000352   6a03     clrf	0x3, 0              	CLRF	r0x03
000354   0e00     movlw	0                  	MOVLW	0x00
000356   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000358   e102     bnz	0x35e                	BNZ	_00447_DS_
00035a   0e04     movlw	0x4                	MOVLW	0x04
00035c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00447_DS_:
00035e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000360   d1c0     bra	0x6e2                	BRA	_00351_DS_
000362   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	866; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
000364   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000366   d016     bra	0x394                	BRA	_00316_DS_
                                           ;	.line	870; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
000368   0e04     movlw	0x4                	MOVLW	0x04
00036a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00373_DS_:
00036c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00036e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000370   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000372   6e02     movwf	0x2, 0             	MOVWF	r0x02
000374   0e80     movlw	0x80               	MOVLW	0x80
000376   6e04     movwf	0x4, 0             	MOVWF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000386   f036
000388   0e03     movlw	0x3                	MOVLW	0x03
00038a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00038c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e1ed     bnz	0x36c                	BNZ	_00373_DS_
000392   d016     bra	0x3c0                	BRA	_00320_DS_
                                           _00316_DS_:
                                           ;	.line	874; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempGateway, 
000394   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 19)
000396   6e03     movwf	0x3, 0             	MOVWF	r0x03
000398   0e2f     movlw	0x2f               	MOVLW	LOW(_DHCPClient + 19)
00039a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00039c   0e80     movlw	0x80               	MOVLW	0x80
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	875; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempGateway));
0003a0   0e00     movlw	0                  	MOVLW	0x00
0003a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a4   0e04     movlw	0x4                	MOVLW	0x04
0003a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b4   ec5f     call	0x5ebe, 0           	CALL	_UDPGetArray
0003b6   f02f
0003b8   0e05     movlw	0x5                	MOVLW	0x05
0003ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	876; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Gateway = 1;
0003be   8337     bsf	0x37, 0x1, 0x1       	BSF	(_DHCPClient + 27), 1, B
                                           _00320_DS_:
                                           ;	.line	882; TCPIP_Stack/DHCP.c	j -= 4;
0003c0   0efc     movlw	0xfc               	MOVLW	0xfc
0003c2   010a     movlb	0xa                	BANKSEL	__DHCPReceive_j_1_1
0003c4   275c     addwf	0x5c, 0x1, 0x1     	ADDWF	__DHCPReceive_j_1_1, F, B
                                           ;	.line	883; TCPIP_Stack/DHCP.c	while(j--) UDPGet(&v);
0003c6   ca5c     movff	0xa5c, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
0003c8   f002
                                           _00321_DS_:
0003ca   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0003cc   f003
0003ce   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
0003d0   c002     movff	0x2, 0xa5c         	MOVFF	r0x02, __DHCPReceive_j_1_1
0003d2   fa5c
0003d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003d8   d144     bra	0x662                	BRA	_00422_DS_
0003da   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003de   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0003e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e2   0e80     movlw	0x80               	MOVLW	0x80
0003e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003f2   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0003f4   f036
0003f6   0e03     movlw	0x3                	MOVLW	0x03
0003f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003fa   d7e7     bra	0x3ca                	BRA	_00321_DS_
                                           _00324_DS_:
                                           ;	.line	945; TCPIP_Stack/DHCP.c	UDPGet(&v);    // Get len
0003fc   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000400   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000402   6e03     movwf	0x3, 0             	MOVWF	r0x03
000404   0e80     movlw	0x80               	MOVLW	0x80
000406   6e05     movwf	0x5, 0             	MOVWF	r0x05
000408   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00040a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000410   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000414   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000416   f036
000418   0e03     movlw	0x3                	MOVLW	0x03
00041a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	947; TCPIP_Stack/DHCP.c	if ( v == 4u )
00041c   ca5d     movff	0xa5d, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
00041e   f003
000420   6a04     clrf	0x4, 0              	CLRF	r0x04
000422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000424   0a04     xorlw	0x4                	XORLW	0x04
000426   e102     bnz	0x42c                	BNZ	_00448_DS_
000428   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00042a   e001     bz	0x42e                 	BZ	_00449_DS_
                                           _00448_DS_:
00042c   d15a     bra	0x6e2                	BRA	_00351_DS_
                                           _00449_DS_:
                                           ;	.line	949; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[3]);   // Get the id
00042e   0e08     movlw	0x8                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 3)
000430   6e04     movwf	0x4, 0             	MOVWF	r0x04
000432   0edd     movlw	0xdd               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 3)
000434   6e03     movwf	0x3, 0             	MOVWF	r0x03
000436   0e80     movlw	0x80               	MOVLW	0x80
000438   6e05     movwf	0x5, 0             	MOVWF	r0x05
00043a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000448   f036
00044a   0e03     movlw	0x3                	MOVLW	0x03
00044c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	950; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[2]);
00044e   0e08     movlw	0x8                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 2)
000450   6e04     movwf	0x4, 0             	MOVWF	r0x04
000452   0edc     movlw	0xdc               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 2)
000454   6e03     movwf	0x3, 0             	MOVWF	r0x03
000456   0e80     movlw	0x80               	MOVLW	0x80
000458   6e05     movwf	0x5, 0             	MOVWF	r0x05
00045a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000462   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000468   f036
00046a   0e03     movlw	0x3                	MOVLW	0x03
00046c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	951; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[1]);
00046e   0e08     movlw	0x8                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 1)
000470   6e04     movwf	0x4, 0             	MOVWF	r0x04
000472   0edb     movlw	0xdb               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 1)
000474   6e03     movwf	0x3, 0             	MOVWF	r0x03
000476   0e80     movlw	0x80               	MOVLW	0x80
000478   6e05     movwf	0x5, 0             	MOVWF	r0x05
00047a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000488   f036
00048a   0e03     movlw	0x3                	MOVLW	0x03
00048c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	952; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[0]);
00048e   0e08     movlw	0x8                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1)
000490   6e04     movwf	0x4, 0             	MOVWF	r0x04
000492   0eda     movlw	0xda               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1)
000494   6e03     movwf	0x3, 0             	MOVWF	r0x03
000496   0e80     movlw	0x80               	MOVLW	0x80
000498   6e05     movwf	0x5, 0             	MOVWF	r0x05
00049a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a6   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0004a8   f036
0004aa   0e03     movlw	0x3                	MOVLW	0x03
0004ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0004ae   d0de     bra	0x66c                	BRA	_00342_DS_
                                           _00328_DS_:
                                           ;	.line	958; TCPIP_Stack/DHCP.c	lbDone = TRUE;
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	959; TCPIP_Stack/DHCP.c	break;
0004b4   d0db     bra	0x66c                	BRA	_00342_DS_
                                           _00329_DS_:
                                           ;	.line	962; TCPIP_Stack/DHCP.c	UDPGet(&v);            // Get len
0004b6   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004ba   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004be   0e80     movlw	0x80               	MOVLW	0x80
0004c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   ec3b     call	0x6c76, 0           	CALL	_UDPGet
0004d0   f036
0004d2   0e03     movlw	0x3                	MOVLW	0x03
0004d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/DHCP.c	if ( v == 4u )
0004d6   ca5d     movff	0xa5d, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
0004d8   f003
0004da   6a04     clrf	0x4, 0              	CLRF	r0x04
0004dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004de   0a04     xorlw	0x4                	XORLW	0x04
0004e0   e102     bnz	0x4e6                	BNZ	_00450_DS_
0004e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004e4   e001     bz	0x4e8                 	BZ	_00451_DS_
                                           _00450_DS_:
0004e6   d0fd     bra	0x6e2                	BRA	_00351_DS_
                                           _00451_DS_:
0004e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	967; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0004ea   a51e     btfss	0x1e, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0004ec   d015     bra	0x518                	BRA	_00331_DS_
                                           ;	.line	970; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0004ee   0e04     movlw	0x4                	MOVLW	0x04
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00376_DS_:
0004f2   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004f6   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004fa   0e80     movlw	0x80               	MOVLW	0x80
0004fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   ec3b     call	0x6c76, 0           	CALL	_UDPGet
00050c   f036
00050e   0e03     movlw	0x3                	MOVLW	0x03
000510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000512   2e00     decfsz	0, 0x1, 0         	DECFSZ	r0x00, F
000514   d7ee     bra	0x4f2                	BRA	_00376_DS_
000516   d0aa     bra	0x66c                	BRA	_00342_DS_
                                           _00331_DS_:
                                           ;	.line	974; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[3]));
000518   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 10)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e26     movlw	0x26               	MOVLW	LOW(_DHCPClient + 10)
00051e   6e00     movwf	0, 0               	MOVWF	r0x00
000520   0e80     movlw	0x80               	MOVLW	0x80
000522   6e04     movwf	0x4, 0             	MOVWF	r0x04
000524   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000532   f036
000534   0e03     movlw	0x3                	MOVLW	0x03
000536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	975; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[2]));
000538   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 9)
00053a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00053c   0e25     movlw	0x25               	MOVLW	LOW(_DHCPClient + 9)
00053e   6e00     movwf	0, 0               	MOVWF	r0x00
000540   0e80     movlw	0x80               	MOVLW	0x80
000542   6e04     movwf	0x4, 0             	MOVWF	r0x04
000544   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000552   f036
000554   0e03     movlw	0x3                	MOVLW	0x03
000556   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	976; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[1]));
000558   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 8)
00055a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00055c   0e24     movlw	0x24               	MOVLW	LOW(_DHCPClient + 8)
00055e   6e00     movwf	0, 0               	MOVWF	r0x00
000560   0e80     movlw	0x80               	MOVLW	0x80
000562   6e04     movwf	0x4, 0             	MOVWF	r0x04
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000572   f036
000574   0e03     movlw	0x3                	MOVLW	0x03
000576   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	977; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[0]));
000578   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 7)
00057a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00057c   0e23     movlw	0x23               	MOVLW	LOW(_DHCPClient + 7)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e04     movwf	0x4, 0             	MOVWF	r0x04
000584   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000592   f036
000594   0e03     movlw	0x3                	MOVLW	0x03
000596   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000598   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
                                           ;	.line	981; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime>>5;
00059a   3923     swapf	0x23, 0, 0x1       	SWAPF	(_DHCPClient + 7), W, B
00059c   0b0f     andlw	0xf                	ANDLW	0x0f
00059e   6e00     movwf	0, 0               	MOVWF	r0x00
0005a0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005a2   3924     swapf	0x24, 0, 0x1       	SWAPF	(_DHCPClient + 8), W, B
0005a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005a6   0bf0     andlw	0xf0               	ANDLW	0xf0
0005a8   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
0005aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ac   3203     rrcf	0x3, 0x1, 0         	RRCF	r0x03, F
0005ae   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
0005b0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005b2   5125     movf	0x25, 0, 0x1        	MOVF	(_DHCPClient + 9), W, B
0005b4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005b6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0005b8   0bf8     andlw	0xf8               	ANDLW	0xf8
0005ba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0005bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005be   3925     swapf	0x25, 0, 0x1       	SWAPF	(_DHCPClient + 9), W, B
0005c0   0b0f     andlw	0xf                	ANDLW	0x0f
0005c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005c4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005c6   3926     swapf	0x26, 0, 0x1       	SWAPF	(_DHCPClient + 10), W, B
0005c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005ca   0bf0     andlw	0xf0               	ANDLW	0xf0
0005cc   1a05     xorwf	0x5, 0x1, 0        	XORWF	r0x05, F
0005ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005d0   3205     rrcf	0x5, 0x1, 0         	RRCF	r0x05, F
0005d2   3204     rrcf	0x4, 0x1, 0         	RRCF	r0x04, F
0005d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005d8   5d23     subwf	0x23, 0, 0x1       	SUBWF	(_DHCPClient + 7), W, B
0005da   6e00     movwf	0, 0               	MOVWF	r0x00
0005dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005e0   5924     subwfb	0x24, 0, 0x1      	SUBWFB	(_DHCPClient + 8), W, B
0005e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005e8   5925     subwfb	0x25, 0, 0x1      	SUBWFB	(_DHCPClient + 9), W, B
0005ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005f0   5926     subwfb	0x26, 0, 0x1      	SUBWFB	(_DHCPClient + 10), W, B
0005f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005f8   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
0005fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005fc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005fe   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000602   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000604   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000606   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000608   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00060a   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
00060c   d02f     bra	0x66c                	BRA	_00342_DS_
                                           _00336_DS_:
                                           ;	.line	989; TCPIP_Stack/DHCP.c	UDPGet(&j);       // Get option len
00060e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000610   6e03     movwf	0x3, 0             	MOVWF	r0x03
000612   0e5c     movlw	0x5c               	MOVLW	LOW(__DHCPReceive_j_1_1)
000614   6e00     movwf	0, 0               	MOVWF	r0x00
000616   0e80     movlw	0x80               	MOVLW	0x80
000618   6e04     movwf	0x4, 0             	MOVWF	r0x04
00061a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5000     movf	0, 0, 0             	MOVF	r0x00, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   ec3b     call	0x6c76, 0           	CALL	_UDPGet
000628   f036
00062a   0e03     movlw	0x3                	MOVLW	0x03
00062c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	990; TCPIP_Stack/DHCP.c	while( j-- )      // Ignore option values
00062e   ca5c     movff	0xa5c, 0           	MOVFF	__DHCPReceive_j_1_1, r0x00
000630   f000
                                           _00337_DS_:
000632   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000634   f003
000636   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000638   c000     movff	0, 0xa5c           	MOVFF	r0x00, __DHCPReceive_j_1_1
00063a   fa5c
00063c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063e   e014     bz	0x668                 	BZ	_00423_DS_
                                           ;	.line	991; TCPIP_Stack/DHCP.c	UDPGet(&v);
000640   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000642   6e04     movwf	0x4, 0             	MOVWF	r0x04
000644   0e5d     movlw	0x5d               	MOVLW	LOW(__DHCPReceive_v_1_1)
000646   6e03     movwf	0x3, 0             	MOVWF	r0x03
000648   0e80     movlw	0x80               	MOVLW	0x80
00064a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00064c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00064e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000650   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   ec3b     call	0x6c76, 0           	CALL	_UDPGet
00065a   f036
00065c   0e03     movlw	0x3                	MOVLW	0x03
00065e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000660   d7e8     bra	0x632                	BRA	_00337_DS_
                                           _00422_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000662   c002     movff	0x2, 0xa5c         	MOVFF	r0x02, __DHCPReceive_j_1_1
000664   fa5c
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
000666   d002     bra	0x66c                	BRA	_00342_DS_
                                           _00423_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000668   c000     movff	0, 0xa5c           	MOVFF	r0x00, __DHCPReceive_j_1_1
00066a   fa5c
                                           _00342_DS_:
                                           ;	.line	993; TCPIP_Stack/DHCP.c	} while( !lbDone );
00066c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00066e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000670   efd7     goto	0x1ae               	GOTO	_00341_DS_
000672   f000
                                           _00345_DS_:
                                           ;	.line	997; TCPIP_Stack/DHCP.c	if ( type == DHCP_OFFER_MESSAGE )
000674   ca5b     movff	0xa5b, 0           	MOVFF	__DHCPReceive_type_1_1, r0x00
000676   f000
000678   6a01     clrf	0x1, 0              	CLRF	r0x01
00067a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00067c   0a02     xorlw	0x2                	XORLW	0x02
00067e   e116     bnz	0x6ac                	BNZ	_00349_DS_
000680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000682   e001     bz	0x686                 	BZ	_00455_DS_
                                           _00454_DS_:
000684   d013     bra	0x6ac                	BRA	_00349_DS_
                                           _00455_DS_:
000686   0108     movlb	0x8                	BANKSEL	__DHCPReceive_tempServerID_1_1
                                           ;	.line	999; TCPIP_Stack/DHCP.c	DHCPClient.dwServerID = tempServerID.Val;
000688   51da     movf	0xda, 0, 0x1        	MOVF	__DHCPReceive_tempServerID_1_1, W, B
00068a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
00068c   6f27     movwf	0x27, 0x1          	MOVWF	(_DHCPClient + 11), B
00068e   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
000690   51db     movf	0xdb, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
000692   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
000694   6f28     movwf	0x28, 0x1          	MOVWF	(_DHCPClient + 12), B
000696   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
000698   51dc     movf	0xdc, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
00069a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
00069c   6f29     movwf	0x29, 0x1          	MOVWF	(_DHCPClient + 13), B
00069e   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006a0   51dd     movf	0xdd, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006a2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006a4   6f2a     movwf	0x2a, 0x1          	MOVWF	(_DHCPClient + 14), B
0006a6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1000; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = TRUE;
0006a8   851e     bsf	0x1e, 0x2, 0x1       	BSF	(_DHCPClient + 2), 2, B
0006aa   d016     bra	0x6d8                	BRA	_00350_DS_
                                           _00349_DS_:
0006ac   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1006; TCPIP_Stack/DHCP.c	if ( DHCPClient.dwServerID != tempServerID.Val )
0006ae   5127     movf	0x27, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
0006b0   0108     movlb	0x8                	BANKSEL	__DHCPReceive_tempServerID_1_1
0006b2   19da     xorwf	0xda, 0, 0x1       	XORWF	__DHCPReceive_tempServerID_1_1, W, B
0006b4   e10f     bnz	0x6d4                	BNZ	_00457_DS_
0006b6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
0006b8   5128     movf	0x28, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
0006ba   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
0006bc   19db     xorwf	0xdb, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
0006be   e10a     bnz	0x6d4                	BNZ	_00457_DS_
0006c0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
0006c2   5129     movf	0x29, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
0006c4   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
0006c6   19dc     xorwf	0xdc, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
0006c8   e105     bnz	0x6d4                	BNZ	_00457_DS_
0006ca   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006cc   512a     movf	0x2a, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
0006ce   0108     movlb	0x8                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006d0   19dd     xorwf	0xdd, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006d2   e002     bz	0x6d8                 	BZ	_00350_DS_
                                           _00457_DS_:
0006d4   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1007; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
0006d6   6b5b     clrf	0x5b, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           _00350_DS_:
                                           ;	.line	1010; TCPIP_Stack/DHCP.c	UDPDiscard();  // We are done with this packet
0006d8   ecf8     call	0x77f0, 0           	CALL	_UDPDiscard
0006da   f03b
0006dc   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1011; TCPIP_Stack/DHCP.c	return type;
0006de   515b     movf	0x5b, 0, 0x1        	MOVF	__DHCPReceive_type_1_1, W, B
0006e0   d003     bra	0x6e8                	BRA	_00377_DS_
                                           _00351_DS_:
                                           ;	.line	1014; TCPIP_Stack/DHCP.c	UDPDiscard();
0006e2   ecf8     call	0x77f0, 0           	CALL	_UDPDiscard
0006e4   f03b
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
0006e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00377_DS_:
0006e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ea   f005
0006ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ee   f004
0006f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006f2   f003
0006f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006f6   f002
0006f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006fa   f001
0006fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006fe   f000
000700   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000702   ffd9
000704   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPTask	code
                                           _DHCPTask:
                                           ;	.line	485; TCPIP_Stack/DHCP.c	void DHCPTask(void)
000706   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000708   ffe5
00070a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00070c   ffd9
00070e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000710   ffe5
000712   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000714   ffe5
000716   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000718   ffe5
00071a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00071c   ffe5
00071e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000720   ffe5
000722   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000724   ffe5
000726   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000728   ffe5
00072a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00072c   ffe5
00072e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000730   ffe5
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000732   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00227_DS_:
000734   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000736   f001
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e00     movlw	0                  	MOVLW	0x00
00073c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00073e   e102     bnz	0x744                	BNZ	_00259_DS_
000740   0e01     movlw	0x1                	MOVLW	0x01
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
000744   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000746   efe3     goto	0xdc6               	GOTO	_00231_DS_
000748   f006
                                           ;	.line	491; TCPIP_Stack/DHCP.c	LoadState(i);
00074a   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	492; TCPIP_Stack/DHCP.c	switch(DHCPClient.smState)
00074c   c81d     movff	0x81d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
00074e   f001
000750   0e0d     movlw	0xd                	MOVLW	0x0d
000752   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000754   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000756   efe0     goto	0xdc0               	GOTO	_00229_DS_
000758   f006
00075a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00075c   ffe5
00075e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000760   ffe5
000762   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000764   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000766   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
000768   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00076a   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
00076c   0bfc     andlw	0xfc               	ANDLW	0xfc
00076e   6e09     movwf	0x9, 0             	MOVWF	r0x09
000770   0e00     movlw	0                  	MOVLW	UPPER(_00261_DS_)
000772   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000774   0e07     movlw	0x7                	MOVLW	HIGH(_00261_DS_)
000776   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000778   0e90     movlw	0x90               	MOVLW	LOW(_00261_DS_)
00077a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00077c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00077e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000780   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000782   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000784   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000788   f00a
00078a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00078c   f009
00078e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00261_DS_:
000790   efe2     goto	0x7c4               	GOTO	_00169_DS_
000792   f003
000794   efe4     goto	0x7c8               	GOTO	_00170_DS_
000796   f003
000798   ef07     goto	0x80e               	GOTO	_00173_DS_
00079a   f004
00079c   ef78     goto	0x8f0               	GOTO	_00178_DS_
00079e   f004
0007a0   efbf     goto	0x97e               	GOTO	_00185_DS_
0007a2   f004
0007a4   ef0a     goto	0xa14               	GOTO	_00188_DS_
0007a6   f005
0007a8   efb1     goto	0xb62               	GOTO	_00202_DS_
0007aa   f005
0007ac   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007ae   f006
0007b0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007b2   f006
0007b4   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007b6   f006
0007b8   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007ba   f006
0007bc   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007be   f006
0007c0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007c2   f006
                                           _00169_DS_:
                                           ;	.line	496; TCPIP_Stack/DHCP.c	break;
0007c4   efe0     goto	0xdc0               	GOTO	_00229_DS_
0007c6   f006
                                           _00170_DS_:
                                           ;	.line	501; TCPIP_Stack/DHCP.c	UDPOpen(DHCP_CLIENT_PORT, NULL, DHCP_SERVER_PORT);
0007c8   0e00     movlw	0                  	MOVLW	0x00
0007ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007cc   0e43     movlw	0x43               	MOVLW	0x43
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   0e00     movlw	0                  	MOVLW	0x00
0007d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d8   0e00     movlw	0                  	MOVLW	0x00
0007da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007dc   0e00     movlw	0                  	MOVLW	0x00
0007de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e0   0e44     movlw	0x44               	MOVLW	0x44
0007e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e4   ec6e     call	0x32dc, 0           	CALL	_UDPOpen
0007e6   f019
0007e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007ea   0e07     movlw	0x7                	MOVLW	0x07
0007ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
0007f2   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	502; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
0007f4   c81c     movff	0x81c, 0x1         	MOVFF	_DHCPClient, r0x01
0007f6   f001
0007f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fc   0aff     xorlw	0xff               	XORLW	0xff
0007fe   e104     bnz	0x808                	BNZ	_00263_DS_
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   e102     bnz	0x808                	BNZ	_00263_DS_
000804   efe0     goto	0xdc0               	GOTO	_00229_DS_
000806   f006
                                           _00263_DS_:
                                           ;	.line	504; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000808   0e02     movlw	0x2                	MOVLW	0x02
00080a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00080c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00173_DS_:
                                           ;	.line	512; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime = 60;
00080e   0e3c     movlw	0x3c               	MOVLW	0x3c
000810   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000812   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000814   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000816   6b24     clrf	0x24, 0x1           	CLRF	(_DHCPClient + 8), B
000818   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
00081a   6b25     clrf	0x25, 0x1           	CLRF	(_DHCPClient + 9), B
00081c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00081e   6b26     clrf	0x26, 0x1           	CLRF	(_DHCPClient + 10), B
000820   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	513; TCPIP_Stack/DHCP.c	DHCPClient.validValues.val = 0x00;
000822   6b37     clrf	0x37, 0x1           	CLRF	(_DHCPClient + 27), B
000824   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	514; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;	
000826   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
000828   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	515; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
00082a   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	519; TCPIP_Stack/DHCP.c	if(!MACIsLinked()) break;
00082c   ece4     call	0x75c8, 0           	CALL	_MACIsLinked
00082e   f03a
000830   6e01     movwf	0x1, 0             	MOVWF	r0x01
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000836   efe0     goto	0xdc0               	GOTO	_00229_DS_
000838   f006
00083a   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	522; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u) break;
00083c   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ec6a     call	0x6ad4, 0           	CALL	_UDPIsPutReady
000842   f035
000844   6e01     movwf	0x1, 0             	MOVWF	r0x01
000846   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000848   f002
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   0e01     movlw	0x1                	MOVLW	0x01
00084e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000850   e102     bnz	0x856                	BNZ	_00264_DS_
000852   0e2c     movlw	0x2c               	MOVLW	0x2c
000854   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00264_DS_:
000856   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000858   efe0     goto	0xdc0               	GOTO	_00229_DS_
00085a   f006
                                           ;	.line	528; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode ^= 1;
00085c   6a01     clrf	0x1, 0              	CLRF	r0x01
00085e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000860   b91e     btfsc	0x1e, 0x4, 0x1     	BTFSC	(_DHCPClient + 2), 4, B
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
000868   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086a   0b01     andlw	0x1                	ANDLW	0x01
00086c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
00086e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000870   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000872   511e     movf	0x1e, 0, 0x1        	MOVF	(_DHCPClient + 2), W, B
000874   0bef     andlw	0xef               	ANDLW	0xef
000876   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000878   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
00087a   6f1e     movwf	0x1e, 0x1          	MOVWF	(_DHCPClient + 2), B
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	533; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
00087e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000880   0d0e     mullw	0xe                	MULLW	0x0e
000882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000884   f001
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00088a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00088c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00088e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	534; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
000890   0e00     movlw	0                  	MOVLW	0x00
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   0e0a     movlw	0xa                	MOVLW	0x0a
000896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000898   0eff     movlw	0xff               	MOVLW	0xff
00089a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   ec8c     call	0x6318, 0           	CALL	_memset
0008a6   f031
0008a8   0e05     movlw	0x5                	MOVLW	0x05
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_DISCOVER_MESSAGE, FALSE);
0008ac   0e00     movlw	0                  	MOVLW	0x00
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e01     movlw	0x1                	MOVLW	0x01
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ec86     call	0x150c, 0           	CALL	__DHCPSend
0008b6   f00a
0008b8   0e02     movlw	0x2                	MOVLW	0x02
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	540; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0008bc   ec20     call	0x7840, 0           	CALL	_TickGet
0008be   f03c
0008c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c2   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008c4   f002
0008c6   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0008c8   f003
0008ca   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0008cc   f004
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0008d2   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0008d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0008d8   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0008da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008dc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
0008de   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
0008e4   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	541; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_OFFER;
0008e6   0e03     movlw	0x3                	MOVLW	0x03
0008e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
0008ea   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	542; TCPIP_Stack/DHCP.c	break;
0008ec   efe0     goto	0xdc0               	GOTO	_00229_DS_
0008ee   f006
                                           _00178_DS_:
0008f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	546; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
0008f2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ec37     call	0x706e, 0           	CALL	_UDPIsGetReady
0008f8   f038
0008fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008fc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008fe   f002
000900   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000906   e102     bnz	0x90c                	BNZ	_00266_DS_
000908   0efa     movlw	0xfa               	MOVLW	0xfa
00090a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00266_DS_:
00090c   e228     bc	0x95e                 	BC	_00182_DS_
                                           ;	.line	550; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
00090e   ec20     call	0x7840, 0           	CALL	_TickGet
000910   f03c
000912   6e01     movwf	0x1, 0             	MOVWF	r0x01
000914   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000916   f002
000918   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00091a   f003
00091c   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00091e   f004
000920   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000922   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000924   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000926   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000928   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
00092a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
00092c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
00092e   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000930   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000932   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000934   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000936   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000938   0e00     movlw	0                  	MOVLW	0x00
00093a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00093c   e108     bnz	0x94e                	BNZ	_00267_DS_
00093e   0e01     movlw	0x1                	MOVLW	0x01
000940   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000942   e105     bnz	0x94e                	BNZ	_00267_DS_
000944   0e3d     movlw	0x3d               	MOVLW	0x3d
000946   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000948   e102     bnz	0x94e                	BNZ	_00267_DS_
00094a   0ee4     movlw	0xe4               	MOVLW	0xe4
00094c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00267_DS_:
00094e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000950   efe0     goto	0xdc0               	GOTO	_00229_DS_
000952   f006
                                           ;	.line	551; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000954   0e02     movlw	0x2                	MOVLW	0x02
000956   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000958   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	552; TCPIP_Stack/DHCP.c	break;
00095a   efe0     goto	0xdc0               	GOTO	_00229_DS_
00095c   f006
                                           _00182_DS_:
00095e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	557; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bDHCPServerDetected = TRUE;
000960   871e     bsf	0x1e, 0x3, 0x1       	BSF	(_DHCPClient + 2), 3, B
                                           ;	.line	560; TCPIP_Stack/DHCP.c	if(_DHCPReceive() != DHCP_OFFER_MESSAGE) break;
000962   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000964   f000
000966   6e01     movwf	0x1, 0             	MOVWF	r0x01
000968   6a02     clrf	0x2, 0              	CLRF	r0x02
00096a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00096c   0a02     xorlw	0x2                	XORLW	0x02
00096e   e102     bnz	0x974                	BNZ	_00268_DS_
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   e002     bz	0x978                 	BZ	_00269_DS_
                                           _00268_DS_:
000974   efe0     goto	0xdc0               	GOTO	_00229_DS_
000976   f006
                                           _00269_DS_:
                                           ;	.line	561; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_REQUEST;
000978   0e04     movlw	0x4                	MOVLW	0x04
00097a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00097c   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00185_DS_:
00097e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	565; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000980   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   ec6a     call	0x6ad4, 0           	CALL	_UDPIsPutReady
000986   f035
000988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00098a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00098c   f002
00098e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000990   0e01     movlw	0x1                	MOVLW	0x01
000992   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000994   e102     bnz	0x99a                	BNZ	_00270_DS_
000996   0e02     movlw	0x2                	MOVLW	0x02
000998   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00270_DS_:
00099a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099c   efe0     goto	0xdc0               	GOTO	_00229_DS_
00099e   f006
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0009a0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	572; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
0009a2   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
0009a4   0d0e     mullw	0xe                	MULLW	0x0e
0009a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0009a8   f001
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0009ae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009b0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0009b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	573; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
0009b4   0e00     movlw	0                  	MOVLW	0x00
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   0e0a     movlw	0xa                	MOVLW	0x0a
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   0eff     movlw	0xff               	MOVLW	0xff
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c8   ec8c     call	0x6318, 0           	CALL	_memset
0009ca   f031
0009cc   0e05     movlw	0x5                	MOVLW	0x05
0009ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	576; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, FALSE);	
0009d0   0e00     movlw	0                  	MOVLW	0x00
0009d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d4   0e03     movlw	0x3                	MOVLW	0x03
0009d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d8   ec86     call	0x150c, 0           	CALL	__DHCPSend
0009da   f00a
0009dc   0e02     movlw	0x2                	MOVLW	0x02
0009de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0009e0   ec20     call	0x7840, 0           	CALL	_TickGet
0009e2   f03c
0009e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009e6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0009e8   f002
0009ea   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0009ec   f003
0009ee   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0009f0   f004
0009f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009f4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0009f6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
0009f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009fa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0009fc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
0009fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a00   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a02   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a06   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a08   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	580; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
000a0a   0e05     movlw	0x5                	MOVLW	0x05
000a0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a0e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	581; TCPIP_Stack/DHCP.c	break;
000a10   efe0     goto	0xdc0               	GOTO	_00229_DS_
000a12   f006
                                           _00188_DS_:
000a14   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	585; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000a16   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   ec37     call	0x706e, 0           	CALL	_UDPIsGetReady
000a1c   f038
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a22   f002
000a24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a26   0e00     movlw	0                  	MOVLW	0x00
000a28   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a2a   e102     bnz	0xa30                	BNZ	_00271_DS_
000a2c   0efa     movlw	0xfa               	MOVLW	0xfa
000a2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00271_DS_:
000a30   e226     bc	0xa7e                 	BC	_00192_DS_
                                           ;	.line	589; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
000a32   ec20     call	0x7840, 0           	CALL	_TickGet
000a34   f03c
000a36   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a38   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a3a   f002
000a3c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000a3e   f003
000a40   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000a42   f004
000a44   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000a46   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000a48   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000a4a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000a4c   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000a4e   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000a50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a52   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000a54   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000a56   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a58   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000a5a   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000a5c   0e00     movlw	0                  	MOVLW	0x00
000a5e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000a60   e108     bnz	0xa72                	BNZ	_00272_DS_
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000a66   e105     bnz	0xa72                	BNZ	_00272_DS_
000a68   0e3d     movlw	0x3d               	MOVLW	0x3d
000a6a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a6c   e102     bnz	0xa72                	BNZ	_00272_DS_
000a6e   0ee4     movlw	0xe4               	MOVLW	0xe4
000a70   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00272_DS_:
000a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a74   d1a5     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	590; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000a76   0e02     movlw	0x2                	MOVLW	0x02
000a78   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a7a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	591; TCPIP_Stack/DHCP.c	break;
000a7c   d1a1     bra	0xdc0                	BRA	_00229_DS_
                                           _00192_DS_:
                                           ;	.line	595; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000a7e   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000a80   f000
000a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a88   0a05     xorlw	0x5                	XORLW	0x05
000a8a   e102     bnz	0xa90                	BNZ	_00274_DS_
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   e007     bz	0xa9e                 	BZ	_00193_DS_
                                           _00274_DS_:
000a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a92   0a06     xorlw	0x6                	XORLW	0x06
000a94   e103     bnz	0xa9c                	BNZ	_00276_DS_
000a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a98   e101     bnz	0xa9c                	BNZ	_00276_DS_
000a9a   d05f     bra	0xb5a                	BRA	_00200_DS_
                                           _00276_DS_:
000a9c   d191     bra	0xdc0                	BRA	_00229_DS_
                                           _00193_DS_:
000a9e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	598; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000aa0   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   ecb2     call	0x6b64, 0           	CALL	_UDPClose
000aa6   f035
000aa8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000aaa   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	599; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000aac   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	600; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000aae   ec20     call	0x7840, 0           	CALL	_TickGet
000ab0   f03c
000ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ab6   f002
000ab8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000aba   f003
000abc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000abe   f004
000ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000ac4   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000ac6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000aca   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000acc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ace   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000ad0   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000ad6   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	601; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000ad8   0e06     movlw	0x6                	MOVLW	0x06
000ada   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000adc   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000ade   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	602; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000ae0   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
000ae2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	603; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = TRUE;	
000ae4   811e     bsf	0x1e, 0, 0x1         	BSF	(_DHCPClient + 2), 0, B
000ae6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	605; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.IPAddress)
000ae8   a137     btfss	0x37, 0, 0x1       	BTFSS	(_DHCPClient + 27), 0, B
000aea   d010     bra	0xb0c                	BRA	_00195_DS_
000aec   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	606; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = DHCPClient.tempIPAddress.Val;
000aee   512b     movf	0x2b, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
000af0   010e     movlb	0xe                	BANKSEL	_AppConfig
000af2   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
000af4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
000af6   512c     movf	0x2c, 0, 0x1        	MOVF	(_DHCPClient + 16), W, B
000af8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
000afa   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
000afc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
000afe   512d     movf	0x2d, 0, 0x1        	MOVF	(_DHCPClient + 17), W, B
000b00   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
000b02   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
000b04   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
000b06   512e     movf	0x2e, 0, 0x1        	MOVF	(_DHCPClient + 18), W, B
000b08   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
000b0a   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           _00195_DS_:
000b0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	607; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Mask)
000b0e   a537     btfss	0x37, 0x2, 0x1     	BTFSS	(_DHCPClient + 27), 2, B
000b10   d010     bra	0xb32                	BRA	_00197_DS_
000b12   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 23)
                                           ;	.line	608; TCPIP_Stack/DHCP.c	AppConfig.MyMask.Val = DHCPClient.tempMask.Val;
000b14   5133     movf	0x33, 0, 0x1        	MOVF	(_DHCPClient + 23), W, B
000b16   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
000b18   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
000b1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 24)
000b1c   5134     movf	0x34, 0, 0x1        	MOVF	(_DHCPClient + 24), W, B
000b1e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
000b20   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
000b22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 25)
000b24   5135     movf	0x35, 0, 0x1        	MOVF	(_DHCPClient + 25), W, B
000b26   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
000b28   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
000b2a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 26)
000b2c   5136     movf	0x36, 0, 0x1        	MOVF	(_DHCPClient + 26), W, B
000b2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
000b30   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
                                           _00197_DS_:
000b32   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	609; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Gateway)
000b34   a337     btfss	0x37, 0x1, 0x1     	BTFSS	(_DHCPClient + 27), 1, B
000b36   d144     bra	0xdc0                	BRA	_00229_DS_
000b38   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 19)
                                           ;	.line	610; TCPIP_Stack/DHCP.c	AppConfig.MyGateway.Val = DHCPClient.tempGateway.Val;
000b3a   512f     movf	0x2f, 0, 0x1        	MOVF	(_DHCPClient + 19), W, B
000b3c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
000b3e   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
000b40   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 20)
000b42   5130     movf	0x30, 0, 0x1        	MOVF	(_DHCPClient + 20), W, B
000b44   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
000b46   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
000b48   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 21)
000b4a   5131     movf	0x31, 0, 0x1        	MOVF	(_DHCPClient + 21), W, B
000b4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
000b4e   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
000b50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 22)
000b52   5132     movf	0x32, 0, 0x1        	MOVF	(_DHCPClient + 22), W, B
000b54   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
000b56   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	624; TCPIP_Stack/DHCP.c	break;
000b58   d133     bra	0xdc0                	BRA	_00229_DS_
                                           _00200_DS_:
                                           ;	.line	627; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000b5a   0e02     movlw	0x2                	MOVLW	0x02
000b5c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000b5e   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	630; TCPIP_Stack/DHCP.c	break;
000b60   d12f     bra	0xdc0                	BRA	_00229_DS_
                                           _00202_DS_:
                                           ;	.line	633; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer < TICK_SECOND) break;
000b62   ec20     call	0x7840, 0           	CALL	_TickGet
000b64   f03c
000b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b68   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b6a   f002
000b6c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b6e   f003
000b70   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b72   f004
000b74   c81f     movff	0x81f, 0x5         	MOVFF	(_DHCPClient + 3), r0x05
000b76   f005
000b78   c820     movff	0x820, 0x6         	MOVFF	(_DHCPClient + 4), r0x06
000b7a   f006
000b7c   c821     movff	0x821, 0x7         	MOVFF	(_DHCPClient + 5), r0x07
000b7e   f007
000b80   c822     movff	0x822, 0x8         	MOVFF	(_DHCPClient + 6), r0x08
000b82   f008
000b84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b86   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000b88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b8a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b8e   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000b90   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b92   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000b94   0e00     movlw	0                  	MOVLW	0x00
000b96   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000b98   e108     bnz	0xbaa                	BNZ	_00277_DS_
000b9a   0e00     movlw	0                  	MOVLW	0x00
000b9c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b9e   e105     bnz	0xbaa                	BNZ	_00277_DS_
000ba0   0e9e     movlw	0x9e               	MOVLW	0x9e
000ba2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000ba4   e102     bnz	0xbaa                	BNZ	_00277_DS_
000ba6   0ef2     movlw	0xf2               	MOVLW	0xf2
000ba8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00277_DS_:
000baa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bac   d109     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	637; TCPIP_Stack/DHCP.c	if(DHCPClient.dwLeaseTime >= 2ul)
000bae   c823     movff	0x823, 0x1         	MOVFF	(_DHCPClient + 7), r0x01
000bb0   f001
000bb2   c824     movff	0x824, 0x2         	MOVFF	(_DHCPClient + 8), r0x02
000bb4   f002
000bb6   c825     movff	0x825, 0x3         	MOVFF	(_DHCPClient + 9), r0x03
000bb8   f003
000bba   c826     movff	0x826, 0x4         	MOVFF	(_DHCPClient + 10), r0x04
000bbc   f004
000bbe   0e00     movlw	0                  	MOVLW	0x00
000bc0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000bc2   e108     bnz	0xbd4                	BNZ	_00278_DS_
000bc4   0e00     movlw	0                  	MOVLW	0x00
000bc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bc8   e105     bnz	0xbd4                	BNZ	_00278_DS_
000bca   0e00     movlw	0                  	MOVLW	0x00
000bcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000bce   e102     bnz	0xbd4                	BNZ	_00278_DS_
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
000bd4   e329     bnc	0xc28                	BNC	_00206_DS_
                                           ;	.line	639; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer += TICK_SECOND;
000bd6   0ef2     movlw	0xf2               	MOVLW	0xf2
000bd8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000bda   0e9e     movlw	0x9e               	MOVLW	0x9e
000bdc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000bde   0e00     movlw	0                  	MOVLW	0x00
000be0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000be2   0e00     movlw	0                  	MOVLW	0x00
000be4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000bea   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000bec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000bf0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000bf2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bf4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000bf6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000bf8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bfa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000bfc   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	640; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime--;
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c06   0eff     movlw	0xff               	MOVLW	0xff
000c08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c0a   0eff     movlw	0xff               	MOVLW	0xff
000c0c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c10   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000c12   6f23     movwf	0x23, 0x1          	MOVWF	(_DHCPClient + 7), B
000c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c16   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000c18   6f24     movwf	0x24, 0x1          	MOVWF	(_DHCPClient + 8), B
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000c1e   6f25     movwf	0x25, 0x1          	MOVWF	(_DHCPClient + 9), B
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
000c24   6f26     movwf	0x26, 0x1          	MOVWF	(_DHCPClient + 10), B
                                           ;	.line	641; TCPIP_Stack/DHCP.c	break;
000c26   d0cc     bra	0xdc0                	BRA	_00229_DS_
                                           _00206_DS_:
                                           ;	.line	646; TCPIP_Stack/DHCP.c	NULL, DHCP_SERVER_PORT);
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e43     movlw	0x43               	MOVLW	0x43
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0e00     movlw	0                  	MOVLW	0x00
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   0e00     movlw	0                  	MOVLW	0x00
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   0e00     movlw	0                  	MOVLW	0x00
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   0e44     movlw	0x44               	MOVLW	0x44
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   ec6e     call	0x32dc, 0           	CALL	_UDPOpen
000c46   f019
000c48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c4a   0e07     movlw	0x7                	MOVLW	0x07
000c4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c50   0108     movlb	0x8                	BANKSEL	_DHCPClient
000c52   6f1c     movwf	0x1c, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	647; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
000c54   c81c     movff	0x81c, 0x1         	MOVFF	_DHCPClient, r0x01
000c56   f001
000c58   6a02     clrf	0x2, 0              	CLRF	r0x02
000c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c5c   0aff     xorlw	0xff               	XORLW	0xff
000c5e   e103     bnz	0xc66                	BNZ	_00280_DS_
000c60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c62   e101     bnz	0xc66                	BNZ	_00280_DS_
000c64   d0ad     bra	0xdc0                	BRA	_00229_DS_
                                           _00280_DS_:
                                           ;	.line	649; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_RENEW;
000c66   0e07     movlw	0x7                	MOVLW	0x07
000c68   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000c6a   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00211_DS_:
000c6c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	655; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000c6e   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ec6a     call	0x6ad4, 0           	CALL	_UDPIsPutReady
000c74   f035
000c76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000c7e   0e01     movlw	0x1                	MOVLW	0x01
000c80   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c82   e102     bnz	0xc88                	BNZ	_00281_DS_
000c84   0e02     movlw	0x2                	MOVLW	0x02
000c86   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00281_DS_:
000c88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c8a   d09a     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	658; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, TRUE);
000c8c   0e01     movlw	0x1                	MOVLW	0x01
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   0e03     movlw	0x3                	MOVLW	0x03
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec86     call	0x150c, 0           	CALL	__DHCPSend
000c96   f00a
000c98   0e02     movlw	0x2                	MOVLW	0x02
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c9c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	659; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
000c9e   951e     bcf	0x1e, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	662; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000ca0   ec20     call	0x7840, 0           	CALL	_TickGet
000ca2   f03c
000ca4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ca8   f002
000caa   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000cac   f003
000cae   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000cb0   f004
000cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000cb6   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000cb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cba   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000cbc   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000cbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000cc2   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000cc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000cc8   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	663; TCPIP_Stack/DHCP.c	DHCPClient.smState++;
000cca   c81d     movff	0x81d, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
000ccc   f001
000cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cd2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000cd4   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	664; TCPIP_Stack/DHCP.c	break;
000cd6   d074     bra	0xdc0                	BRA	_00229_DS_
                                           _00216_DS_:
000cd8   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	670; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000cda   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ec37     call	0x706e, 0           	CALL	_UDPIsGetReady
000ce0   f038
000ce2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ce6   f002
000ce8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cea   0e00     movlw	0                  	MOVLW	0x00
000cec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000cee   e102     bnz	0xcf4                	BNZ	_00282_DS_
000cf0   0efa     movlw	0xfa               	MOVLW	0xfa
000cf2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00282_DS_:
000cf4   e230     bc	0xd56                 	BC	_00222_DS_
                                           ;	.line	674; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >=  DHCP_TIMEOUT)
000cf6   ec20     call	0x7840, 0           	CALL	_TickGet
000cf8   f03c
000cfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cfc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000cfe   f002
000d00   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d02   f003
000d04   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d06   f004
000d08   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d0a   511f     movf	0x1f, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000d0c   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000d0e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000d10   5120     movf	0x20, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000d12   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000d14   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000d16   5121     movf	0x21, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000d18   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000d1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000d1c   5122     movf	0x22, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000d1e   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000d20   0e00     movlw	0                  	MOVLW	0x00
000d22   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000d24   e108     bnz	0xd36                	BNZ	_00283_DS_
000d26   0e01     movlw	0x1                	MOVLW	0x01
000d28   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000d2a   e105     bnz	0xd36                	BNZ	_00283_DS_
000d2c   0e3d     movlw	0x3d               	MOVLW	0x3d
000d2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000d30   e102     bnz	0xd36                	BNZ	_00283_DS_
000d32   0ee4     movlw	0xe4               	MOVLW	0xe4
000d34   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00283_DS_:
000d36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d38   d043     bra	0xdc0                	BRA	_00229_DS_
000d3a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	676; TCPIP_Stack/DHCP.c	if(++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3)
000d3c   291d     incf	0x1d, 0, 0x1        	INCF	(_DHCPClient + 1), W, B
000d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d44   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000d46   0e0d     movlw	0xd                	MOVLW	0x0d
000d48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d4c   d039     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	677; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000d4e   0e02     movlw	0x2                	MOVLW	0x02
000d50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d52   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	679; TCPIP_Stack/DHCP.c	break;
000d54   d035     bra	0xdc0                	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	683; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000d56   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000d58   f000
000d5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d60   0a05     xorlw	0x5                	XORLW	0x05
000d62   e102     bnz	0xd68                	BNZ	_00286_DS_
000d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d66   e006     bz	0xd74                 	BZ	_00223_DS_
                                           _00286_DS_:
000d68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6a   0a06     xorlw	0x6                	XORLW	0x06
000d6c   e129     bnz	0xdc0                	BNZ	_00229_DS_
000d6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d70   e024     bz	0xdba                 	BZ	_00224_DS_
                                           _00288_DS_:
000d72   d026     bra	0xdc0                	BRA	_00229_DS_
                                           _00223_DS_:
000d74   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	686; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000d76   511c     movf	0x1c, 0, 0x1        	MOVF	_DHCPClient, W, B
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   ecb2     call	0x6b64, 0           	CALL	_UDPClose
000d7c   f035
000d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000d80   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	687; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000d82   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	688; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000d84   ec20     call	0x7840, 0           	CALL	_TickGet
000d86   f03c
000d88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000d8c   f002
000d8e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d90   f003
000d92   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d94   f004
000d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d98   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d9a   6f1f     movwf	0x1f, 0x1          	MOVWF	(_DHCPClient + 3), B
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000da0   6f20     movwf	0x20, 0x1          	MOVWF	(_DHCPClient + 4), B
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000da6   6f21     movwf	0x21, 0x1          	MOVWF	(_DHCPClient + 5), B
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000dac   6f22     movwf	0x22, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	689; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000dae   0e06     movlw	0x6                	MOVLW	0x06
000db0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000db2   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
000db4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	690; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000db6   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
                                           ;	.line	691; TCPIP_Stack/DHCP.c	break;
000db8   d003     bra	0xdc0                	BRA	_00229_DS_
                                           _00224_DS_:
                                           ;	.line	694; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000dba   0e02     movlw	0x2                	MOVLW	0x02
000dbc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000dbe   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00229_DS_:
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000dc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dc2   ef9a     goto	0x734               	GOTO	_00227_DS_
000dc4   f003
                                           _00231_DS_:
000dc6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000dc8   f008
000dca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000dcc   f007
000dce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000dd0   f006
000dd2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dd4   f005
000dd6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000dd8   f004
000dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ddc   f003
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsServerDetected	code
                                           _DHCPIsServerDetected:
                                           ;	.line	457; TCPIP_Stack/DHCP.c	BOOL DHCPIsServerDetected(BYTE vInterface)
007884   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007886   ffe5
007888   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00788a   ffd9
00788c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00788e   ffe5
                                           ;	.line	460; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bDHCPServerDetected;
007890   6a00     clrf	0, 0                	CLRF	r0x00
007892   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
007894   b71e     btfsc	0x1e, 0x3, 0x1     	BTFSC	(_DHCPClient + 2), 3, B
007896   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007898   5000     movf	0, 0, 0             	MOVF	r0x00, W
00789a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00789c   f000
00789e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0078a0   ffd9
0078a2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPStateChanged	code
                                           _DHCPStateChanged:
                                           ;	.line	420; TCPIP_Stack/DHCP.c	BOOL DHCPStateChanged(BYTE vInterface)
0078e4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0078e6   ffe5
0078e8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0078ea   ffd9
0078ec   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	423; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bEvent)
0078ee   a31e     btfss	0x1e, 0x1, 0x1     	BTFSS	(_DHCPClient + 2), 1, B
0078f0   d004     bra	0x78fa               	BRA	_00158_DS_
0078f2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	425; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 0;
0078f4   931e     bcf	0x1e, 0x1, 0x1       	BCF	(_DHCPClient + 2), 1, B
                                           ;	.line	426; TCPIP_Stack/DHCP.c	return TRUE;
0078f6   0e01     movlw	0x1                	MOVLW	0x01
0078f8   d001     bra	0x78fc               	BRA	_00159_DS_
                                           _00158_DS_:
                                           ;	.line	428; TCPIP_Stack/DHCP.c	return FALSE;
0078fa   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00159_DS_:
0078fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0078fe   ffd9
007900   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsBound	code
                                           _DHCPIsBound:
                                           ;	.line	386; TCPIP_Stack/DHCP.c	BOOL DHCPIsBound(BYTE vInterface)
0078a4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0078a6   ffe5
0078a8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0078aa   ffd9
0078ac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0078ae   ffe5
                                           ;	.line	389; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bIsBound;
0078b0   6a00     clrf	0, 0                	CLRF	r0x00
0078b2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
0078b4   b11e     btfsc	0x1e, 0, 0x1       	BTFSC	(_DHCPClient + 2), 0, B
0078b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0078b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0078ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0078bc   f000
0078be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0078c0   ffd9
0078c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsEnabled	code
                                           _DHCPIsEnabled:
                                           ;	.line	355; TCPIP_Stack/DHCP.c	BOOL DHCPIsEnabled(BYTE vInterface)
007742   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007744   ffe5
007746   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007748   ffd9
00774a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00774c   ffe5
                                           ;	.line	358; TCPIP_Stack/DHCP.c	return DHCPClient.smState != SM_DHCP_DISABLED;
00774e   6a00     clrf	0, 0                	CLRF	r0x00
007750   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007752   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
007754   e101     bnz	0x7758               	BNZ	_00147_DS_
007756   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00147_DS_:
007758   5000     movf	0, 0, 0             	MOVF	r0x00, W
00775a   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00775c   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00775e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007760   6a00     clrf	0, 0                	CLRF	r0x00
007762   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007764   5000     movf	0, 0, 0             	MOVF	r0x00, W
007766   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007768   f000
00776a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00776c   ffd9
00776e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPEnable	code
                                           _DHCPEnable:
                                           ;	.line	324; TCPIP_Stack/DHCP.c	void DHCPEnable(BYTE vInterface)
007902   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007904   ffe5
007906   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007908   ffd9
00790a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	328; TCPIP_Stack/DHCP.c	if(DHCPClient.smState == SM_DHCP_DISABLED)
00790c   511d     movf	0x1d, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00790e   e105     bnz	0x791a               	BNZ	_00139_DS_
                                           ;	.line	330; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
007910   0e01     movlw	0x1                	MOVLW	0x01
007912   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007914   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
007916   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	331; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;
007918   911e     bcf	0x1e, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
                                           _00139_DS_:
00791a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00791c   ffd9
00791e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPDisable	code
                                           _DHCPDisable:
                                           ;	.line	289; TCPIP_Stack/DHCP.c	void DHCPDisable(BYTE vInterface)
0074a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0074a8   ffe5
0074aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0074ac   ffd9
0074ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0074b0   ffe5
0074b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0074b4   ffe5
0074b6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0074b8   ffe5
                                           ;	.line	293; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
0074ba   c81c     movff	0x81c, 0           	MOVFF	_DHCPClient, r0x00
0074bc   f000
0074be   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0074c0   f001
0074c2   6a02     clrf	0x2, 0              	CLRF	r0x02
0074c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0074c6   0aff     xorlw	0xff               	XORLW	0xff
0074c8   e102     bnz	0x74ce               	BNZ	_00132_DS_
0074ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0074cc   e007     bz	0x74dc                	BZ	_00127_DS_
                                           _00132_DS_:
                                           ;	.line	295; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
0074ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0074d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0074d2   ecb2     call	0x6b64, 0           	CALL	_UDPClose
0074d4   f035
0074d6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0074d8   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	296; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
0074da   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00127_DS_:
0074dc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	299; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_DISABLED;
0074de   6b1d     clrf	0x1d, 0x1           	CLRF	(_DHCPClient + 1), B
0074e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0074e2   f002
0074e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0074e6   f001
0074e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0074ea   f000
0074ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0074ee   ffd9
0074f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPInit	code
                                           _DHCPInit:
                                           ;	.line	223; TCPIP_Stack/DHCP.c	void DHCPInit(BYTE vInterface)
006cfc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006cfe   ffe5
006d00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d02   ffd9
006d04   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006d06   ffe5
006d08   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006d0a   ffe5
006d0c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006d0e   ffe5
006d10   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
                                           ;	.line	229; TCPIP_Stack/DHCP.c	if(!DHCPClientInitializedOnce)
006d12   5141     movf	0x41, 0, 0x1        	MOVF	_DHCPClientInitializedOnce, W, B
006d14   e112     bnz	0x6d3a               	BNZ	_00106_DS_
                                           ;	.line	231; TCPIP_Stack/DHCP.c	DHCPClientInitializedOnce = TRUE;
006d16   0e01     movlw	0x1                	MOVLW	0x01
006d18   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
006d1a   6f41     movwf	0x41, 0x1          	MOVWF	_DHCPClientInitializedOnce, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
006d1c   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00109_DS_:
006d1e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006d20   f001
006d22   6a02     clrf	0x2, 0              	CLRF	r0x02
006d24   0e00     movlw	0                  	MOVLW	0x00
006d26   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006d28   e102     bnz	0x6d2e               	BNZ	_00119_DS_
006d2a   0e01     movlw	0x1                	MOVLW	0x01
006d2c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00119_DS_:
006d2e   e205     bc	0x6d3a                	BC	_00106_DS_
006d30   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	235; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
006d32   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
006d34   0e01     movlw	0x1                	MOVLW	0x01
006d36   6e00     movwf	0, 0               	MOVWF	r0x00
006d38   d7f2     bra	0x6d1e               	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	242; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
006d3a   c81c     movff	0x81c, 0           	MOVFF	_DHCPClient, r0x00
006d3c   f000
006d3e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006d40   f001
006d42   6a02     clrf	0x2, 0              	CLRF	r0x02
006d44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006d46   0aff     xorlw	0xff               	XORLW	0xff
006d48   e102     bnz	0x6d4e               	BNZ	_00121_DS_
006d4a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006d4c   e007     bz	0x6d5c                	BZ	_00108_DS_
                                           _00121_DS_:
                                           ;	.line	244; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
006d4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d52   ecb2     call	0x6b64, 0           	CALL	_UDPClose
006d54   f035
006d56   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006d58   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	245; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
006d5a   691c     setf	0x1c, 0x1           	SETF	_DHCPClient, B
                                           _00108_DS_:
                                           ;	.line	249; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
006d5c   0e01     movlw	0x1                	MOVLW	0x01
006d5e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
006d60   6f1d     movwf	0x1d, 0x1          	MOVWF	(_DHCPClient + 1), B
006d62   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	250; TCPIP_Stack/DHCP.c	DHCPClient.flags.val = 0;
006d64   6b1e     clrf	0x1e, 0x1           	CLRF	(_DHCPClient + 2), B
006d66   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	251; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode = TRUE; // This flag toggles before 
006d68   891e     bsf	0x1e, 0x4, 0x1       	BSF	(_DHCPClient + 2), 4, B
006d6a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	255; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = TRUE;
006d6c   831e     bsf	0x1e, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
006d6e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006d70   f002
006d72   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006d74   f001
006d76   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006d78   f000
006d7a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006d7c   ffd9
006d7e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4782 (0x12ae) bytes ( 3.65%)
                                           ;           	 2391 (0x0957) words
                                           ; udata size:	   39 (0x0027) bytes ( 1.02%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:30 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:30 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:30 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MACInit
                                           	global _MACIsLinked
                                           	global _MACIsTxReady
                                           	global _MACDiscardRx
                                           	global _MACGetFreeRxSize
                                           	global _MACGetHeader
                                           	global _MACPutHeader
                                           	global _MACFlush
                                           	global _MACSetReadPtrInRx
                                           	global _MACSetWritePtr
                                           	global _MACSetReadPtr
                                           	global _MACCalcRxChecksum
                                           	global _CalcIPBufferChecksum
                                           	global _MACMemCopyAsync
                                           	global _MACIsMemCopyDone
                                           	global _MACGet
                                           	global _MACGetArray
                                           	global _MACPut
                                           	global _MACPutArray
                                           	global _ReadPHYReg
                                           	global _WritePHYReg
                                           	global _MACPowerDown
                                           	global _MACPowerUp
                                           	global _MACPrintHeader
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _DisplayString
                                           	extern _swaps
                                           	extern _TickGet
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_ETH97J60_0	udata
                                           _NextPacketLocation	res	2
                                           
                                           udata_ETH97J60_1	udata
                                           _CurrentPacketLocation	res	2
                                           
                                           udata_ETH97J60_2	udata
                                           _WasDiscarded	res	1
                                           
                                           udata_ETH97J60_3	udata
                                           _wTXWatchdog	res	2
                                           
                                           udata_ETH97J60_4	udata
                                           _MACIsLinked_pr_1_1	res	2
                                           
                                           udata_ETH97J60_5	udata
                                           _MACDiscardRx_NewRXRDLocation_1_1	res	2
                                           
                                           udata_ETH97J60_6	udata
                                           _MACGetFreeRxSize_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_7	udata
                                           _MACGetFreeRxSize_WritePT_1_1	res	2
                                           
                                           udata_ETH97J60_8	udata
                                           _MACGetHeader_header_1_1	res	20
                                           
                                           udata_ETH97J60_9	udata
                                           _MACFlush_i_2_2	res	1
                                           
                                           udata_ETH97J60_10	udata
                                           _MACSetReadPtrInRx_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_11	udata
                                           _CalcIPBufferChecksum_ChunkLen_1_1	res	2
                                           
                                           udata_ETH97J60_12	udata
                                           _CalcIPBufferChecksum_Checksum_1_1	res	4
                                           
                                           udata_ETH97J60_13	udata
                                           _CalcIPBufferChecksum_DataBuffer_1_1	res	20
                                           
                                           udata_ETH97J60_14	udata
                                           _MACMemCopyAsync_destAddr_1_1	res	2
                                           
                                           udata_ETH97J60_15	udata
                                           _MACMemCopyAsync_sourceAddr_1_1	res	2
                                           
                                           udata_ETH97J60_16	udata
                                           _MACMemCopyAsync_ReadSave_1_1	res	2
                                           
                                           udata_ETH97J60_17	udata
                                           _MACMemCopyAsync_WriteSave_1_1	res	2
                                           
                                           udata_ETH97J60_18	udata
                                           _MACGetArray_i_1_1	res	1
                                           
                                           udata_ETH97J60_19	udata
                                           _ReadPHYReg_Result_1_1	res	2
                                           
                                           udata_ETH97J60_20	udata
                                           _WritePHYReg_Data_1_1	res	2
                                           
                                           udata_ETH97J60_21	udata
                                           _MACPrintHeader_header_1_1	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPrintHeader	code
                                           _MACPrintHeader:
                                           ;	.line	1452; TCPIP_Stack/ETH97J60.c	void MACPrintHeader(BYTE woffset)
004bd0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004bd2   ffe5
004bd4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004bd6   ffd9
004bd8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004bda   ffe5
004bdc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004bde   ffe5
004be0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004be2   ffe5
004be4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004be6   ffe5
004be8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004bea   ffe5
004bec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004bee   ffe5
004bf0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004bf2   ffe5
004bf4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004bf6   ffe5
004bf8   0e02     movlw	0x2                	MOVLW	0x02
004bfa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004bfc   f000
                                           ;	.line	1458; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(TXSTART + 1) ;
004bfe   0e0b     movlw	0xb                	MOVLW	0x0b
004c00   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	1459; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(TXSTART + 1) ;
004c02   0e1a     movlw	0x1a               	MOVLW	0x1a
004c04   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	1462; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header[0], sizeof(header));
004c06   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004c08   6e02     movwf	0x2, 0             	MOVWF	r0x02
004c0a   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004c0c   6e01     movwf	0x1, 0             	MOVWF	r0x01
004c0e   0e80     movlw	0x80               	MOVLW	0x80
004c10   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c12   0e00     movlw	0                  	MOVLW	0x00
004c14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c16   0e40     movlw	0x40               	MOVLW	0x40
004c18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c1e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004c20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c22   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c26   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
004c28   f02f
004c2a   0e05     movlw	0x5                	MOVLW	0x05
004c2c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
004c2e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
004c30   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
004c32   6a01     clrf	0x1, 0              	CLRF	r0x01
004c34   6a02     clrf	0x2, 0              	CLRF	r0x02
004c36   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00492_DS_:
004c38   0e10     movlw	0x10               	MOVLW	0x10
004c3a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004c3c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004c3e   d057     bra	0x4cee               	BRA	_00495_DS_
                                           ;	.line	1466; TCPIP_Stack/ETH97J60.c	c = (header[i+2*woffset]>>4)&0x0F;
004c40   5000     movf	0, 0, 0             	MOVF	r0x00, W
004c42   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004c44   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c46   6a05     clrf	0x5, 0              	CLRF	r0x05
004c48   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004c4a   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004c4c   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004c4e   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
004c50   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
004c52   ffe9
004c54   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
004c56   ffea
004c58   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
004c5a   f004
004c5c   3804     swapf	0x4, 0, 0          	SWAPF	r0x04, W
004c5e   0b0f     andlw	0xf                	ANDLW	0x0f
004c60   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c62   0e0f     movlw	0xf                	MOVLW	0x0f
004c64   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
                                           ;	.line	1467; TCPIP_Stack/ETH97J60.c	LCDText[2*i] = c + (c < 0x0A ? '0' : 'A');
004c66   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
004c68   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
004c6a   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c6c   6a06     clrf	0x6, 0              	CLRF	r0x06
004c6e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004c70   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004c72   0e0a     movlw	0xa                	MOVLW	0x0a
004c74   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
004c76   e203     bc	0x4c7e                	BC	_00498_DS_
004c78   0e30     movlw	0x30               	MOVLW	0x30
004c7a   6e07     movwf	0x7, 0             	MOVWF	r0x07
004c7c   d002     bra	0x4c82               	BRA	_00499_DS_
                                           _00498_DS_:
004c7e   0e41     movlw	0x41               	MOVLW	0x41
004c80   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00499_DS_:
004c82   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c84   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
004c86   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004c88   ffe9
004c8a   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004c8c   ffea
004c8e   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
004c90   ffef
                                           ;	.line	1468; TCPIP_Stack/ETH97J60.c	c = header[i+2*woffset]&0x0F;
004c92   5000     movf	0, 0, 0             	MOVF	r0x00, W
004c94   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004c96   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c98   6a06     clrf	0x6, 0              	CLRF	r0x06
004c9a   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004c9c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
004c9e   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004ca0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004ca2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004ca4   ffe9
004ca6   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004ca8   ffea
004caa   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
004cac   f005
004cae   0e0f     movlw	0xf                	MOVLW	0x0f
004cb0   1405     andwf	0x5, 0, 0          	ANDWF	r0x05, W
004cb2   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	1469; TCPIP_Stack/ETH97J60.c	LCDText[2*i+1] = c + (c < 0x0A ? '0' : 'A');
004cb4   2803     incf	0x3, 0, 0           	INCF	r0x03, W
004cb6   6e05     movwf	0x5, 0             	MOVWF	r0x05
004cb8   6a06     clrf	0x6, 0              	CLRF	r0x06
004cba   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
004cbc   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
004cbe   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004cc0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004cc2   0e0a     movlw	0xa                	MOVLW	0x0a
004cc4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
004cc6   e203     bc	0x4cce                	BC	_00500_DS_
004cc8   0e30     movlw	0x30               	MOVLW	0x30
004cca   6e07     movwf	0x7, 0             	MOVWF	r0x07
004ccc   d002     bra	0x4cd2               	BRA	_00501_DS_
                                           _00500_DS_:
004cce   0e41     movlw	0x41               	MOVLW	0x41
004cd0   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00501_DS_:
004cd2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004cd4   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004cd6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004cd8   ffe9
004cda   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004cdc   ffea
004cde   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
004ce0   ffef
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
004ce2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
004ce4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
004ce6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004ce8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004cea   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004cec   d7a5     bra	0x4c38               	BRA	_00492_DS_
                                           _00495_DS_:
004cee   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	1471; TCPIP_Stack/ETH97J60.c	LCDText[32]=0;
004cf0   6b53     clrf	0x53, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	1473; TCPIP_Stack/ETH97J60.c	LCDUpdate();
004cf2   ec39     call	0x3072, 0           	CALL	_LCDUpdate
004cf4   f018
004cf6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004cf8   f007
004cfa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004cfc   f006
004cfe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004d00   f005
004d02   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004d04   f004
004d06   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004d08   f003
004d0a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004d0c   f002
004d0e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004d10   f001
004d12   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004d14   f000
004d16   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004d18   ffd9
004d1a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerUp	code
                                           _MACPowerUp:
                                           ;	.line	1357; TCPIP_Stack/ETH97J60.c	void MACPowerUp(void)
00793e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007940   ffe5
007942   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007944   ffd9
007946   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1360; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;
007948   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00484_DS_:
00794a   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1363; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY)
00794c   b1fd     btfsc	0xfd, 0, 0x1       	BTFSC	_ESTATbits, 0, B
00794e   d002     bra	0x7954               	BRA	_00487_DS_
                                           ;	.line	1366; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
007950   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
007952   d7fb     bra	0x794a               	BRA	_00484_DS_
                                           _00487_DS_:
007954   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007956   ffd9
007958   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerDown	code
                                           _MACPowerDown:
                                           ;	.line	1320; TCPIP_Stack/ETH97J60.c	void MACPowerDown(void)
007920   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007922   ffe5
007924   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007926   ffd9
                                           ;	.line	1323; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 0;
007928   94d2     bcf	0xd2, 0x2, 0         	BCF	_ECON1bits, 2
                                           _00473_DS_:
00792a   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1327; TCPIP_Stack/ETH97J60.c	while(ESTATbits.RXBUSY);
00792c   b5fd     btfsc	0xfd, 0x2, 0x1     	BTFSC	_ESTATbits, 2, B
00792e   d7fd     bra	0x792a               	BRA	_00473_DS_
                                           _00476_DS_:
                                           ;	.line	1330; TCPIP_Stack/ETH97J60.c	while(ECON1bits.TXRTS);
007930   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
007932   d7fe     bra	0x7930               	BRA	_00476_DS_
007934   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1333; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 0;
007936   9bfe     bcf	0xfe, 0x5, 0x1       	BCF	_ECON2bits, 5, B
007938   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00793a   ffd9
00793c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__WritePHYReg	code
                                           _WritePHYReg:
                                           ;	.line	1251; TCPIP_Stack/ETH97J60.c	void WritePHYReg(BYTE Register, WORD Data)
007458   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00745a   ffe5
00745c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00745e   ffd9
007460   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007462   ffe5
007464   0e02     movlw	0x2                	MOVLW	0x02
007466   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007468   feb4
00746a   0e03     movlw	0x3                	MOVLW	0x03
00746c   cfdb     movff	0xfdb, 0xa41       	MOVFF	PLUSW2, _WritePHYReg_Data_1_1
00746e   fa41
007470   0e04     movlw	0x4                	MOVLW	0x04
007472   cfdb     movff	0xfdb, 0xa42       	MOVFF	PLUSW2, (_WritePHYReg_Data_1_1 + 1)
007474   fa42
                                           ;	.line	1268; TCPIP_Stack/ETH97J60.c	PRODL = ((WORD_VAL*)&Data)->v[0];
007476   ca41     movff	0xa41, 0xff3       	MOVFF	_WritePHYReg_Data_1_1, _PRODL
007478   fff3
                                           ;	.line	1269; TCPIP_Stack/ETH97J60.c	PRODH = ((WORD_VAL*)&Data)->v[1];
00747a   ca42     movff	0xa42, 0xff4       	MOVFF	(_WritePHYReg_Data_1_1 + 1), _PRODH
00747c   fff4
                                           ;	.line	1270; TCPIP_Stack/ETH97J60.c	GIESave = INTCON & 0xC0;	 // Save GIEH and GIEL bits
00747e   0ec0     movlw	0xc0               	MOVLW	0xc0
007480   14f2     andwf	0xf2, 0, 0         	ANDWF	_INTCON, W
007482   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	1271; TCPIP_Stack/ETH97J60.c	INTCON &= 0x3F;		 // Clear INTCONbits.GIEH and INTCONbits.GIEL
007484   0e3f     movlw	0x3f               	MOVLW	0x3f
007486   16f2     andwf	0xf2, 0x1, 0       	ANDWF	_INTCON, F
007488   cff3     movff	0xff3, 0xeb6       	movff _PRODL, _MIWRL
00748a   feb6
00748c   0000     nop                      	nop
00748e   cff4     movff	0xff4, 0xeb7       	movff _PRODH, _MIWRH
007490   feb7
                                           	
                                           ;	.line	1289; TCPIP_Stack/ETH97J60.c	INTCON |= GIESave;		       // Restore GIEH and GIEL value
007492   5000     movf	0, 0, 0             	MOVF	r0x00, W
007494   12f2     iorwf	0xf2, 0x1, 0       	IORWF	_INTCON, F
                                           _00465_DS_:
007496   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1293; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
007498   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
00749a   d7fd     bra	0x7496               	BRA	_00465_DS_
00749c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00749e   f000
0074a0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0074a2   ffd9
0074a4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__ReadPHYReg	code
                                           _ReadPHYReg:
                                           ;	.line	1208; TCPIP_Stack/ETH97J60.c	WORD ReadPHYReg(BYTE Register)
007584   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007586   ffe5
007588   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00758a   ffd9
00758c   0e02     movlw	0x2                	MOVLW	0x02
00758e   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007590   feb4
007592   0000     nop                      	nop 
                                           ;	.line	1215; TCPIP_Stack/ETH97J60.c	MICMD = MICMD_MIIRD; Nop();
007594   0e01     movlw	0x1                	MOVLW	0x01
007596   010e     movlb	0xe                	BANKSEL	_MICMD
007598   6fb2     movwf	0xb2, 0x1          	MOVWF	_MICMD, B
00759a   0000     nop                      	nop 
                                           _00451_DS_:
00759c   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1219; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
00759e   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
0075a0   d7fd     bra	0x759c               	BRA	_00451_DS_
0075a2   010e     movlb	0xe                	BANKSEL	_MICMD
                                           ;	.line	1222; TCPIP_Stack/ETH97J60.c	MICMD = 0x00; Nop();
0075a4   6bb2     clrf	0xb2, 0x1           	CLRF	_MICMD, B
0075a6   0000     nop                      	nop 
0075a8   010e     movlb	0xe                	BANKSEL	_MIRDL
                                           ;	.line	1225; TCPIP_Stack/ETH97J60.c	Result.VAL.v[0] = MIRDL;
0075aa   51b8     movf	0xb8, 0, 0x1        	MOVF	_MIRDL, W, B
0075ac   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
0075ae   6f3f     movwf	0x3f, 0x1          	MOVWF	_ReadPHYReg_Result_1_1, B
0075b0   0000     nop                      	nop 
0075b2   010e     movlb	0xe                	BANKSEL	_MIRDH
                                           ;	.line	1227; TCPIP_Stack/ETH97J60.c	Result.VAL.v[1] = MIRDH;
0075b4   51b9     movf	0xb9, 0, 0x1        	MOVF	_MIRDH, W, B
0075b6   010a     movlb	0xa                	BANKSEL	(_ReadPHYReg_Result_1_1 + 1)
0075b8   6f40     movwf	0x40, 0x1          	MOVWF	(_ReadPHYReg_Result_1_1 + 1), B
                                           ;	.line	1229; TCPIP_Stack/ETH97J60.c	return Result2;
0075ba   ca40     movff	0xa40, 0xff3       	MOVFF	(_ReadPHYReg_Result_1_1 + 1), PRODL
0075bc   fff3
0075be   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
0075c0   513f     movf	0x3f, 0, 0x1        	MOVF	_ReadPHYReg_Result_1_1, W, B
0075c2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0075c4   ffd9
0075c6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutArray	code
                                           _MACPutArray:
                                           ;	.line	1149; TCPIP_Stack/ETH97J60.c	void MACPutArray(BYTE *val, WORD len)
006882   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006884   ffe5
006886   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006888   ffd9
00688a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00688c   ffe5
00688e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006890   ffe5
006892   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006894   ffe5
006896   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006898   ffe5
00689a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00689c   ffe5
00689e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0068a0   ffe5
0068a2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0068a4   ffe5
0068a6   0e02     movlw	0x2                	MOVLW	0x02
0068a8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0068aa   f000
0068ac   0e03     movlw	0x3                	MOVLW	0x03
0068ae   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0068b0   f001
0068b2   0e04     movlw	0x4                	MOVLW	0x04
0068b4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0068b6   f002
0068b8   0e05     movlw	0x5                	MOVLW	0x05
0068ba   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0068bc   f003
0068be   0e06     movlw	0x6                	MOVLW	0x06
0068c0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0068c2   f004
                                           _00437_DS_:
                                           ;	.line	1151; TCPIP_Stack/ETH97J60.c	while(len--)
0068c4   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
0068c6   f005
0068c8   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0068ca   f006
0068cc   0eff     movlw	0xff               	MOVLW	0xff
0068ce   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0068d0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0068d2   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0068d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0068d6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0068d8   e00e     bz	0x68f6                	BZ	_00440_DS_
                                           ;	.line	1167; TCPIP_Stack/ETH97J60.c	EDATA = *val++; 
0068da   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0068dc   ffe9
0068de   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0068e0   fff3
0068e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0068e4   ec31     call	0x7862, 0           	CALL	__gptrget1
0068e6   f03c
0068e8   6e61     movwf	0x61, 0            	MOVWF	_EDATA
0068ea   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0068ec   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0068ee   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0068f0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0068f2   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0068f4   d7e7     bra	0x68c4               	BRA	_00437_DS_
                                           _00440_DS_:
0068f6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0068f8   f006
0068fa   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0068fc   f005
0068fe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006900   f004
006902   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006904   f003
006906   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006908   f002
00690a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00690c   f001
00690e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006910   f000
006912   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006914   ffd9
006916   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPut	code
                                           _MACPut:
                                           ;	.line	1104; TCPIP_Stack/ETH97J60.c	void MACPut(BYTE val)
0079be   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0079c0   ffe5
0079c2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0079c4   ffd9
0079c6   0e02     movlw	0x2                	MOVLW	0x02
0079c8   cfdb     movff	0xfdb, 0xf61       	MOVFF	PLUSW2, _EDATA
0079ca   ff61
                                           ;	.line	1121; TCPIP_Stack/ETH97J60.c	EDATA = val;
0079cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0079ce   ffd9
0079d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetArray	code
                                           _MACGetArray:
                                           ;	.line	1062; TCPIP_Stack/ETH97J60.c	WORD MACGetArray(BYTE *val, WORD len)
005fa2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005fa4   ffe5
005fa6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005fa8   ffd9
005faa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005fac   ffe5
005fae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005fb0   ffe5
005fb2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005fb4   ffe5
005fb6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005fb8   ffe5
005fba   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005fbc   ffe5
005fbe   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005fc0   ffe5
005fc2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005fc4   ffe5
005fc6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005fc8   ffe5
005fca   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005fcc   ffe5
005fce   0e02     movlw	0x2                	MOVLW	0x02
005fd0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005fd2   f000
005fd4   0e03     movlw	0x3                	MOVLW	0x03
005fd6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005fd8   f001
005fda   0e04     movlw	0x4                	MOVLW	0x04
005fdc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005fde   f002
005fe0   0e05     movlw	0x5                	MOVLW	0x05
005fe2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005fe4   f003
005fe6   0e06     movlw	0x6                	MOVLW	0x06
005fe8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005fea   f004
                                           ;	.line	1068; TCPIP_Stack/ETH97J60.c	if(val)
005fec   5000     movf	0, 0, 0             	MOVF	r0x00, W
005fee   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
005ff0   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
005ff2   e01e     bz	0x6030                	BZ	_00427_DS_
                                           ;	.line	1070; TCPIP_Stack/ETH97J60.c	while(w--)
005ff4   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
005ff6   f005
005ff8   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
005ffa   f006
                                           _00413_DS_:
005ffc   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
005ffe   f007
006000   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
006002   f008
006004   0eff     movlw	0xff               	MOVLW	0xff
006006   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
006008   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00600a   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
00600c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00600e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
006010   e021     bz	0x6054                	BZ	_00421_DS_
                                           ;	.line	1072; TCPIP_Stack/ETH97J60.c	*val++ = EDATA;
006012   cf61     movff	0xf61, 0xfe5       	MOVFF	_EDATA, POSTDEC1
006014   ffe5
006016   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006018   ffe9
00601a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00601c   fff3
00601e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006020   ecf3     call	0x79e6, 0           	CALL	__gptrput1
006022   f03c
006024   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006026   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006028   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00602a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00602c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00602e   d7e6     bra	0x5ffc               	BRA	_00413_DS_
                                           _00427_DS_:
                                           ;	.line	1077; TCPIP_Stack/ETH97J60.c	while(w--)
006030   c003     movff	0x3, 0             	MOVFF	r0x03, r0x00
006032   f000
006034   c004     movff	0x4, 0x1           	MOVFF	r0x04, r0x01
006036   f001
                                           _00416_DS_:
006038   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00603a   f002
00603c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00603e   f005
006040   0eff     movlw	0xff               	MOVLW	0xff
006042   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006044   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006046   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
006048   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00604a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00604c   e003     bz	0x6054                	BZ	_00421_DS_
                                           ;	.line	1079; TCPIP_Stack/ETH97J60.c	i = EDATA;
00604e   cf61     movff	0xf61, 0xa60       	MOVFF	_EDATA, _MACGetArray_i_1_1
006050   fa60
006052   d7f2     bra	0x6038               	BRA	_00416_DS_
                                           _00421_DS_:
                                           ;	.line	1083; TCPIP_Stack/ETH97J60.c	return len;
006054   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006056   fff3
006058   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00605a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00605c   f008
00605e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006060   f007
006062   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006064   f006
006066   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006068   f005
00606a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00606c   f004
00606e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006070   f003
006072   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006074   f002
006076   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006078   f001
00607a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00607c   f000
00607e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006080   ffd9
006082   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGet	code
                                           _MACGet:
                                           ;	.line	1037; TCPIP_Stack/ETH97J60.c	BYTE MACGet()
0079fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0079fc   ffe5
0079fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a00   ffd9
                                           ;	.line	1039; TCPIP_Stack/ETH97J60.c	return EDATA;
007a02   5061     movf	0x61, 0, 0          	MOVF	_EDATA, W
007a04   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a06   ffd9
007a08   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsMemCopyDone	code
                                           _MACIsMemCopyDone:
                                           ;	.line	1014; TCPIP_Stack/ETH97J60.c	BOOL MACIsMemCopyDone(void)
00779c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00779e   ffe5
0077a0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077a2   ffd9
0077a4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0077a6   ffe5
                                           ;	.line	1016; TCPIP_Stack/ETH97J60.c	return !ECON1bits.DMAST;
0077a8   6a00     clrf	0, 0                	CLRF	r0x00
0077aa   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
0077ac   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0077ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0077b0   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0077b2   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0077b4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0077b6   6a00     clrf	0, 0                	CLRF	r0x00
0077b8   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0077ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0077bc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0077be   f000
0077c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0077c2   ffd9
0077c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACMemCopyAsync	code
                                           _MACMemCopyAsync:
                                           ;	.line	899; TCPIP_Stack/ETH97J60.c	void MACMemCopyAsync(WORD destAddr, WORD sourceAddr, WORD len)
00186c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00186e   ffe5
001870   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001872   ffd9
001874   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001876   ffe5
001878   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00187a   ffe5
00187c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00187e   ffe5
001880   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001882   ffe5
001884   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001886   ffe5
001888   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00188a   ffe5
00188c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00188e   ffe5
001890   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001892   ffe5
001894   0e02     movlw	0x2                	MOVLW	0x02
001896   cfdb     movff	0xfdb, 0xa37       	MOVFF	PLUSW2, _MACMemCopyAsync_destAddr_1_1
001898   fa37
00189a   0e03     movlw	0x3                	MOVLW	0x03
00189c   cfdb     movff	0xfdb, 0xa38       	MOVFF	PLUSW2, (_MACMemCopyAsync_destAddr_1_1 + 1)
00189e   fa38
0018a0   0e04     movlw	0x4                	MOVLW	0x04
0018a2   cfdb     movff	0xfdb, 0xa39       	MOVFF	PLUSW2, _MACMemCopyAsync_sourceAddr_1_1
0018a4   fa39
0018a6   0e05     movlw	0x5                	MOVLW	0x05
0018a8   cfdb     movff	0xfdb, 0xa3a       	MOVFF	PLUSW2, (_MACMemCopyAsync_sourceAddr_1_1 + 1)
0018aa   fa3a
0018ac   0e06     movlw	0x6                	MOVLW	0x06
0018ae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018b0   f000
0018b2   0e07     movlw	0x7                	MOVLW	0x07
0018b4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018b6   f001
                                           ;	.line	902; TCPIP_Stack/ETH97J60.c	BOOL UpdateWritePointer = FALSE;
0018b8   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           ;	.line	903; TCPIP_Stack/ETH97J60.c	BOOL UpdateReadPointer = FALSE;
0018ba   6a03     clrf	0x3, 0              	CLRF	r0x03
0018bc   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	905; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&destAddr)->bits.b15)
0018be   af38     btfss	0x38, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_destAddr_1_1 + 1), 7, B
0018c0   d013     bra	0x18e8               	BRA	_00325_DS_
                                           ;	.line	907; TCPIP_Stack/ETH97J60.c	UpdateWritePointer = TRUE;
0018c2   0e01     movlw	0x1                	MOVLW	0x01
0018c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	908; TCPIP_Stack/ETH97J60.c	destAddr = ((WORD)EWRPTH)<<8|EWRPTL;
0018c6   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
0018c8   f004
0018ca   6a05     clrf	0x5, 0              	CLRF	r0x05
0018cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018ce   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018d0   6a06     clrf	0x6, 0              	CLRF	r0x06
0018d2   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
0018d4   f004
0018d6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0018dc   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
0018de   6f37     movwf	0x37, 0x1          	MOVWF	_MACMemCopyAsync_destAddr_1_1, B
0018e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0018e4   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
0018e6   6f38     movwf	0x38, 0x1          	MOVWF	(_MACMemCopyAsync_destAddr_1_1 + 1), B
                                           _00325_DS_:
0018e8   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	910; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&sourceAddr)->bits.b15)
0018ea   af3a     btfss	0x3a, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_sourceAddr_1_1 + 1), 7, B
0018ec   d013     bra	0x1914               	BRA	_00327_DS_
                                           ;	.line	912; TCPIP_Stack/ETH97J60.c	UpdateReadPointer = TRUE;
0018ee   0e01     movlw	0x1                	MOVLW	0x01
0018f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	913; TCPIP_Stack/ETH97J60.c	sourceAddr = ((WORD)ERDPTH)<<8|ERDPTL;
0018f2   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
0018f4   f004
0018f6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018fc   6a06     clrf	0x6, 0              	CLRF	r0x06
0018fe   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001900   f004
001902   6a05     clrf	0x5, 0              	CLRF	r0x05
001904   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001906   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001908   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
00190a   6f39     movwf	0x39, 0x1          	MOVWF	_MACMemCopyAsync_sourceAddr_1_1, B
00190c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00190e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001910   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001912   6f3a     movwf	0x3a, 0x1          	MOVWF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), B
                                           _00327_DS_:
                                           ;	.line	918; TCPIP_Stack/ETH97J60.c	if(len <= 1u)
001914   0e00     movlw	0                  	MOVLW	0x00
001916   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
001918   e102     bnz	0x191e               	BNZ	_00376_DS_
00191a   0e02     movlw	0x2                	MOVLW	0x02
00191c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00376_DS_:
00191e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001920   d07c     bra	0x1a1a               	BRA	_00352_DS_
                                           ;	.line	920; TCPIP_Stack/ETH97J60.c	ReadSave.Val = ((WORD)ERDPTH)<<8|ERDPTL;
001922   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
001924   f004
001926   6a05     clrf	0x5, 0              	CLRF	r0x05
001928   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00192a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00192c   6a06     clrf	0x6, 0              	CLRF	r0x06
00192e   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001930   f004
001932   6a05     clrf	0x5, 0              	CLRF	r0x05
001934   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001936   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001938   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00193a   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
00193c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00193e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
001940   6f3b     movwf	0x3b, 0x1          	MOVWF	_MACMemCopyAsync_ReadSave_1_1, B
001942   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001944   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
001946   6f3c     movwf	0x3c, 0x1          	MOVWF	(_MACMemCopyAsync_ReadSave_1_1 + 1), B
                                           ;	.line	921; TCPIP_Stack/ETH97J60.c	WriteSave.Val =  ((WORD)EWRPTH)<<8|EWRPTL;
001948   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
00194a   f004
00194c   6a05     clrf	0x5, 0              	CLRF	r0x05
00194e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001950   6e07     movwf	0x7, 0             	MOVWF	r0x07
001952   6a06     clrf	0x6, 0              	CLRF	r0x06
001954   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
001956   f004
001958   6a05     clrf	0x5, 0              	CLRF	r0x05
00195a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00195c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
00195e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001960   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001962   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001964   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001966   6f3d     movwf	0x3d, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001968   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00196a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
00196c   6f3e     movwf	0x3e, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
00196e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	922; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(sourceAddr);
001970   5139     movf	0x39, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001972   6e04     movwf	0x4, 0             	MOVWF	r0x04
001974   6a05     clrf	0x5, 0              	CLRF	r0x05
001976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001978   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
00197a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	923; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(sourceAddr);
00197c   513a     movf	0x3a, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
00197e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001980   6a05     clrf	0x5, 0              	CLRF	r0x05
001982   6a05     clrf	0x5, 0              	CLRF	r0x05
001984   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001986   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
001988   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	924; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(destAddr);
00198a   5137     movf	0x37, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
00198c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00198e   6a05     clrf	0x5, 0              	CLRF	r0x05
001990   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001992   010e     movlb	0xe                	BANKSEL	_EWRPTL
001994   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001996   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	925; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(destAddr);
001998   5138     movf	0x38, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
00199a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00199c   6a05     clrf	0x5, 0              	CLRF	r0x05
00199e   6a05     clrf	0x5, 0              	CLRF	r0x05
0019a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a2   010e     movlb	0xe                	BANKSEL	_EWRPTH
0019a4   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	926; TCPIP_Stack/ETH97J60.c	while(len--) MACPut(MACGet());
0019a6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0019a8   f004
0019aa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0019ac   f005
                                           _00328_DS_:
0019ae   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0019b0   f006
0019b2   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
0019b4   f007
0019b6   0eff     movlw	0xff               	MOVLW	0xff
0019b8   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019ba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019bc   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0019be   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019c0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0019c2   e009     bz	0x19d6                	BZ	_00330_DS_
0019c4   ecfd     call	0x79fa, 0           	CALL	_MACGet
0019c6   f03c
0019c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019ca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ce   ecdf     call	0x79be, 0           	CALL	_MACPut
0019d0   f03c
0019d2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0019d4   d7ec     bra	0x19ae               	BRA	_00328_DS_
                                           _00330_DS_:
                                           ;	.line	927; TCPIP_Stack/ETH97J60.c	if(!UpdateReadPointer)
0019d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019d8   e10d     bnz	0x19f4               	BNZ	_00332_DS_
0019da   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
                                           ;	.line	929; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(ReadSave.Val);
0019dc   513b     movf	0x3b, 0, 0x1        	MOVF	_MACMemCopyAsync_ReadSave_1_1, W, B
0019de   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019e0   6a05     clrf	0x5, 0              	CLRF	r0x05
0019e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019e4   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
0019e6   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
                                           ;	.line	930; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(ReadSave.Val);
0019e8   513c     movf	0x3c, 0, 0x1        	MOVF	(_MACMemCopyAsync_ReadSave_1_1 + 1), W, B
0019ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019ec   6a05     clrf	0x5, 0              	CLRF	r0x05
0019ee   6a05     clrf	0x5, 0              	CLRF	r0x05
0019f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019f2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00332_DS_:
                                           ;	.line	932; TCPIP_Stack/ETH97J60.c	if(!UpdateWritePointer)
0019f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019f6   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0019f8   d0d5     bra	0x1ba4               	BRA	_00354_DS_
0019fa   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
                                           ;	.line	934; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
0019fc   513d     movf	0x3d, 0, 0x1        	MOVF	_MACMemCopyAsync_WriteSave_1_1, W, B
0019fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a00   6a05     clrf	0x5, 0              	CLRF	r0x05
001a02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a04   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a06   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001a08   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
                                           ;	.line	935; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a0a   513e     movf	0x3e, 0, 0x1        	MOVF	(_MACMemCopyAsync_WriteSave_1_1 + 1), W, B
001a0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a0e   6a05     clrf	0x5, 0              	CLRF	r0x05
001a10   6a05     clrf	0x5, 0              	CLRF	r0x05
001a12   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a14   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a16   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
001a18   d0c5     bra	0x1ba4               	BRA	_00354_DS_
                                           _00352_DS_:
                                           ;	.line	940; TCPIP_Stack/ETH97J60.c	if(UpdateWritePointer)
001a1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a1c   e023     bz	0x1a64                	BZ	_00336_DS_
                                           ;	.line	942; TCPIP_Stack/ETH97J60.c	WriteSave.Val = destAddr + len;
001a1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a20   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
001a22   2537     addwf	0x37, 0, 0x1       	ADDWF	_MACMemCopyAsync_destAddr_1_1, W, B
001a24   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a28   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
001a2a   2138     addwfc	0x38, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001a2c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a30   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001a32   6f3d     movwf	0x3d, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001a34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a36   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
001a38   6f3e     movwf	0x3e, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
                                           ;	.line	943; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
001a3a   ca3d     movff	0xa3d, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a3c   ffe8
001a3e   ca3e     movff	0xa3e, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a40   ffe8
001a42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a44   6e05     movwf	0x5, 0             	MOVWF	r0x05
001a46   6a06     clrf	0x6, 0              	CLRF	r0x06
001a48   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a4a   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a4c   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	944; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a4e   ca3d     movff	0xa3d, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a50   ffe8
001a52   ca3e     movff	0xa3e, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a54   ffe8
001a56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a58   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5c   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a60   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a62   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           _00336_DS_:
001a64   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	946; TCPIP_Stack/ETH97J60.c	len += sourceAddr - 1;
001a66   5139     movf	0x39, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a68   0fff     addlw	0xff               	ADDLW	0xff
001a6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a6c   0eff     movlw	0xff               	MOVLW	0xff
001a6e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001a70   213a     addwfc	0x3a, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a72   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a76   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a7a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           _00337_DS_:
                                           ;	.line	947; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);
001a7c   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001a7e   d7fe     bra	0x1a7c               	BRA	_00337_DS_
001a80   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	948; TCPIP_Stack/ETH97J60.c	EDMASTL = LOW(sourceAddr);
001a82   5139     movf	0x39, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a84   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a86   6a04     clrf	0x4, 0              	CLRF	r0x04
001a88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a8a   010e     movlb	0xe                	BANKSEL	_EDMASTL
001a8c   6ff0     movwf	0xf0, 0x1          	MOVWF	_EDMASTL, B
001a8e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	949; TCPIP_Stack/ETH97J60.c	EDMASTH = HIGH(sourceAddr);
001a90   513a     movf	0x3a, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a92   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a94   6a04     clrf	0x4, 0              	CLRF	r0x04
001a96   6a04     clrf	0x4, 0              	CLRF	r0x04
001a98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a9a   010e     movlb	0xe                	BANKSEL	_EDMASTH
001a9c   6ff1     movwf	0xf1, 0x1          	MOVWF	_EDMASTH, B
001a9e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	950; TCPIP_Stack/ETH97J60.c	EDMADSTL = LOW(destAddr);
001aa0   5137     movf	0x37, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
001aa2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001aa4   6a04     clrf	0x4, 0              	CLRF	r0x04
001aa6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001aa8   010e     movlb	0xe                	BANKSEL	_EDMADSTL
001aaa   6ff4     movwf	0xf4, 0x1          	MOVWF	_EDMADSTL, B
001aac   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	951; TCPIP_Stack/ETH97J60.c	EDMADSTH = HIGH(destAddr);
001aae   5138     movf	0x38, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001ab0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001ab2   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab4   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ab8   010e     movlb	0xe                	BANKSEL	_EDMADSTH
001aba   6ff5     movwf	0xf5, 0x1          	MOVWF	_EDMADSTH, B
                                           ;	.line	952; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001abc   ca39     movff	0xa39, 0x2         	MOVFF	_MACMemCopyAsync_sourceAddr_1_1, r0x02
001abe   f002
001ac0   ca3a     movff	0xa3a, 0x4         	MOVFF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), r0x04
001ac2   f004
001ac4   6a05     clrf	0x5, 0              	CLRF	r0x05
001ac6   6a06     clrf	0x6, 0              	CLRF	r0x06
001ac8   0e00     movlw	0                  	MOVLW	0x00
001aca   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001acc   e108     bnz	0x1ade               	BNZ	_00394_DS_
001ace   0e00     movlw	0                  	MOVLW	0x00
001ad0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001ad2   e105     bnz	0x1ade               	BNZ	_00394_DS_
001ad4   0e1a     movlw	0x1a               	MOVLW	0x1a
001ad6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001ad8   e102     bnz	0x1ade               	BNZ	_00394_DS_
001ada   0e0a     movlw	0xa                	MOVLW	0x0a
001adc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00394_DS_:
001ade   6a02     clrf	0x2, 0              	CLRF	r0x02
001ae0   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001ae2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ae4   e11e     bnz	0x1b22               	BNZ	_00341_DS_
001ae6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001ae8   f004
001aea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001aec   f005
001aee   6a06     clrf	0x6, 0              	CLRF	r0x06
001af0   6a07     clrf	0x7, 0              	CLRF	r0x07
001af2   0e00     movlw	0                  	MOVLW	0x00
001af4   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
001af6   e108     bnz	0x1b08               	BNZ	_00395_DS_
001af8   0e00     movlw	0                  	MOVLW	0x00
001afa   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001afc   e105     bnz	0x1b08               	BNZ	_00395_DS_
001afe   0e1a     movlw	0x1a               	MOVLW	0x1a
001b00   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b02   e102     bnz	0x1b08               	BNZ	_00395_DS_
001b04   0e0a     movlw	0xa                	MOVLW	0x0a
001b06   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00395_DS_:
001b08   e30c     bnc	0x1b22               	BNC	_00341_DS_
                                           ;	.line	953; TCPIP_Stack/ETH97J60.c	len -= RXSIZE; //it is a circular buffer
001b0a   0ef6     movlw	0xf6               	MOVLW	0xf6
001b0c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001b0e   0ee5     movlw	0xe5               	MOVLW	0xe5
001b10   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b12   0eff     movlw	0xff               	MOVLW	0xff
001b14   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001b16   0eff     movlw	0xff               	MOVLW	0xff
001b18   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001b1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b1c   6e00     movwf	0, 0               	MOVWF	r0x00
001b1e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b20   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00341_DS_:
                                           ;	.line	954; TCPIP_Stack/ETH97J60.c	EDMANDL = LOW(len);
001b22   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b24   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b26   6a05     clrf	0x5, 0              	CLRF	r0x05
001b28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b2a   010e     movlb	0xe                	BANKSEL	_EDMANDL
001b2c   6ff2     movwf	0xf2, 0x1          	MOVWF	_EDMANDL, B
                                           ;	.line	955; TCPIP_Stack/ETH97J60.c	EDMANDH = HIGH(len);
001b2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b30   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b32   6a05     clrf	0x5, 0              	CLRF	r0x05
001b34   6a05     clrf	0x5, 0              	CLRF	r0x05
001b36   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b38   010e     movlb	0xe                	BANKSEL	_EDMANDH
001b3a   6ff3     movwf	0xf3, 0x1          	MOVWF	_EDMANDH, B
                                           ;	.line	956; TCPIP_Stack/ETH97J60.c	ECON1bits.CSUMEN = 0;
001b3c   98d2     bcf	0xd2, 0x4, 0         	BCF	_ECON1bits, 4
                                           ;	.line	957; TCPIP_Stack/ETH97J60.c	ECON1bits.DMAST = 1;
001b3e   8ad2     bsf	0xd2, 0x5, 0         	BSF	_ECON1bits, 5
                                           _00343_DS_:
                                           ;	.line	958; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);	// DMA requires that you must not 
001b40   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001b42   d7fe     bra	0x1b40               	BRA	_00343_DS_
                                           ;	.line	961; TCPIP_Stack/ETH97J60.c	if(UpdateReadPointer)
001b44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b46   e02e     bz	0x1ba4                	BZ	_00354_DS_
                                           ;	.line	963; TCPIP_Stack/ETH97J60.c	len++;
001b48   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001b4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001b4c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           ;	.line	964; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b50   e11e     bnz	0x1b8e               	BNZ	_00347_DS_
001b52   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001b54   f002
001b56   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
001b58   f003
001b5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001b5c   6a05     clrf	0x5, 0              	CLRF	r0x05
001b5e   0e00     movlw	0                  	MOVLW	0x00
001b60   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b62   e108     bnz	0x1b74               	BNZ	_00398_DS_
001b64   0e00     movlw	0                  	MOVLW	0x00
001b66   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001b68   e105     bnz	0x1b74               	BNZ	_00398_DS_
001b6a   0e1a     movlw	0x1a               	MOVLW	0x1a
001b6c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001b6e   e102     bnz	0x1b74               	BNZ	_00398_DS_
001b70   0e0a     movlw	0xa                	MOVLW	0x0a
001b72   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00398_DS_:
001b74   e30c     bnc	0x1b8e               	BNC	_00347_DS_
                                           ;	.line	965; TCPIP_Stack/ETH97J60.c	len -= RXSIZE;
001b76   0ef6     movlw	0xf6               	MOVLW	0xf6
001b78   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001b7a   0ee5     movlw	0xe5               	MOVLW	0xe5
001b7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b7e   0eff     movlw	0xff               	MOVLW	0xff
001b80   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b82   0eff     movlw	0xff               	MOVLW	0xff
001b84   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b88   6e00     movwf	0, 0               	MOVWF	r0x00
001b8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00347_DS_:
                                           ;	.line	966; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(len);
001b8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b92   6a03     clrf	0x3, 0              	CLRF	r0x03
001b94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b96   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	967; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(len);
001b98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b9a   6e00     movwf	0, 0               	MOVWF	r0x00
001b9c   6a01     clrf	0x1, 0              	CLRF	r0x01
001b9e   6a01     clrf	0x1, 0              	CLRF	r0x01
001ba0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ba2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00354_DS_:
001ba4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ba6   f007
001ba8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001baa   f006
001bac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001bae   f005
001bb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001bb2   f004
001bb4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001bb6   f003
001bb8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001bba   f002
001bbc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001bbe   f001
001bc0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001bc2   f000
001bc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001bc6   ffd9
001bc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__CalcIPBufferChecksum	code
                                           _CalcIPBufferChecksum:
                                           ;	.line	824; TCPIP_Stack/ETH97J60.c	WORD CalcIPBufferChecksum(WORD len)
000df0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df2   ffe5
000df4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df6   ffd9
000df8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dfa   ffe5
000dfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000dfe   ffe5
000e00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e02   ffe5
000e04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e06   ffe5
000e08   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e0a   ffe5
000e0c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e0e   ffe5
000e10   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e12   ffe5
000e14   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e16   ffe5
000e18   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e1a   ffe5
000e1c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e1e   ffe5
000e20   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e22   ffe5
000e24   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e26   ffe5
000e28   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e2a   ffe5
000e2c   0e02     movlw	0x2                	MOVLW	0x02
000e2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e30   f000
000e32   0e03     movlw	0x3                	MOVLW	0x03
000e34   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e36   f001
000e38   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	827; TCPIP_Stack/ETH97J60.c	DWORD_VAL Checksum = {0x00000000ul};
000e3a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e3c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e3e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e40   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e42   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e44   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e46   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e48   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e4a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e4c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e4e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e50   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e52   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e54   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e56   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e58   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e5a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e5c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e5e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e60   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e62   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e64   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e66   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e68   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e6a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e6c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e6e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e70   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e72   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e74   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e76   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e78   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e7a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e7c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e7e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e80   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e82   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e84   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e86   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e88   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e8a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e8c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e8e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e90   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e92   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e94   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e96   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e98   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e9a   6be2     clrf	0xe2, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e9c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e9e   6be3     clrf	0xe3, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000ea0   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea2   91e2     bcf	0xe2, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000ea4   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea6   93e2     bcf	0xe2, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000ea8   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eaa   95e2     bcf	0xe2, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000eac   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eae   97e2     bcf	0xe2, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000eb0   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb2   99e2     bcf	0xe2, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000eb4   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb6   9be2     bcf	0xe2, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000eb8   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eba   9de2     bcf	0xe2, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000ebc   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ebe   9fe2     bcf	0xe2, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000ec0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec2   91e3     bcf	0xe3, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000ec4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec6   93e3     bcf	0xe3, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000ec8   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eca   95e3     bcf	0xe3, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000ecc   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ece   97e3     bcf	0xe3, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000ed0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed2   99e3     bcf	0xe3, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000ed4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed6   9be3     bcf	0xe3, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000ed8   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eda   9de3     bcf	0xe3, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000edc   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ede   9fe3     bcf	0xe3, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000ee0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ee2   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ee4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ee6   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ee8   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000eea   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000eec   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000eee   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ef2   6be4     clrf	0xe4, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ef4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ef6   6be5     clrf	0xe5, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef8   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efa   91e4     bcf	0xe4, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000efc   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efe   93e4     bcf	0xe4, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f00   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f02   95e4     bcf	0xe4, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f04   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f06   97e4     bcf	0xe4, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f08   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0a   99e4     bcf	0xe4, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f0c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0e   9be4     bcf	0xe4, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f10   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f12   9de4     bcf	0xe4, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f14   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f16   9fe4     bcf	0xe4, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f18   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1a   91e5     bcf	0xe5, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f1c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1e   93e5     bcf	0xe5, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000f20   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f22   95e5     bcf	0xe5, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000f24   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f26   97e5     bcf	0xe5, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000f28   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2a   99e5     bcf	0xe5, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000f2c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2e   9be5     bcf	0xe5, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000f30   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f32   9de5     bcf	0xe5, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000f34   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f36   9fe5     bcf	0xe5, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
000f38   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3a   91e2     bcf	0xe2, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000f3c   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3e   93e2     bcf	0xe2, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000f40   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f42   95e2     bcf	0xe2, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000f44   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f46   97e2     bcf	0xe2, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000f48   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4a   99e2     bcf	0xe2, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000f4c   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4e   9be2     bcf	0xe2, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000f50   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f52   9de2     bcf	0xe2, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000f54   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f56   9fe2     bcf	0xe2, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000f58   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5a   91e3     bcf	0xe3, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000f5c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5e   93e3     bcf	0xe3, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000f60   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f62   95e3     bcf	0xe3, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000f64   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f66   97e3     bcf	0xe3, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000f68   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6a   99e3     bcf	0xe3, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000f6c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6e   9be3     bcf	0xe3, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000f70   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f72   9de3     bcf	0xe3, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000f74   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f76   9fe3     bcf	0xe3, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000f78   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7a   91e4     bcf	0xe4, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000f7c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7e   93e4     bcf	0xe4, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f80   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f82   95e4     bcf	0xe4, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f84   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f86   97e4     bcf	0xe4, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f88   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8a   99e4     bcf	0xe4, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f8c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8e   9be4     bcf	0xe4, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f90   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f92   9de4     bcf	0xe4, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f94   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f96   9fe4     bcf	0xe4, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f98   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9a   91e5     bcf	0xe5, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f9c   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9e   93e5     bcf	0xe5, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000fa0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa2   95e5     bcf	0xe5, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000fa4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa6   97e5     bcf	0xe5, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000fa8   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000faa   99e5     bcf	0xe5, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000fac   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fae   9be5     bcf	0xe5, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000fb0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb2   9de5     bcf	0xe5, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000fb4   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb6   9fe5     bcf	0xe5, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
                                           ;	.line	833; TCPIP_Stack/ETH97J60.c	Start = ((WORD)ERDPTH)<<8|ERDPTL;
000fb8   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
000fba   f002
000fbc   6a03     clrf	0x3, 0              	CLRF	r0x03
000fbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fc0   6e05     movwf	0x5, 0             	MOVWF	r0x05
000fc2   6a04     clrf	0x4, 0              	CLRF	r0x04
000fc4   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
000fc6   f002
000fc8   6a03     clrf	0x3, 0              	CLRF	r0x03
000fca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fcc   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000fce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fd0   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
                                           _00305_DS_:
                                           ;	.line	835; TCPIP_Stack/ETH97J60.c	while(len)
000fd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fd4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000fd6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000fd8   d07d     bra	0x10d4               	BRA	_00307_DS_
                                           ;	.line	839; TCPIP_Stack/ETH97J60.c	ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
000fda   0e00     movlw	0                  	MOVLW	0x00
000fdc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000fde   e102     bnz	0xfe4                	BNZ	_00319_DS_
000fe0   0e15     movlw	0x15               	MOVLW	0x15
000fe2   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00319_DS_:
000fe4   e304     bnc	0xfee                	BNC	_00310_DS_
000fe6   0e14     movlw	0x14               	MOVLW	0x14
000fe8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000fea   6a05     clrf	0x5, 0              	CLRF	r0x05
000fec   d004     bra	0xff6                	BRA	_00311_DS_
                                           _00310_DS_:
000fee   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ff0   f004
000ff2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ff4   f005
                                           _00311_DS_:
000ff6   c004     movff	0x4, 0xa35         	MOVFF	r0x04, _CalcIPBufferChecksum_ChunkLen_1_1
000ff8   fa35
000ffa   c005     movff	0x5, 0xa36         	MOVFF	r0x05, (_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
000ffc   fa36
                                           ;	.line	840; TCPIP_Stack/ETH97J60.c	MACGetArray(DataBuffer, ChunkLen);
000ffe   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001000   6e07     movwf	0x7, 0             	MOVWF	r0x07
001002   0e50     movlw	0x50               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001004   6e06     movwf	0x6, 0             	MOVWF	r0x06
001006   0e80     movlw	0x80               	MOVLW	0x80
001008   6e08     movwf	0x8, 0             	MOVWF	r0x08
00100a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00101c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101e   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
001020   f02f
001022   0e05     movlw	0x5                	MOVLW	0x05
001024   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	842; TCPIP_Stack/ETH97J60.c	len -= ChunkLen;
001026   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001028   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00102a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00102c   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
00102e   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	845; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&ChunkLen)->bits.b0)
001030   a135     btfss	0x35, 0, 0x1       	BTFSS	_CalcIPBufferChecksum_ChunkLen_1_1, 0, B
001032   d013     bra	0x105a               	BRA	_00301_DS_
                                           ;	.line	847; TCPIP_Stack/ETH97J60.c	DataBuffer[ChunkLen] = 0x00;
001034   0e50     movlw	0x50               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001036   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
001038   2535     addwf	0x35, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_ChunkLen_1_1, W, B
00103a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00103c   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00103e   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001040   2136     addwfc	0x36, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), W, B
001042   6e05     movwf	0x5, 0             	MOVWF	r0x05
001044   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001046   ffe9
001048   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00104a   ffea
00104c   0e00     movlw	0                  	MOVLW	0x00
00104e   6eef     movwf	0xef, 0            	MOVWF	INDF0
001050   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	848; TCPIP_Stack/ETH97J60.c	ChunkLen++;
001052   2b35     incf	0x35, 0x1, 0x1      	INCF	_CalcIPBufferChecksum_ChunkLen_1_1, F, B
001054   e302     bnc	0x105a               	BNC	_10492_DS_
001056   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001058   2b36     incf	0x36, 0x1, 0x1      	INCF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), F, B
                                           _10492_DS_:
                                           _00301_DS_:
                                           ;	.line	852; TCPIP_Stack/ETH97J60.c	DataPtr = (WORD*)&DataBuffer[0];
00105a   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00105c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00105e   0e50     movlw	0x50               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001060   6e04     movwf	0x4, 0             	MOVWF	r0x04
001062   0e80     movlw	0x80               	MOVLW	0x80
001064   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/ETH97J60.c	while(ChunkLen)
001066   ca35     movff	0xa35, 0x7         	MOVFF	_CalcIPBufferChecksum_ChunkLen_1_1, r0x07
001068   f007
00106a   ca36     movff	0xa36, 0x8         	MOVFF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), r0x08
00106c   f008
                                           _00302_DS_:
00106e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001070   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001072   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001074   d7ae     bra	0xfd2                	BRA	_00305_DS_
                                           ;	.line	855; TCPIP_Stack/ETH97J60.c	Checksum.Val += *DataPtr++;
001076   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001078   ffe9
00107a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00107c   fff3
00107e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001080   ecb8     call	0x7770, 0           	CALL	__gptrget2
001082   f03b
001084   6e09     movwf	0x9, 0             	MOVWF	r0x09
001086   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001088   f00a
00108a   0e02     movlw	0x2                	MOVLW	0x02
00108c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00108e   0e00     movlw	0                  	MOVLW	0x00
001090   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001092   0e00     movlw	0                  	MOVLW	0x00
001094   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001096   6a0b     clrf	0xb, 0              	CLRF	r0x0b
001098   6a0c     clrf	0xc, 0              	CLRF	r0x0c
00109a   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00109c   51e2     movf	0xe2, 0, 0x1        	MOVF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00109e   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0010a0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010a2   51e3     movf	0xe3, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
0010a4   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0010a6   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010a8   51e4     movf	0xe4, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
0010aa   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0010ac   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010ae   51e5     movf	0xe5, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
0010b0   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0010b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010b4   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0010b6   6fe2     movwf	0xe2, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
0010b8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010ba   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010bc   6fe3     movwf	0xe3, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0010be   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0010c0   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010c2   6fe4     movwf	0xe4, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0010c4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0010c6   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010c8   6fe5     movwf	0xe5, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
                                           ;	.line	856; TCPIP_Stack/ETH97J60.c	ChunkLen -= 2;
0010ca   0efe     movlw	0xfe               	MOVLW	0xfe
0010cc   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0010ce   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0010d0   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
0010d2   d7cd     bra	0x106e               	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	861; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(Start);
0010d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010d6   6e00     movwf	0, 0               	MOVWF	r0x00
0010d8   6a01     clrf	0x1, 0              	CLRF	r0x01
0010da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010dc   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	862; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(Start);
0010de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0010e2   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010e8   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	865; TCPIP_Stack/ETH97J60.c	Checksum.Val = (DWORD)Checksum.w[0] + (DWORD)Checksum.w[1];
0010ea   c8e2     movff	0x8e2, 0           	MOVFF	_CalcIPBufferChecksum_Checksum_1_1, r0x00
0010ec   f000
0010ee   c8e3     movff	0x8e3, 0x1         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), r0x01
0010f0   f001
0010f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0010f4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010f6   c8e4     movff	0x8e4, 0x4         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), r0x04
0010f8   f004
0010fa   c8e5     movff	0x8e5, 0x5         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), r0x05
0010fc   f005
0010fe   6a06     clrf	0x6, 0              	CLRF	r0x06
001100   6a07     clrf	0x7, 0              	CLRF	r0x07
001102   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001104   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001106   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001108   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00110a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00110c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00110e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001110   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001112   5000     movf	0, 0, 0             	MOVF	r0x00, W
001114   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001116   6fe2     movwf	0xe2, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001118   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00111a   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00111c   6fe3     movwf	0xe3, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00111e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001120   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001122   6fe4     movwf	0xe4, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001124   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001126   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001128   6fe5     movwf	0xe5, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00112a   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
                                           ;	.line	869; TCPIP_Stack/ETH97J60.c	Checksum.w[0] += Checksum.w[1];
00112c   51e4     movf	0xe4, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
00112e   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001130   25e2     addwf	0xe2, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001132   6e00     movwf	0, 0               	MOVWF	r0x00
001134   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001136   51e5     movf	0xe5, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001138   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00113a   21e3     addwfc	0xe3, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
00113c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00113e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001140   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001142   6fe2     movwf	0xe2, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001144   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001146   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001148   6fe3     movwf	0xe3, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00114a   0108     movlb	0x8                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	872; TCPIP_Stack/ETH97J60.c	return ~Checksum.w[0];
00114c   1de2     comf	0xe2, 0, 0x1        	COMF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00114e   6e00     movwf	0, 0               	MOVWF	r0x00
001150   0108     movlb	0x8                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001152   1de3     comf	0xe3, 0, 0x1        	COMF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001154   6e01     movwf	0x1, 0             	MOVWF	r0x01
001156   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001158   fff3
00115a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00115c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00115e   f00c
001160   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001162   f00b
001164   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001166   f00a
001168   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00116a   f009
00116c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00116e   f008
001170   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001172   f007
001174   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001176   f006
001178   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00117a   f005
00117c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00117e   f004
001180   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001182   f003
001184   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001186   f002
001188   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00118a   f001
00118c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00118e   f000
001190   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001192   ffd9
001194   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACCalcRxChecksum	code
                                           _MACCalcRxChecksum:
                                           ;	.line	699; TCPIP_Stack/ETH97J60.c	WORD MACCalcRxChecksum(WORD offset, WORD len)
005458   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00545a   ffe5
00545c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00545e   ffd9
005460   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005462   ffe5
005464   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005466   ffe5
005468   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00546a   ffe5
00546c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00546e   ffe5
005470   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005472   ffe5
005474   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005476   ffe5
005478   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00547a   ffe5
00547c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00547e   ffe5
005480   0e02     movlw	0x2                	MOVLW	0x02
005482   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005484   f000
005486   0e03     movlw	0x3                	MOVLW	0x03
005488   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00548a   f001
00548c   0e04     movlw	0x4                	MOVLW	0x04
00548e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005490   f002
005492   0e05     movlw	0x5                	MOVLW	0x05
005494   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005496   f003
005498   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	705; TCPIP_Stack/ETH97J60.c	temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
00549a   5127     movf	0x27, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
00549c   0f14     addlw	0x14               	ADDLW	0x14
00549e   6e04     movwf	0x4, 0             	MOVWF	r0x04
0054a0   0e00     movlw	0                  	MOVLW	0x00
0054a2   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0054a4   2128     addwfc	0x28, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
0054a6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0054a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0054aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0054ac   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0054ae   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	706; TCPIP_Stack/ETH97J60.c	if(temp > RXSTOP)		// Adjust value if a wrap is needed
0054b0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0054b2   f004
0054b4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0054b6   f005
0054b8   6a06     clrf	0x6, 0              	CLRF	r0x06
0054ba   6a07     clrf	0x7, 0              	CLRF	r0x07
0054bc   0e00     movlw	0                  	MOVLW	0x00
0054be   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0054c0   e108     bnz	0x54d2               	BNZ	_00295_DS_
0054c2   0e00     movlw	0                  	MOVLW	0x00
0054c4   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0054c6   e105     bnz	0x54d2               	BNZ	_00295_DS_
0054c8   0e1a     movlw	0x1a               	MOVLW	0x1a
0054ca   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0054cc   e102     bnz	0x54d2               	BNZ	_00295_DS_
0054ce   0e0a     movlw	0xa                	MOVLW	0x0a
0054d0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00295_DS_:
0054d2   e30c     bnc	0x54ec               	BNC	_00291_DS_
                                           ;	.line	708; TCPIP_Stack/ETH97J60.c	temp -= RXSIZE;
0054d4   0ef6     movlw	0xf6               	MOVLW	0xf6
0054d6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0054d8   0ee5     movlw	0xe5               	MOVLW	0xe5
0054da   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0054dc   0eff     movlw	0xff               	MOVLW	0xff
0054de   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0054e0   0eff     movlw	0xff               	MOVLW	0xff
0054e2   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0054e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0054e6   6e00     movwf	0, 0               	MOVWF	r0x00
0054e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0054ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00291_DS_:
                                           ;	.line	711; TCPIP_Stack/ETH97J60.c	RDSave = ((WORD)ERDPTH)<<8|ERDPTL;
0054ec   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
0054ee   f004
0054f0   6a05     clrf	0x5, 0              	CLRF	r0x05
0054f2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0054f4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0054f6   6a06     clrf	0x6, 0              	CLRF	r0x06
0054f8   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
0054fa   f004
0054fc   6a05     clrf	0x5, 0              	CLRF	r0x05
0054fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005500   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
005502   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005504   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
                                           ;	.line	712; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(temp);
005506   5000     movf	0, 0, 0             	MOVF	r0x00, W
005508   6e04     movwf	0x4, 0             	MOVWF	r0x04
00550a   6a05     clrf	0x5, 0              	CLRF	r0x05
00550c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00550e   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	713; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(temp);
005510   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005512   6e04     movwf	0x4, 0             	MOVWF	r0x04
005514   6a05     clrf	0x5, 0              	CLRF	r0x05
005516   6a05     clrf	0x5, 0              	CLRF	r0x05
005518   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00551a   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	714; TCPIP_Stack/ETH97J60.c	temp = CalcIPBufferChecksum(len);
00551c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00551e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005520   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005522   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005524   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
005526   f006
005528   6e00     movwf	0, 0               	MOVWF	r0x00
00552a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00552c   f001
00552e   0e02     movlw	0x2                	MOVLW	0x02
005530   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(RDSave);
005532   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005534   6e02     movwf	0x2, 0             	MOVWF	r0x02
005536   6a03     clrf	0x3, 0              	CLRF	r0x03
005538   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00553a   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	716; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(RDSave);
00553c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00553e   6e06     movwf	0x6, 0             	MOVWF	r0x06
005540   6a07     clrf	0x7, 0              	CLRF	r0x07
005542   6a07     clrf	0x7, 0              	CLRF	r0x07
005544   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005546   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	718; TCPIP_Stack/ETH97J60.c	return temp;
005548   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00554a   fff3
00554c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00554e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005550   f007
005552   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005554   f006
005556   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005558   f005
00555a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00555c   f004
00555e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005560   f003
005562   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005564   f002
005566   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005568   f001
00556a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00556c   f000
00556e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005570   ffd9
005572   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtr	code
                                           _MACSetReadPtr:
                                           ;	.line	669; TCPIP_Stack/ETH97J60.c	WORD MACSetReadPtr(WORD address)
006e04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e06   ffe5
006e08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e0a   ffd9
006e0c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006e0e   ffe5
006e10   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006e12   ffe5
006e14   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006e16   ffe5
006e18   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006e1a   ffe5
006e1c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006e1e   ffe5
006e20   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006e22   ffe5
006e24   0e02     movlw	0x2                	MOVLW	0x02
006e26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006e28   f000
006e2a   0e03     movlw	0x3                	MOVLW	0x03
006e2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006e2e   f001
                                           ;	.line	673; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)ERDPTH)<<8|ERDPTL;
006e30   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
006e32   f002
006e34   6a03     clrf	0x3, 0              	CLRF	r0x03
006e36   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e38   6e05     movwf	0x5, 0             	MOVWF	r0x05
006e3a   6a04     clrf	0x4, 0              	CLRF	r0x04
006e3c   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
006e3e   f002
006e40   6a03     clrf	0x3, 0              	CLRF	r0x03
006e42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e44   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
006e46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006e48   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	674; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(address);
006e4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e4c   6e02     movwf	0x2, 0             	MOVWF	r0x02
006e4e   6a03     clrf	0x3, 0              	CLRF	r0x03
006e50   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e52   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	675; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(address);
006e54   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006e56   6e00     movwf	0, 0               	MOVWF	r0x00
006e58   6a01     clrf	0x1, 0              	CLRF	r0x01
006e5a   6a01     clrf	0x1, 0              	CLRF	r0x01
006e5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e5e   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	676; TCPIP_Stack/ETH97J60.c	return oldVal;
006e60   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
006e62   fff3
006e64   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006e66   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006e68   f005
006e6a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006e6c   f004
006e6e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006e70   f003
006e72   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006e74   f002
006e76   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006e78   f001
006e7a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006e7c   f000
006e7e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e80   ffd9
006e82   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetWritePtr	code
                                           _MACSetWritePtr:
                                           ;	.line	642; TCPIP_Stack/ETH97J60.c	WORD MACSetWritePtr(WORD address)
006d80   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006d82   ffe5
006d84   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d86   ffd9
006d88   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006d8a   ffe5
006d8c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006d8e   ffe5
006d90   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006d92   ffe5
006d94   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006d96   ffe5
006d98   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006d9a   ffe5
006d9c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006d9e   ffe5
006da0   0e02     movlw	0x2                	MOVLW	0x02
006da2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006da4   f000
006da6   0e03     movlw	0x3                	MOVLW	0x03
006da8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006daa   f001
                                           ;	.line	646; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)EWRPTH)<<8|EWRPTL;
006dac   cee3     movff	0xee3, 0x2         	MOVFF	_EWRPTH, r0x02
006dae   f002
006db0   6a03     clrf	0x3, 0              	CLRF	r0x03
006db2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006db4   6e05     movwf	0x5, 0             	MOVWF	r0x05
006db6   6a04     clrf	0x4, 0              	CLRF	r0x04
006db8   cee2     movff	0xee2, 0x2         	MOVFF	_EWRPTL, r0x02
006dba   f002
006dbc   6a03     clrf	0x3, 0              	CLRF	r0x03
006dbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006dc0   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
006dc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006dc4   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	648; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(address);
006dc6   5000     movf	0, 0, 0             	MOVF	r0x00, W
006dc8   6e02     movwf	0x2, 0             	MOVWF	r0x02
006dca   6a03     clrf	0x3, 0              	CLRF	r0x03
006dcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006dce   010e     movlb	0xe                	BANKSEL	_EWRPTL
006dd0   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	649; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(address);
006dd2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006dd4   6e00     movwf	0, 0               	MOVWF	r0x00
006dd6   6a01     clrf	0x1, 0              	CLRF	r0x01
006dd8   6a01     clrf	0x1, 0              	CLRF	r0x01
006dda   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ddc   010e     movlb	0xe                	BANKSEL	_EWRPTH
006dde   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	650; TCPIP_Stack/ETH97J60.c	return oldVal;
006de0   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
006de2   fff3
006de4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006de6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006de8   f005
006dea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006dec   f004
006dee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006df0   f003
006df2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006df4   f002
006df6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006df8   f001
006dfa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006dfc   f000
006dfe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e00   ffd9
006e02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtrInRx	code
                                           _MACSetReadPtrInRx:
                                           ;	.line	609; TCPIP_Stack/ETH97J60.c	void MACSetReadPtrInRx(WORD offset)
0064aa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0064ac   ffe5
0064ae   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0064b0   ffd9
0064b2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0064b4   ffe5
0064b6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0064b8   ffe5
0064ba   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0064bc   ffe5
0064be   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0064c0   ffe5
0064c2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0064c4   ffe5
0064c6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0064c8   ffe5
0064ca   0e02     movlw	0x2                	MOVLW	0x02
0064cc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0064ce   f000
0064d0   0e03     movlw	0x3                	MOVLW	0x03
0064d2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0064d4   f001
0064d6   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	615; TCPIP_Stack/ETH97J60.c	ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
0064d8   5127     movf	0x27, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0064da   0f14     addlw	0x14               	ADDLW	0x14
0064dc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0064de   0e00     movlw	0                  	MOVLW	0x00
0064e0   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0064e2   2128     addwfc	0x28, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
0064e4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0064e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064e8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0064ea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0064ec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0064ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0064f0   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
0064f2   6f33     movwf	0x33, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
0064f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0064f6   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
0064f8   6f34     movwf	0x34, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           ;	.line	618; TCPIP_Stack/ETH97J60.c	if(ReadPT.Val > RXSTOP)  ReadPT.Val -= RXSIZE;
0064fa   ca33     movff	0xa33, 0x2         	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, r0x02
0064fc   f002
0064fe   ca34     movff	0xa34, 0x3         	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), r0x03
006500   f003
006502   6a04     clrf	0x4, 0              	CLRF	r0x04
006504   6a05     clrf	0x5, 0              	CLRF	r0x05
006506   0e00     movlw	0                  	MOVLW	0x00
006508   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00650a   e108     bnz	0x651c               	BNZ	_00275_DS_
00650c   0e00     movlw	0                  	MOVLW	0x00
00650e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006510   e105     bnz	0x651c               	BNZ	_00275_DS_
006512   0e1a     movlw	0x1a               	MOVLW	0x1a
006514   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006516   e102     bnz	0x651c               	BNZ	_00275_DS_
006518   0e0a     movlw	0xa                	MOVLW	0x0a
00651a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00275_DS_:
00651c   e310     bnc	0x653e               	BNC	_00271_DS_
00651e   6a00     clrf	0, 0                	CLRF	r0x00
006520   6a01     clrf	0x1, 0              	CLRF	r0x01
006522   0ef6     movlw	0xf6               	MOVLW	0xf6
006524   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
006526   0ee5     movlw	0xe5               	MOVLW	0xe5
006528   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00652a   0eff     movlw	0xff               	MOVLW	0xff
00652c   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
00652e   0eff     movlw	0xff               	MOVLW	0xff
006530   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006532   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006534   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
006536   6f33     movwf	0x33, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
006538   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00653a   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00653c   6f34     movwf	0x34, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           _00271_DS_:
                                           ;	.line	621; TCPIP_Stack/ETH97J60.c	ERDPTL = ReadPT.v[0];
00653e   ca33     movff	0xa33, 0xf7a       	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, _ERDPTL
006540   ff7a
                                           ;	.line	622; TCPIP_Stack/ETH97J60.c	ERDPTH = ReadPT.v[1];
006542   ca34     movff	0xa34, 0xf7b       	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), _ERDPTH
006544   ff7b
006546   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006548   f005
00654a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00654c   f004
00654e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006550   f003
006552   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006554   f002
006556   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006558   f001
00655a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00655c   f000
00655e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006560   ffd9
006562   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACFlush	code
                                           _MACFlush:
                                           ;	.line	563; TCPIP_Stack/ETH97J60.c	void MACFlush(void)
0070d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0070da   ffe5
0070dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0070de   ffd9
0070e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0070e2   ffe5
0070e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0070e6   ffe5
0070e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0070ea   ffe5
0070ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0070ee   ffe5
                                           ;	.line	569; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 1;
0070f0   8ed2     bsf	0xd2, 0x7, 0         	BSF	_ECON1bits, 7
                                           ;	.line	570; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 0;
0070f2   9ed2     bcf	0xd2, 0x7, 0         	BCF	_ECON1bits, 7
                                           ;	.line	574; TCPIP_Stack/ETH97J60.c	{volatile BYTE i = 8; while(i--);}
0070f4   0e08     movlw	0x8                	MOVLW	0x08
0070f6   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
0070f8   6f5f     movwf	0x5f, 0x1          	MOVWF	_MACFlush_i_2_2, B
                                           _00262_DS_:
0070fa   ca5f     movff	0xa5f, 0           	MOVFF	_MACFlush_i_2_2, r0x00
0070fc   f000
0070fe   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
007100   075f     decf	0x5f, 0x1, 0x1      	DECF	_MACFlush_i_2_2, F, B
007102   5000     movf	0, 0, 0             	MOVF	r0x00, W
007104   e1fa     bnz	0x70fa               	BNZ	_00262_DS_
                                           ;	.line	575; TCPIP_Stack/ETH97J60.c	EIRbits.TXERIF = 0;
007106   9260     bcf	0x60, 0x1, 0         	BCF	_EIRbits, 1
                                           ;	.line	582; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 1;
007108   86d2     bsf	0xd2, 0x3, 0         	BSF	_ECON1bits, 3
                                           ;	.line	583; TCPIP_Stack/ETH97J60.c	wTXWatchdog = TickGet();
00710a   ec20     call	0x7840, 0           	CALL	_TickGet
00710c   f03c
00710e   6e00     movwf	0, 0               	MOVWF	r0x00
007110   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007112   f001
007114   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
007116   f002
007118   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00711a   f003
00711c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00711e   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
007120   6f29     movwf	0x29, 0x1          	MOVWF	_wTXWatchdog, B
007122   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007124   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
007126   6f2a     movwf	0x2a, 0x1          	MOVWF	(_wTXWatchdog + 1), B
007128   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00712a   f003
00712c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00712e   f002
007130   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007132   f001
007134   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007136   f000
007138   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00713a   ffd9
00713c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutHeader	code
                                           _MACPutHeader:
                                           ;	.line	515; TCPIP_Stack/ETH97J60.c	void MACPutHeader(MAC_ADDR *remote, BYTE type, WORD dataLen)
004e5e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004e60   ffe5
004e62   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004e64   ffd9
004e66   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004e68   ffe5
004e6a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004e6c   ffe5
004e6e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004e70   ffe5
004e72   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004e74   ffe5
004e76   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004e78   ffe5
004e7a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004e7c   ffe5
004e7e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004e80   ffe5
004e82   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004e84   ffe5
004e86   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004e88   ffe5
004e8a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004e8c   ffe5
004e8e   0e02     movlw	0x2                	MOVLW	0x02
004e90   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004e92   f000
004e94   0e03     movlw	0x3                	MOVLW	0x03
004e96   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004e98   f001
004e9a   0e04     movlw	0x4                	MOVLW	0x04
004e9c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004e9e   f002
004ea0   0e05     movlw	0x5                	MOVLW	0x05
004ea2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004ea4   f003
004ea6   0e06     movlw	0x6                	MOVLW	0x06
004ea8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004eaa   f004
004eac   0e07     movlw	0x7                	MOVLW	0x07
004eae   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004eb0   f005
                                           ;	.line	518; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART + 1);
004eb2   0e0b     movlw	0xb                	MOVLW	0x0b
004eb4   010e     movlb	0xe                	BANKSEL	_EWRPTL
004eb6   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	519; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART + 1);
004eb8   0e1a     movlw	0x1a               	MOVLW	0x1a
004eba   010e     movlb	0xe                	BANKSEL	_EWRPTH
004ebc   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	522; TCPIP_Stack/ETH97J60.c	dataLen += (WORD)sizeof(ETHER_HEADER) + TXSTART;
004ebe   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
004ec0   f006
004ec2   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
004ec4   f007
004ec6   6a08     clrf	0x8, 0              	CLRF	r0x08
004ec8   6a09     clrf	0x9, 0              	CLRF	r0x09
004eca   0e18     movlw	0x18               	MOVLW	0x18
004ecc   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004ece   0e1a     movlw	0x1a               	MOVLW	0x1a
004ed0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
004ed2   0e00     movlw	0                  	MOVLW	0x00
004ed4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
004ed6   0e00     movlw	0                  	MOVLW	0x00
004ed8   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
004eda   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004edc   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ede   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004ee0   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	525; TCPIP_Stack/ETH97J60.c	ETXNDL = LOW(dataLen);
004ee2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004ee4   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ee6   6a07     clrf	0x7, 0              	CLRF	r0x07
004ee8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004eea   010e     movlb	0xe                	BANKSEL	_ETXNDL
004eec   6fe6     movwf	0xe6, 0x1          	MOVWF	_ETXNDL, B
                                           ;	.line	526; TCPIP_Stack/ETH97J60.c	ETXNDH = HIGH(dataLen);
004eee   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004ef0   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ef2   6a05     clrf	0x5, 0              	CLRF	r0x05
004ef4   6a05     clrf	0x5, 0              	CLRF	r0x05
004ef6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004ef8   010e     movlb	0xe                	BANKSEL	_ETXNDH
004efa   6fe7     movwf	0xe7, 0x1          	MOVWF	_ETXNDH, B
                                           ;	.line	530; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)remote, sizeof(*remote));
004efc   0e00     movlw	0                  	MOVLW	0x00
004efe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f00   0e06     movlw	0x6                	MOVLW	0x06
004f02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f04   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f08   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f10   ec41     call	0x6882, 0           	CALL	_MACPutArray
004f12   f034
004f14   0e05     movlw	0x5                	MOVLW	0x05
004f16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
004f18   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
004f1a   6e01     movwf	0x1, 0             	MOVWF	r0x01
004f1c   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
004f1e   6e00     movwf	0, 0               	MOVWF	r0x00
004f20   0e80     movlw	0x80               	MOVLW	0x80
004f22   6e02     movwf	0x2, 0             	MOVWF	r0x02
004f24   0e00     movlw	0                  	MOVLW	0x00
004f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f28   0e06     movlw	0x6                	MOVLW	0x06
004f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f30   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f34   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f38   ec41     call	0x6882, 0           	CALL	_MACPutArray
004f3a   f034
004f3c   0e05     movlw	0x5                	MOVLW	0x05
004f3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	536; TCPIP_Stack/ETH97J60.c	MACPut(0x08);
004f40   0e08     movlw	0x8                	MOVLW	0x08
004f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f44   ecdf     call	0x79be, 0           	CALL	_MACPut
004f46   f03c
004f48   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/ETH97J60.c	MACPut((type == MAC_IP) ? ETHER_IP : ETHER_ARP);
004f4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004f4c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
004f4e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
004f50   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
004f52   6a03     clrf	0x3, 0              	CLRF	r0x03
004f54   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
004f56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004f58   e003     bz	0x4f60                	BZ	_00256_DS_
004f5a   6a00     clrf	0, 0                	CLRF	r0x00
004f5c   6a01     clrf	0x1, 0              	CLRF	r0x01
004f5e   d003     bra	0x4f66               	BRA	_00257_DS_
                                           _00256_DS_:
004f60   0e06     movlw	0x6                	MOVLW	0x06
004f62   6e00     movwf	0, 0               	MOVWF	r0x00
004f64   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00257_DS_:
004f66   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f6a   ecdf     call	0x79be, 0           	CALL	_MACPut
004f6c   f03c
004f6e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
004f70   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004f72   f009
004f74   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004f76   f008
004f78   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004f7a   f007
004f7c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004f7e   f006
004f80   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004f82   f005
004f84   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004f86   f004
004f88   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004f8a   f003
004f8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004f8e   f002
004f90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004f92   f001
004f94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004f96   f000
004f98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004f9a   ffd9
004f9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetHeader	code
                                           _MACGetHeader:
                                           ;	.line	425; TCPIP_Stack/ETH97J60.c	BOOL MACGetHeader(MAC_ADDR *remote, BYTE* type)
003c04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003c06   ffe5
003c08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003c0a   ffd9
003c0c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003c0e   ffe5
003c10   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003c12   ffe5
003c14   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003c16   ffe5
003c18   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003c1a   ffe5
003c1c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c1e   ffe5
003c20   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c22   ffe5
003c24   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c26   ffe5
003c28   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c2a   ffe5
003c2c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003c2e   ffe5
003c30   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003c32   ffe5
003c34   0e02     movlw	0x2                	MOVLW	0x02
003c36   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003c38   f000
003c3a   0e03     movlw	0x3                	MOVLW	0x03
003c3c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003c3e   f001
003c40   0e04     movlw	0x4                	MOVLW	0x04
003c42   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003c44   f002
003c46   0e05     movlw	0x5                	MOVLW	0x05
003c48   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003c4a   f003
003c4c   0e06     movlw	0x6                	MOVLW	0x06
003c4e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003c50   f004
003c52   0e07     movlw	0x7                	MOVLW	0x07
003c54   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003c56   f005
003c58   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	430; TCPIP_Stack/ETH97J60.c	if(EPKTCNT == 0u)
003c5a   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
003c5c   e102     bnz	0x3c62               	BNZ	_00213_DS_
                                           ;	.line	432; TCPIP_Stack/ETH97J60.c	return FALSE;
003c5e   6ae8     clrf	0xe8, 0             	CLRF	WREG
003c60   d0c3     bra	0x3de8               	BRA	_00230_DS_
                                           _00213_DS_:
003c62   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	436; TCPIP_Stack/ETH97J60.c	if(WasDiscarded == FALSE)
003c64   515e     movf	0x5e, 0, 0x1        	MOVF	_WasDiscarded, W, B
003c66   e104     bnz	0x3c70               	BNZ	_00215_DS_
                                           ;	.line	438; TCPIP_Stack/ETH97J60.c	MACDiscardRx();
003c68   ecd7     call	0x69ae, 0           	CALL	_MACDiscardRx
003c6a   f034
                                           ;	.line	439; TCPIP_Stack/ETH97J60.c	return FALSE;
003c6c   6ae8     clrf	0xe8, 0             	CLRF	WREG
003c6e   d0bc     bra	0x3de8               	BRA	_00230_DS_
                                           _00215_DS_:
003c70   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	442; TCPIP_Stack/ETH97J60.c	CurrentPacketLocation.Val = NextPacketLocation.Val;
003c72   51fe     movf	0xfe, 0, 0x1        	MOVF	_NextPacketLocation, W, B
003c74   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
003c76   6f27     movwf	0x27, 0x1          	MOVWF	_CurrentPacketLocation, B
003c78   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
003c7a   51ff     movf	0xff, 0, 0x1        	MOVF	(_NextPacketLocation + 1), W, B
003c7c   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
003c7e   6f28     movwf	0x28, 0x1          	MOVWF	(_CurrentPacketLocation + 1), B
003c80   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
                                           ;	.line	445; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(CurrentPacketLocation.Val);
003c82   5128     movf	0x28, 0, 0x1        	MOVF	(_CurrentPacketLocation + 1), W, B
003c84   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c86   6a07     clrf	0x7, 0              	CLRF	r0x07
003c88   6a07     clrf	0x7, 0              	CLRF	r0x07
003c8a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c8c   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
003c8e   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	446; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(CurrentPacketLocation.Val);
003c90   5127     movf	0x27, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
003c92   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c94   6a07     clrf	0x7, 0              	CLRF	r0x07
003c96   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c98   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	449; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header, sizeof(header));
003c9a   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1)
003c9c   6e07     movwf	0x7, 0             	MOVWF	r0x07
003c9e   0eec     movlw	0xec               	MOVLW	LOW(_MACGetHeader_header_1_1)
003ca0   6e06     movwf	0x6, 0             	MOVWF	r0x06
003ca2   0e80     movlw	0x80               	MOVLW	0x80
003ca4   6e08     movwf	0x8, 0             	MOVWF	r0x08
003ca6   0e00     movlw	0                  	MOVLW	0x00
003ca8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003caa   0e14     movlw	0x14               	MOVLW	0x14
003cac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003cb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cb2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003cb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cb6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003cb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cba   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
003cbc   f02f
003cbe   0e05     movlw	0x5                	MOVLW	0x05
003cc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003cc2   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
                                           ;	.line	453; TCPIP_Stack/ETH97J60.c	header.Type.Val = swaps(header.Type.Val);
003cc4   51ff     movf	0xff, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 19), W, B
003cc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cc8   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003cca   51fe     movf	0xfe, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 18), W, B
003ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cce   ecb1     call	0x7362, 0           	CALL	_swaps
003cd0   f039
003cd2   6e06     movwf	0x6, 0             	MOVWF	r0x06
003cd4   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
003cd6   f007
003cd8   0e02     movlw	0x2                	MOVLW	0x02
003cda   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003cdc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003cde   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003ce0   6ffe     movwf	0xfe, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 18), B
003ce2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003ce4   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
003ce6   6fff     movwf	0xff, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 19), B
                                           ;	.line	458; TCPIP_Stack/ETH97J60.c	if(header.NextPacketPointer > RXSTOP || 
003ce8   c0ec     movff	0xec, 0x6          	MOVFF	_MACGetHeader_header_1_1, r0x06
003cea   f006
003cec   c0ed     movff	0xed, 0x7          	MOVFF	(_MACGetHeader_header_1_1 + 1), r0x07
003cee   f007
003cf0   6a08     clrf	0x8, 0              	CLRF	r0x08
003cf2   6a09     clrf	0x9, 0              	CLRF	r0x09
003cf4   0e00     movlw	0                  	MOVLW	0x00
003cf6   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
003cf8   e108     bnz	0x3d0a               	BNZ	_00244_DS_
003cfa   0e00     movlw	0                  	MOVLW	0x00
003cfc   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
003cfe   e105     bnz	0x3d0a               	BNZ	_00244_DS_
003d00   0e1a     movlw	0x1a               	MOVLW	0x1a
003d02   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
003d04   e102     bnz	0x3d0a               	BNZ	_00244_DS_
003d06   0e0a     movlw	0xa                	MOVLW	0x0a
003d08   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00244_DS_:
003d0a   e214     bc	0x3d34                	BC	_00219_DS_
003d0c   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	459; TCPIP_Stack/ETH97J60.c	((BYTE_VAL*)(&header.NextPacketPointer))->bits.b0 ||
003d0e   b1ec     btfsc	0xec, 0, 0x1       	BTFSC	_MACGetHeader_header_1_1, 0, B
003d10   d011     bra	0x3d34               	BRA	_00219_DS_
003d12   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 5)
                                           ;	.line	460; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.Zero ||
003d14   bff1     btfsc	0xf1, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 5), 7, B
003d16   d00e     bra	0x3d34               	BRA	_00219_DS_
003d18   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	461; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.CRCError ||
003d1a   b9f0     btfsc	0xf0, 0x4, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 4, B
003d1c   d00b     bra	0x3d34               	BRA	_00219_DS_
                                           ;	.line	462; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.ByteCount > 1518u ||
003d1e   0e05     movlw	0x5                	MOVLW	0x05
003d20   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 3)
003d22   5def     subwf	0xef, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 3), W, B
003d24   e103     bnz	0x3d2c               	BNZ	_00245_DS_
003d26   0eef     movlw	0xef               	MOVLW	0xef
003d28   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 2)
003d2a   5dee     subwf	0xee, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 2), W, B
                                           _00245_DS_:
003d2c   e203     bc	0x3d34                	BC	_00219_DS_
003d2e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	463; TCPIP_Stack/ETH97J60.c	!header.StatusVector.bits.ReceiveOk)
003d30   bff0     btfsc	0xf0, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 7, B
003d32   d00d     bra	0x3d4e               	BRA	_00220_DS_
                                           _00219_DS_:
                                           ;	.line	465; TCPIP_Stack/ETH97J60.c	DisplayString(0,"error reading hdr");while(1);//////////////////////ML
003d34   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
003d36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d38   0e57     movlw	0x57               	MOVLW	HIGH(__str_0)
003d3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d3c   0e94     movlw	0x94               	MOVLW	LOW(__str_0)
003d3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d40   0e00     movlw	0                  	MOVLW	0x00
003d42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d44   ec21     call	0x6242, 0           	CALL	_DisplayString
003d46   f031
003d48   0e04     movlw	0x4                	MOVLW	0x04
003d4a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00217_DS_:
003d4c   d7ff     bra	0x3d4c               	BRA	_00217_DS_
                                           _00220_DS_:
003d4e   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	470; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = header.NextPacketPointer;
003d50   51ec     movf	0xec, 0, 0x1        	MOVF	_MACGetHeader_header_1_1, W, B
003d52   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
003d54   6ffe     movwf	0xfe, 0x1          	MOVWF	_NextPacketLocation, B
003d56   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 1)
003d58   51ed     movf	0xed, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 1), W, B
003d5a   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
003d5c   6fff     movwf	0xff, 0x1          	MOVWF	(_NextPacketLocation + 1), B
                                           ;	.line	475; TCPIP_Stack/ETH97J60.c	memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote));
003d5e   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1 + 12)
003d60   6e07     movwf	0x7, 0             	MOVWF	r0x07
003d62   0ef8     movlw	0xf8               	MOVLW	LOW(_MACGetHeader_header_1_1 + 12)
003d64   6e06     movwf	0x6, 0             	MOVWF	r0x06
003d66   0e80     movlw	0x80               	MOVLW	0x80
003d68   6e08     movwf	0x8, 0             	MOVWF	r0x08
003d6a   0e00     movlw	0                  	MOVLW	0x00
003d6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d6e   0e06     movlw	0x6                	MOVLW	0x06
003d70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d72   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003d74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d76   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d7a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003d7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d7e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003d80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003d84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d86   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d8a   ec71     call	0x5ae2, 0           	CALL	_memcpy
003d8c   f02d
003d8e   0e08     movlw	0x8                	MOVLW	0x08
003d90   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	478; TCPIP_Stack/ETH97J60.c	*type = MAC_UNKNOWN;
003d92   0eff     movlw	0xff               	MOVLW	0xff
003d94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d96   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003d98   ffe9
003d9a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003d9c   fff3
003d9e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003da0   ecf3     call	0x79e6, 0           	CALL	__gptrput1
003da2   f03c
                                           ;	.line	479; TCPIP_Stack/ETH97J60.c	if( (header.Type.v[1] == 0x08u) &&
003da4   c0ff     movff	0xff, 0            	MOVFF	(_MACGetHeader_header_1_1 + 19), r0x00
003da6   f000
003da8   6a01     clrf	0x1, 0              	CLRF	r0x01
003daa   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dac   0a08     xorlw	0x8                	XORLW	0x08
003dae   e102     bnz	0x3db4               	BNZ	_00246_DS_
003db0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003db2   e001     bz	0x3db6                	BZ	_00247_DS_
                                           _00246_DS_:
003db4   d016     bra	0x3de2               	BRA	_00227_DS_
                                           _00247_DS_:
                                           ;	.line	480; TCPIP_Stack/ETH97J60.c	((header.Type.v[0] == ETHER_IP) || (header.Type.v[0] == ETHER_ARP)) )
003db6   c0fe     movff	0xfe, 0            	MOVFF	(_MACGetHeader_header_1_1 + 18), r0x00
003db8   f000
003dba   5000     movf	0, 0, 0             	MOVF	r0x00, W
003dbc   e009     bz	0x3dd0                	BZ	_00226_DS_
003dbe   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
003dc0   f001
003dc2   6a02     clrf	0x2, 0              	CLRF	r0x02
003dc4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003dc6   0a06     xorlw	0x6                	XORLW	0x06
003dc8   e102     bnz	0x3dce               	BNZ	_00248_DS_
003dca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003dcc   e001     bz	0x3dd0                	BZ	_00226_DS_
                                           _00248_DS_:
003dce   d009     bra	0x3de2               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	482; TCPIP_Stack/ETH97J60.c	*type = header.Type.v[0];
003dd0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003dd2   ffe5
003dd4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003dd6   ffe9
003dd8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003dda   fff3
003ddc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003dde   ecf3     call	0x79e6, 0           	CALL	__gptrput1
003de0   f03c
                                           _00227_DS_:
003de2   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	486; TCPIP_Stack/ETH97J60.c	WasDiscarded = FALSE;
003de4   6b5e     clrf	0x5e, 0x1           	CLRF	_WasDiscarded, B
                                           ;	.line	487; TCPIP_Stack/ETH97J60.c	return TRUE;
003de6   0e01     movlw	0x1                	MOVLW	0x01
                                           _00230_DS_:
003de8   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003dea   f009
003dec   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003dee   f008
003df0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003df2   f007
003df4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003df6   f006
003df8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003dfa   f005
003dfc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003dfe   f004
003e00   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003e02   f003
003e04   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003e06   f002
003e08   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003e0a   f001
003e0c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003e0e   f000
003e10   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003e12   ffd9
003e14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetFreeRxSize	code
                                           _MACGetFreeRxSize:
                                           ;	.line	367; TCPIP_Stack/ETH97J60.c	WORD MACGetFreeRxSize(void)
0057a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0057a8   ffe5
0057aa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0057ac   ffd9
0057ae   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0057b0   ffe5
0057b2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0057b4   ffe5
0057b6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0057b8   ffe5
0057ba   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0057bc   ffe5
0057be   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0057c0   ffe5
0057c2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0057c4   ffe5
                                           _00186_DS_:
0057c6   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	377; TCPIP_Stack/ETH97J60.c	ReadPT.v[0] = EPKTCNT;
0057c8   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
0057ca   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
0057cc   6f2f     movwf	0x2f, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
                                           ;	.line	379; TCPIP_Stack/ETH97J60.c	WritePT.Val = ((WORD)ERXWRPTH)<<8|ERXWRPTL;
0057ce   ceef     movff	0xeef, 0           	MOVFF	_ERXWRPTH, r0x00
0057d0   f000
0057d2   6a01     clrf	0x1, 0              	CLRF	r0x01
0057d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0057d6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0057d8   6a02     clrf	0x2, 0              	CLRF	r0x02
0057da   ceee     movff	0xeee, 0           	MOVFF	_ERXWRPTL, r0x00
0057dc   f000
0057de   6a01     clrf	0x1, 0              	CLRF	r0x01
0057e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0057e2   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
0057e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0057e6   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0057e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0057ea   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
0057ec   6f31     movwf	0x31, 0x1          	MOVWF	_MACGetFreeRxSize_WritePT_1_1, B
0057ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0057f0   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
0057f2   6f32     movwf	0x32, 0x1          	MOVWF	(_MACGetFreeRxSize_WritePT_1_1 + 1), B
0057f4   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	380; TCPIP_Stack/ETH97J60.c	} while(EPKTCNT != ReadPT.v[0]);
0057f6   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
0057f8   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
0057fa   192f     xorwf	0x2f, 0, 0x1       	XORWF	_MACGetFreeRxSize_ReadPT_1_1, W, B
0057fc   e1e4     bnz	0x57c6               	BNZ	_00186_DS_
                                           ;	.line	383; TCPIP_Stack/ETH97J60.c	ReadPT.Val = ERXRDPTH<<8|ERXRDPTL;
0057fe   ceed     movff	0xeed, 0           	MOVFF	_ERXRDPTH, r0x00
005800   f000
005802   6a01     clrf	0x1, 0              	CLRF	r0x01
005804   5000     movf	0, 0, 0             	MOVF	r0x00, W
005806   6e03     movwf	0x3, 0             	MOVWF	r0x03
005808   6a02     clrf	0x2, 0              	CLRF	r0x02
00580a   ceec     movff	0xeec, 0           	MOVFF	_ERXRDPTL, r0x00
00580c   f000
00580e   6a01     clrf	0x1, 0              	CLRF	r0x01
005810   5000     movf	0, 0, 0             	MOVF	r0x00, W
005812   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005814   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005816   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005818   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00581a   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
00581c   6f2f     movwf	0x2f, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
00581e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005820   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_ReadPT_1_1 + 1)
005822   6f30     movwf	0x30, 0x1          	MOVWF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), B
                                           ;	.line	388; TCPIP_Stack/ETH97J60.c	if(WritePT.Val > ReadPT.Val)
005824   ca2f     movff	0xa2f, 0           	MOVFF	_MACGetFreeRxSize_ReadPT_1_1, r0x00
005826   f000
005828   ca30     movff	0xa30, 0x1         	MOVFF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), r0x01
00582a   f001
00582c   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
00582e   5132     movf	0x32, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005830   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
005832   e103     bnz	0x583a               	BNZ	_00205_DS_
005834   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005836   5131     movf	0x31, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005838   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00205_DS_:
00583a   e217     bc	0x586a                	BC	_00193_DS_
                                           ;	.line	390; TCPIP_Stack/ETH97J60.c	return (RXSTOP - RXSTART) - (WritePT.Val - ReadPT.Val);
00583c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00583e   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005840   5d31     subwf	0x31, 0, 0x1       	SUBWF	_MACGetFreeRxSize_WritePT_1_1, W, B
005842   6e02     movwf	0x2, 0             	MOVWF	r0x02
005844   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005846   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005848   5932     subwfb	0x32, 0, 0x1      	SUBWFB	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
00584a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00584c   6a04     clrf	0x4, 0              	CLRF	r0x04
00584e   6a05     clrf	0x5, 0              	CLRF	r0x05
005850   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005852   0809     sublw	0x9                	SUBLW	0x09
005854   6e02     movwf	0x2, 0             	MOVWF	r0x02
005856   0e1a     movlw	0x1a               	MOVLW	0x1a
005858   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
00585a   0e00     movlw	0                  	MOVLW	0x00
00585c   5604     subfwb	0x4, 0x1, 0       	SUBFWB	r0x04, F
00585e   0e00     movlw	0                  	MOVLW	0x00
005860   5605     subfwb	0x5, 0x1, 0       	SUBFWB	r0x05, F
005862   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
005864   fff3
005866   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005868   d01a     bra	0x589e               	BRA	_00195_DS_
                                           _00193_DS_:
00586a   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	392; TCPIP_Stack/ETH97J60.c	else if(WritePT.Val == ReadPT.Val)
00586c   5131     movf	0x31, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
00586e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
005870   e104     bnz	0x587a               	BNZ	_00206_DS_
005872   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005874   5132     movf	0x32, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005876   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
005878   e001     bz	0x587c                	BZ	_00207_DS_
                                           _00206_DS_:
00587a   d004     bra	0x5884               	BRA	_00190_DS_
                                           _00207_DS_:
                                           ;	.line	394; TCPIP_Stack/ETH97J60.c	return RXSIZE - 1;
00587c   0e1a     movlw	0x1a               	MOVLW	0x1a
00587e   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
005880   0e09     movlw	0x9                	MOVLW	0x09
005882   d00d     bra	0x589e               	BRA	_00195_DS_
                                           _00190_DS_:
005884   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	398; TCPIP_Stack/ETH97J60.c	return ReadPT.Val - WritePT.Val - 1;
005886   5131     movf	0x31, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005888   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00588a   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
00588c   5132     movf	0x32, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
00588e   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
005890   0eff     movlw	0xff               	MOVLW	0xff
005892   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005894   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
005896   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
005898   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00589a   fff3
00589c   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00195_DS_:
00589e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0058a0   f005
0058a2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0058a4   f004
0058a6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0058a8   f003
0058aa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0058ac   f002
0058ae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0058b0   f001
0058b2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0058b4   f000
0058b6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0058b8   ffd9
0058ba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACDiscardRx	code
                                           _MACDiscardRx:
                                           ;	.line	313; TCPIP_Stack/ETH97J60.c	void MACDiscardRx(void)
0069ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0069b0   ffe5
0069b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0069b4   ffd9
0069b6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0069b8   ffe5
0069ba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0069bc   ffe5
0069be   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0069c0   ffe5
0069c2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0069c4   ffe5
0069c6   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	318; TCPIP_Stack/ETH97J60.c	if(WasDiscarded) return;
0069c8   515e     movf	0x5e, 0, 0x1        	MOVF	_WasDiscarded, W, B
0069ca   e130     bnz	0x6a2c               	BNZ	_00177_DS_
                                           ;	.line	319; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
0069cc   0e01     movlw	0x1                	MOVLW	0x01
0069ce   010a     movlb	0xa                	BANKSEL	_WasDiscarded
0069d0   6f5e     movwf	0x5e, 0x1          	MOVWF	_WasDiscarded, B
0069d2   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	325; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = NextPacketLocation.Val - 1;
0069d4   51fe     movf	0xfe, 0, 0x1        	MOVF	_NextPacketLocation, W, B
0069d6   0fff     addlw	0xff               	ADDLW	0xff
0069d8   6e00     movwf	0, 0               	MOVWF	r0x00
0069da   0eff     movlw	0xff               	MOVLW	0xff
0069dc   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
0069de   21ff     addwfc	0xff, 0, 0x1      	ADDWFC	(_NextPacketLocation + 1), W, B
0069e0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0069e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0069e4   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
0069e6   6f2d     movwf	0x2d, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
0069e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0069ea   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
0069ec   6f2e     movwf	0x2e, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           ;	.line	327; TCPIP_Stack/ETH97J60.c	if(NewRXRDLocation.Val > RXSTOP)
0069ee   ca2d     movff	0xa2d, 0xfe8       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, WREG
0069f0   ffe8
0069f2   ca2e     movff	0xa2e, 0xfe8       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), WREG
0069f4   ffe8
0069f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0069f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0069fa   0e00     movlw	0                  	MOVLW	0x00
0069fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0069fe   e108     bnz	0x6a10               	BNZ	_00181_DS_
006a00   0e00     movlw	0                  	MOVLW	0x00
006a02   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006a04   e105     bnz	0x6a10               	BNZ	_00181_DS_
006a06   0e1a     movlw	0x1a               	MOVLW	0x1a
006a08   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006a0a   e102     bnz	0x6a10               	BNZ	_00181_DS_
006a0c   0e0a     movlw	0xa                	MOVLW	0x0a
006a0e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00181_DS_:
006a10   e306     bnc	0x6a1e               	BNC	_00176_DS_
                                           ;	.line	332; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = RXSTOP;
006a12   0e09     movlw	0x9                	MOVLW	0x09
006a14   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
006a16   6f2d     movwf	0x2d, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
006a18   0e1a     movlw	0x1a               	MOVLW	0x1a
006a1a   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
006a1c   6f2e     movwf	0x2e, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           _00176_DS_:
006a1e   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	336; TCPIP_Stack/ETH97J60.c	ECON2bits.PKTDEC = 1;
006a20   8dfe     bsf	0xfe, 0x6, 0x1       	BSF	_ECON2bits, 6, B
                                           ;	.line	341; TCPIP_Stack/ETH97J60.c	ERXRDPTL = NewRXRDLocation.v[0];
006a22   ca2d     movff	0xa2d, 0xeec       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, _ERXRDPTL
006a24   feec
                                           ;	.line	342; TCPIP_Stack/ETH97J60.c	ERXRDPTH = NewRXRDLocation.v[1];
006a26   ca2e     movff	0xa2e, 0xeed       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), _ERXRDPTH
006a28   feed
                                           ;	.line	347; TCPIP_Stack/ETH97J60.c	EIRbits.PKTIF = 0;
006a2a   9c60     bcf	0x60, 0x6, 0         	BCF	_EIRbits, 6
                                           _00177_DS_:
006a2c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006a2e   f003
006a30   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006a32   f002
006a34   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006a36   f001
006a38   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006a3a   f000
006a3c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006a3e   ffd9
006a40   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsTxReady	code
                                           _MACIsTxReady:
                                           ;	.line	278; TCPIP_Stack/ETH97J60.c	BOOL MACIsTxReady(void)
006f82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006f84   ffe5
006f86   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006f88   ffd9
006f8a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006f8c   ffe5
006f8e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006f90   ffe5
006f92   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006f94   ffe5
006f96   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006f98   ffe5
                                           ;	.line	280; TCPIP_Stack/ETH97J60.c	if(!ECON1bits.TXRTS)
006f9a   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
006f9c   d002     bra	0x6fa2               	BRA	_00161_DS_
                                           ;	.line	281; TCPIP_Stack/ETH97J60.c	return TRUE;
006f9e   0e01     movlw	0x1                	MOVLW	0x01
006fa0   d021     bra	0x6fe4               	BRA	_00164_DS_
                                           _00161_DS_:
                                           ;	.line	285; TCPIP_Stack/ETH97J60.c	if((WORD)TickGet() - wTXWatchdog >= (3ull*TICK_SECOND/1000ull))
006fa2   ec20     call	0x7840, 0           	CALL	_TickGet
006fa4   f03c
006fa6   6e00     movwf	0, 0               	MOVWF	r0x00
006fa8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
006faa   f001
006fac   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
006fae   f002
006fb0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
006fb2   f003
006fb4   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
006fb6   5129     movf	0x29, 0, 0x1        	MOVF	_wTXWatchdog, W, B
006fb8   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
006fba   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
006fbc   512a     movf	0x2a, 0, 0x1        	MOVF	(_wTXWatchdog + 1), W, B
006fbe   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
006fc0   6a02     clrf	0x2, 0              	CLRF	r0x02
006fc2   6a03     clrf	0x3, 0              	CLRF	r0x03
006fc4   0e00     movlw	0                  	MOVLW	0x00
006fc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006fc8   e108     bnz	0x6fda               	BNZ	_00168_DS_
006fca   0e00     movlw	0                  	MOVLW	0x00
006fcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006fce   e105     bnz	0x6fda               	BNZ	_00168_DS_
006fd0   0e00     movlw	0                  	MOVLW	0x00
006fd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006fd4   e102     bnz	0x6fda               	BNZ	_00168_DS_
006fd6   0e7a     movlw	0x7a               	MOVLW	0x7a
006fd8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00168_DS_:
006fda   e303     bnc	0x6fe2               	BNC	_00163_DS_
                                           ;	.line	287; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 0;
006fdc   96d2     bcf	0xd2, 0x3, 0         	BCF	_ECON1bits, 3
                                           ;	.line	288; TCPIP_Stack/ETH97J60.c	MACFlush();
006fde   ec6c     call	0x70d8, 0           	CALL	_MACFlush
006fe0   f038
                                           _00163_DS_:
                                           ;	.line	290; TCPIP_Stack/ETH97J60.c	return FALSE;
006fe2   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00164_DS_:
006fe4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006fe6   f003
006fe8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006fea   f002
006fec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006fee   f001
006ff0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006ff2   f000
006ff4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006ff6   ffd9
006ff8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsLinked	code
                                           _MACIsLinked:
                                           ;	.line	244; TCPIP_Stack/ETH97J60.c	BOOL MACIsLinked(void)
0075c8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0075ca   ffe5
0075cc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0075ce   ffd9
0075d0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0075d2   ffe5
0075d4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0075d6   ffe5
                                           ;	.line	253; TCPIP_Stack/ETH97J60.c	pr.Val= ReadPHYReg(PHSTAT1);
0075d8   0e01     movlw	0x1                	MOVLW	0x01
0075da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0075dc   ecc2     call	0x7584, 0           	CALL	_ReadPHYReg
0075de   f03a
0075e0   6e00     movwf	0, 0               	MOVWF	r0x00
0075e2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0075e4   f001
0075e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0075e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0075ea   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
0075ec   6f2b     movwf	0x2b, 0x1          	MOVWF	_MACIsLinked_pr_1_1, B
0075ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0075f0   010a     movlb	0xa                	BANKSEL	(_MACIsLinked_pr_1_1 + 1)
0075f2   6f2c     movwf	0x2c, 0x1          	MOVWF	(_MACIsLinked_pr_1_1 + 1), B
                                           ;	.line	254; TCPIP_Stack/ETH97J60.c	return pr.PHSTAT1bits.LLSTAT;
0075f4   6a00     clrf	0, 0                	CLRF	r0x00
0075f6   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
0075f8   b52b     btfsc	0x2b, 0x2, 0x1     	BTFSC	_MACIsLinked_pr_1_1, 2, B
0075fa   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0075fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0075fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007600   f001
007602   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007604   f000
007606   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007608   ffd9
00760a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACInit	code
                                           _MACInit:
                                           ;	.line	131; TCPIP_Stack/ETH97J60.c	void MACInit(void)
00568e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005690   ffe5
005692   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005694   ffd9
                                           ;	.line	135; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA0 = 0; // Set LEDA as output (green on ethernet connector)
005696   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	136; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA1 = 0; // Set LEDB as output (yellow on ethernet connector)
005698   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
00569a   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	137; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;    // Enable Ethernet!
00569c   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00105_DS_:
00569e   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	140; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY);
0056a0   a1fd     btfss	0xfd, 0, 0x1       	BTFSS	_ESTATbits, 0, B
0056a2   d7fd     bra	0x569e               	BRA	_00105_DS_
                                           ;	.line	144; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
0056a4   0e01     movlw	0x1                	MOVLW	0x01
0056a6   010a     movlb	0xa                	BANKSEL	_WasDiscarded
0056a8   6f5e     movwf	0x5e, 0x1          	MOVWF	_WasDiscarded, B
0056aa   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	145; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = RXSTART;
0056ac   6bfe     clrf	0xfe, 0x1           	CLRF	_NextPacketLocation, B
0056ae   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
0056b0   6bff     clrf	0xff, 0x1           	CLRF	(_NextPacketLocation + 1), B
0056b2   010e     movlb	0xe                	BANKSEL	_ERXSTL
                                           ;	.line	146; TCPIP_Stack/ETH97J60.c	ERXSTL = LOW(RXSTART);
0056b4   6be8     clrf	0xe8, 0x1           	CLRF	_ERXSTL, B
0056b6   010e     movlb	0xe                	BANKSEL	_ERXSTH
                                           ;	.line	147; TCPIP_Stack/ETH97J60.c	ERXSTH = HIGH(RXSTART);
0056b8   6be9     clrf	0xe9, 0x1           	CLRF	_ERXSTH, B
                                           ;	.line	149; TCPIP_Stack/ETH97J60.c	ERXRDPTL = LOW(RXSTOP);	// Write low byte first
0056ba   0e09     movlw	0x9                	MOVLW	0x09
0056bc   010e     movlb	0xe                	BANKSEL	_ERXRDPTL
0056be   6fec     movwf	0xec, 0x1          	MOVWF	_ERXRDPTL, B
                                           ;	.line	150; TCPIP_Stack/ETH97J60.c	ERXRDPTH = HIGH(RXSTOP);    // Write high byte last
0056c0   0e1a     movlw	0x1a               	MOVLW	0x1a
0056c2   010e     movlb	0xe                	BANKSEL	_ERXRDPTH
0056c4   6fed     movwf	0xed, 0x1          	MOVWF	_ERXRDPTH, B
                                           ;	.line	152; TCPIP_Stack/ETH97J60.c	ERXNDL = LOW(RXSTOP);
0056c6   0e09     movlw	0x9                	MOVLW	0x09
0056c8   010e     movlb	0xe                	BANKSEL	_ERXNDL
0056ca   6fea     movwf	0xea, 0x1          	MOVWF	_ERXNDL, B
                                           ;	.line	153; TCPIP_Stack/ETH97J60.c	ERXNDH = HIGH(RXSTOP);
0056cc   0e1a     movlw	0x1a               	MOVLW	0x1a
0056ce   010e     movlb	0xe                	BANKSEL	_ERXNDH
0056d0   6feb     movwf	0xeb, 0x1          	MOVWF	_ERXNDH, B
                                           ;	.line	155; TCPIP_Stack/ETH97J60.c	ETXSTL = LOW(TXSTART);
0056d2   0e0a     movlw	0xa                	MOVLW	0x0a
0056d4   010e     movlb	0xe                	BANKSEL	_ETXSTL
0056d6   6fe4     movwf	0xe4, 0x1          	MOVWF	_ETXSTL, B
                                           ;	.line	156; TCPIP_Stack/ETH97J60.c	ETXSTH = HIGH(TXSTART);
0056d8   0e1a     movlw	0x1a               	MOVLW	0x1a
0056da   010e     movlb	0xe                	BANKSEL	_ETXSTH
0056dc   6fe5     movwf	0xe5, 0x1          	MOVWF	_ETXSTH, B
                                           ;	.line	159; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART);
0056de   0e0a     movlw	0xa                	MOVLW	0x0a
0056e0   010e     movlb	0xe                	BANKSEL	_EWRPTL
0056e2   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	160; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART);
0056e4   0e1a     movlw	0x1a               	MOVLW	0x1a
0056e6   010e     movlb	0xe                	BANKSEL	_EWRPTH
0056e8   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	161; TCPIP_Stack/ETH97J60.c	EDATA = 0x00;
0056ea   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	171; TCPIP_Stack/ETH97J60.c	MACON1 = MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN; Nop();
0056ec   0e0d     movlw	0xd                	MOVLW	0x0d
0056ee   010e     movlb	0xe                	BANKSEL	_MACON1
0056f0   6fa0     movwf	0xa0, 0x1          	MOVWF	_MACON1, B
0056f2   0000     nop                      	nop 
                                           ;	.line	179; TCPIP_Stack/ETH97J60.c	MACON3 = MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN; Nop();
0056f4   0e32     movlw	0x32               	MOVLW	0x32
0056f6   010e     movlb	0xe                	BANKSEL	_MACON3
0056f8   6fa2     movwf	0xa2, 0x1          	MOVWF	_MACON3, B
0056fa   0000     nop                      	nop 
                                           ;	.line	180; TCPIP_Stack/ETH97J60.c	MABBIPG = 0x12; Nop();
0056fc   0e12     movlw	0x12               	MOVLW	0x12
0056fe   010e     movlb	0xe                	BANKSEL	_MABBIPG
005700   6fa4     movwf	0xa4, 0x1          	MOVWF	_MABBIPG, B
005702   0000     nop                      	nop 
                                           ;	.line	186; TCPIP_Stack/ETH97J60.c	MACON4 = MACON4_DEFER; Nop();
005704   0e40     movlw	0x40               	MOVLW	0x40
005706   010e     movlb	0xe                	BANKSEL	_MACON4
005708   6fa3     movwf	0xa3, 0x1          	MOVWF	_MACON4, B
00570a   0000     nop                      	nop 
                                           ;	.line	191; TCPIP_Stack/ETH97J60.c	MAIPGL = 0x12; Nop();
00570c   0e12     movlw	0x12               	MOVLW	0x12
00570e   010e     movlb	0xe                	BANKSEL	_MAIPGL
005710   6fa6     movwf	0xa6, 0x1          	MOVWF	_MAIPGL, B
005712   0000     nop                      	nop 
                                           ;	.line	192; TCPIP_Stack/ETH97J60.c	MAIPGH = 0x0C; Nop();
005714   0e0c     movlw	0xc                	MOVLW	0x0c
005716   010e     movlb	0xe                	BANKSEL	_MAIPGH
005718   6fa7     movwf	0xa7, 0x1          	MOVWF	_MAIPGH, B
00571a   0000     nop                      	nop 
                                           ;	.line	195; TCPIP_Stack/ETH97J60.c	MAMXFLL = LOW(6+6+2+1500+4); Nop();
00571c   0eee     movlw	0xee               	MOVLW	0xee
00571e   010e     movlb	0xe                	BANKSEL	_MAMXFLL
005720   6faa     movwf	0xaa, 0x1          	MOVWF	_MAMXFLL, B
005722   0000     nop                      	nop 
                                           ;	.line	196; TCPIP_Stack/ETH97J60.c	MAMXFLH = HIGH(6+6+2+1500+4); Nop();
005724   0e05     movlw	0x5                	MOVLW	0x05
005726   010e     movlb	0xe                	BANKSEL	_MAMXFLH
005728   6fab     movwf	0xab, 0x1          	MOVWF	_MAMXFLH, B
00572a   0000     nop                      	nop 
                                           ;	.line	199; TCPIP_Stack/ETH97J60.c	MAADR1 = AppConfig.MyMACAddr.v[0]; Nop();
00572c   ce2d     movff	0xe2d, 0xe84       	MOVFF	(_AppConfig + 45), _MAADR1
00572e   fe84
005730   0000     nop                      	nop 
                                           ;	.line	200; TCPIP_Stack/ETH97J60.c	MAADR2 = AppConfig.MyMACAddr.v[1]; Nop();
005732   ce2e     movff	0xe2e, 0xe85       	MOVFF	(_AppConfig + 46), _MAADR2
005734   fe85
005736   0000     nop                      	nop 
                                           ;	.line	201; TCPIP_Stack/ETH97J60.c	MAADR3 = AppConfig.MyMACAddr.v[2]; Nop();
005738   ce2f     movff	0xe2f, 0xe82       	MOVFF	(_AppConfig + 47), _MAADR3
00573a   fe82
00573c   0000     nop                      	nop 
                                           ;	.line	202; TCPIP_Stack/ETH97J60.c	MAADR4 = AppConfig.MyMACAddr.v[3]; Nop();
00573e   ce30     movff	0xe30, 0xe83       	MOVFF	(_AppConfig + 48), _MAADR4
005740   fe83
005742   0000     nop                      	nop 
                                           ;	.line	203; TCPIP_Stack/ETH97J60.c	MAADR5 = AppConfig.MyMACAddr.v[4]; Nop();
005744   ce31     movff	0xe31, 0xe80       	MOVFF	(_AppConfig + 49), _MAADR5
005746   fe80
005748   0000     nop                      	nop 
                                           ;	.line	204; TCPIP_Stack/ETH97J60.c	MAADR6 = AppConfig.MyMACAddr.v[5]; Nop();
00574a   ce32     movff	0xe32, 0xe81       	MOVFF	(_AppConfig + 50), _MAADR6
00574c   fe81
00574e   0000     nop                      	nop 
                                           ;	.line	207; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON2, PHCON2_HDLDIS | PHCON2_RXAPDIS);
005750   0e01     movlw	0x1                	MOVLW	0x01
005752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005754   0e10     movlw	0x10               	MOVLW	0x10
005756   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005758   0e10     movlw	0x10               	MOVLW	0x10
00575a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00575c   ec2c     call	0x7458, 0           	CALL	_WritePHYReg
00575e   f03a
005760   0e03     movlw	0x3                	MOVLW	0x03
005762   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; TCPIP_Stack/ETH97J60.c	SetLEDConfig(0x3472);
005764   0e34     movlw	0x34               	MOVLW	0x34
005766   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005768   0e72     movlw	0x72               	MOVLW	0x72
00576a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00576c   0e14     movlw	0x14               	MOVLW	0x14
00576e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005770   ec2c     call	0x7458, 0           	CALL	_WritePHYReg
005772   f03a
005774   0e03     movlw	0x3                	MOVLW	0x03
005776   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON1, 0x0000);
005778   0e00     movlw	0                  	MOVLW	0x00
00577a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00577c   0e00     movlw	0                  	MOVLW	0x00
00577e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005780   0e00     movlw	0                  	MOVLW	0x00
005782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005784   ec2c     call	0x7458, 0           	CALL	_WritePHYReg
005786   f03a
005788   0e03     movlw	0x3                	MOVLW	0x03
00578a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
00578c   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
00578e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005790   ffd9
005792   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
005794   7265     btg	0x65, 0x1, 0         	DB	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e
005796   6f72     movwf	0x72, 0x1          
005798   2072     addwfc	0x72, 0, 0        
00579a   6572     cpfsgt	0x72, 0x1         
00579c   6461     cpfsgt	0x61, 0           
00579e   6e69     movwf	0x69, 0            
0057a0   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x68, 0x64, 0x72, 0x00
0057a2   6468     cpfsgt	0x68, 0           
0057a4   0072     dw	0x72  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5346 (0x14e2) bytes ( 4.08%)
                                           ;           	 2673 (0x0a71) words
                                           ; udata size:	  141 (0x008d) bytes ( 3.67%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:31 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:31 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _GenerateRandomDWORD
                                           	global _StringToIPAddress
                                           	global _btohexa_high
                                           	global _btohexa_low
                                           	global _swaps
                                           	global _swapl
                                           	global _CalcIPChecksum
                                           	global _leftRotateDWORD
                                           	global _strnchr
                                           	global _toRotate
                                           	global _hexatob
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _rand
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_Helpers_0	udata
                                           _GenerateRandomDWORD_wTime_1_1	res	2
                                           
                                           udata_Helpers_1	udata
                                           _StringToIPAddress_dwVal_1_1	res	4
                                           
                                           udata_Helpers_2	udata
                                           _hexatob_AsciiChars_1_1	res	2
                                           
                                           udata_Helpers_3	udata
                                           _swaps_t_1_1	res	2
                                           
                                           udata_Helpers_4	udata
                                           _swapl_v_1_1	res	4
                                           
                                           udata_Helpers_5	udata
                                           _CalcIPChecksum_count_1_1	res	2
                                           
                                           udata_Helpers_6	udata
                                           _CalcIPChecksum_sum_1_1	res	4
                                           
                                           udata_Helpers_7	udata
                                           _toRotate	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Helpers__strnchr	code
                                           _strnchr:
                                           ;	.line	1359; TCPIP_Stack/Helpers.c	char * strnchr(const char *searchString, size_t count, char c)
005bec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005bee   ffe5
005bf0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005bf2   ffd9
005bf4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005bf6   ffe5
005bf8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005bfa   ffe5
005bfc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005bfe   ffe5
005c00   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005c02   ffe5
005c04   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005c06   ffe5
005c08   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005c0a   ffe5
005c0c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005c0e   ffe5
005c10   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005c12   ffe5
005c14   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005c16   ffe5
005c18   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005c1a   ffe5
005c1c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
005c1e   ffe5
005c20   0e02     movlw	0x2                	MOVLW	0x02
005c22   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005c24   f000
005c26   0e03     movlw	0x3                	MOVLW	0x03
005c28   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005c2a   f001
005c2c   0e04     movlw	0x4                	MOVLW	0x04
005c2e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005c30   f002
005c32   0e05     movlw	0x5                	MOVLW	0x05
005c34   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005c36   f003
005c38   0e06     movlw	0x6                	MOVLW	0x06
005c3a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005c3c   f004
005c3e   0e07     movlw	0x7                	MOVLW	0x07
005c40   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005c42   f005
                                           ;	.line	1363; TCPIP_Stack/Helpers.c	while(count--)
005c44   c000     movff	0, 0x6             	MOVFF	r0x00, r0x06
005c46   f006
005c48   c001     movff	0x1, 0x7           	MOVFF	r0x01, r0x07
005c4a   f007
005c4c   c002     movff	0x2, 0x8           	MOVFF	r0x02, r0x08
005c4e   f008
                                           _00311_DS_:
005c50   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
005c52   f009
005c54   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
005c56   f00a
005c58   0eff     movlw	0xff               	MOVLW	0xff
005c5a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005c5c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
005c5e   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
005c60   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005c62   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
005c64   e025     bz	0x5cb0                	BZ	_00313_DS_
                                           ;	.line	1365; TCPIP_Stack/Helpers.c	c2  = *searchString++;
005c66   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
005c68   ffe9
005c6a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005c6c   fff3
005c6e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005c70   ec31     call	0x7862, 0           	CALL	__gptrget1
005c72   f03c
005c74   6e09     movwf	0x9, 0             	MOVWF	r0x09
005c76   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
005c78   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c7a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
005c7c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c7e   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
                                           ;	.line	1366; TCPIP_Stack/Helpers.c	if(c2 == 0u)
005c80   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005c82   e104     bnz	0x5c8c               	BNZ	_00308_DS_
                                           ;	.line	1367; TCPIP_Stack/Helpers.c	return NULL;
005c84   6af4     clrf	0xf4, 0             	CLRF	PRODH
005c86   6af3     clrf	0xf3, 0             	CLRF	PRODL
005c88   6ae8     clrf	0xe8, 0             	CLRF	WREG
005c8a   d015     bra	0x5cb6               	BRA	_00314_DS_
                                           _00308_DS_:
                                           ;	.line	1368; TCPIP_Stack/Helpers.c	if(c2 == c)
005c8c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005c8e   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
005c90   e1df     bnz	0x5c50               	BNZ	_00311_DS_
                                           ;	.line	1369; TCPIP_Stack/Helpers.c	return (char*)--searchString;
005c92   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005c94   0fff     addlw	0xff               	ADDLW	0xff
005c96   6e00     movwf	0, 0               	MOVWF	r0x00
005c98   0eff     movlw	0xff               	MOVLW	0xff
005c9a   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
005c9c   6e01     movwf	0x1, 0             	MOVWF	r0x01
005c9e   0eff     movlw	0xff               	MOVLW	0xff
005ca0   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
005ca2   6e02     movwf	0x2, 0             	MOVWF	r0x02
005ca4   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
005ca6   fff4
005ca8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005caa   fff3
005cac   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cae   d003     bra	0x5cb6               	BRA	_00314_DS_
                                           _00313_DS_:
                                           ;	.line	1371; TCPIP_Stack/Helpers.c	return NULL;
005cb0   6af4     clrf	0xf4, 0             	CLRF	PRODH
005cb2   6af3     clrf	0xf3, 0             	CLRF	PRODL
005cb4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00314_DS_:
005cb6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
005cb8   f00a
005cba   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005cbc   f009
005cbe   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005cc0   f008
005cc2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005cc4   f007
005cc6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005cc8   f006
005cca   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005ccc   f005
005cce   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005cd0   f004
005cd2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005cd4   f003
005cd6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005cd8   f002
005cda   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005cdc   f001
005cde   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005ce0   f000
005ce2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005ce4   ffd9
005ce6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__leftRotateDWORD	code
                                           _leftRotateDWORD:
                                           ;	.line	1235; TCPIP_Stack/Helpers.c	DWORD leftRotateDWORD(DWORD val, BYTE bits)
006084   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006086   ffe5
006088   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00608a   ffd9
00608c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00608e   ffe5
006090   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006092   ffe5
006094   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006096   ffe5
006098   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00609a   ffe5
00609c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00609e   ffe5
0060a0   0e02     movlw	0x2                	MOVLW	0x02
0060a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0060a4   f000
0060a6   0e03     movlw	0x3                	MOVLW	0x03
0060a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0060aa   f001
0060ac   0e04     movlw	0x4                	MOVLW	0x04
0060ae   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0060b0   f002
0060b2   0e05     movlw	0x5                	MOVLW	0x05
0060b4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0060b6   f003
0060b8   0e06     movlw	0x6                	MOVLW	0x06
0060ba   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0060bc   f004
                                           ;	.line	1239; TCPIP_Stack/Helpers.c	toRotate.Val = val;
0060be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060c0   0108     movlb	0x8                	BANKSEL	_toRotate
0060c2   6ff2     movwf	0xf2, 0x1          	MOVWF	_toRotate, B
0060c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0060c6   0108     movlb	0x8                	BANKSEL	(_toRotate + 1)
0060c8   6ff3     movwf	0xf3, 0x1          	MOVWF	(_toRotate + 1), B
0060ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0060cc   0108     movlb	0x8                	BANKSEL	(_toRotate + 2)
0060ce   6ff4     movwf	0xf4, 0x1          	MOVWF	(_toRotate + 2), B
0060d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0060d2   0108     movlb	0x8                	BANKSEL	(_toRotate + 3)
0060d4   6ff5     movwf	0xf5, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
0060d6   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
0060d8   f000
                                           _00284_DS_:
0060da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0060dc   f001
0060de   6a02     clrf	0x2, 0              	CLRF	r0x02
0060e0   0e00     movlw	0                  	MOVLW	0x00
0060e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0060e4   e102     bnz	0x60ea               	BNZ	_00300_DS_
0060e6   0e08     movlw	0x8                	MOVLW	0x08
0060e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00300_DS_:
0060ea   e317     bnc	0x611a               	BNC	_00288_DS_
                                           ;	.line	1243; TCPIP_Stack/Helpers.c	t = toRotate.v[3];
0060ec   c8f5     movff	0x8f5, 0x1         	MOVFF	(_toRotate + 3), r0x01
0060ee   f001
                                           ;	.line	1244; TCPIP_Stack/Helpers.c	toRotate.v[3] = toRotate.v[2];
0060f0   c8f4     movff	0x8f4, 0x2         	MOVFF	(_toRotate + 2), r0x02
0060f2   f002
0060f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0060f6   0108     movlb	0x8                	BANKSEL	(_toRotate + 3)
0060f8   6ff5     movwf	0xf5, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1245; TCPIP_Stack/Helpers.c	toRotate.v[2] = toRotate.v[1];
0060fa   c8f3     movff	0x8f3, 0x2         	MOVFF	(_toRotate + 1), r0x02
0060fc   f002
0060fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006100   0108     movlb	0x8                	BANKSEL	(_toRotate + 2)
006102   6ff4     movwf	0xf4, 0x1          	MOVWF	(_toRotate + 2), B
                                           ;	.line	1246; TCPIP_Stack/Helpers.c	toRotate.v[1] = toRotate.v[0];
006104   c8f2     movff	0x8f2, 0x2         	MOVFF	_toRotate, r0x02
006106   f002
006108   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00610a   0108     movlb	0x8                	BANKSEL	(_toRotate + 1)
00610c   6ff3     movwf	0xf3, 0x1          	MOVWF	(_toRotate + 1), B
                                           ;	.line	1247; TCPIP_Stack/Helpers.c	toRotate.v[0] = t;
00610e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006110   0108     movlb	0x8                	BANKSEL	_toRotate
006112   6ff2     movwf	0xf2, 0x1          	MOVWF	_toRotate, B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
006114   0ef8     movlw	0xf8               	MOVLW	0xf8
006116   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006118   d7e0     bra	0x60da               	BRA	_00284_DS_
                                           _00288_DS_:
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
00611a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00611c   f001
00611e   6a02     clrf	0x2, 0              	CLRF	r0x02
006120   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006122   e102     bnz	0x6128               	BNZ	_00302_DS_
006124   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006126   e00a     bz	0x613c                	BZ	_00291_DS_
                                           _00301_DS_:
                                           _00302_DS_:
006128   0108     movlb	0x8                	movlb _toRotate
00612a   90d8     bcf	0xd8, 0, 0           	bcf STATUS,0,0
00612c   bff5     btfsc	0xf5, 0x7, 0x1     	btfsc _toRotate+3,7,1
00612e   80d8     bsf	0xd8, 0, 0           	bsf STATUS,0,0
006130   37f2     rlcf	0xf2, 0x1, 0x1      	rlcf _toRotate+0,1,1
006132   37f3     rlcf	0xf3, 0x1, 0x1      	rlcf _toRotate+1,1,1
006134   37f4     rlcf	0xf4, 0x1, 0x1      	rlcf _toRotate+2,1,1
006136   37f5     rlcf	0xf5, 0x1, 0x1      	rlcf _toRotate+3,1,1
                                           	
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
006138   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00613a   d7ef     bra	0x611a               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	1281; TCPIP_Stack/Helpers.c	return toRotate.Val;
00613c   c8f5     movff	0x8f5, 0xfe9       	MOVFF	(_toRotate + 3), FSR0L
00613e   ffe9
006140   c8f4     movff	0x8f4, 0xff4       	MOVFF	(_toRotate + 2), PRODH
006142   fff4
006144   c8f3     movff	0x8f3, 0xff3       	MOVFF	(_toRotate + 1), PRODL
006146   fff3
006148   0108     movlb	0x8                	BANKSEL	_toRotate
00614a   51f2     movf	0xf2, 0, 0x1        	MOVF	_toRotate, W, B
00614c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00614e   f004
006150   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006152   f003
006154   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006156   f002
006158   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00615a   f001
00615c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00615e   f000
006160   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006162   ffd9
006164   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__CalcIPChecksum	code
                                           _CalcIPChecksum:
                                           ;	.line	1062; TCPIP_Stack/Helpers.c	WORD CalcIPChecksum(BYTE* buffer, WORD count)
001ef8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001efa   ffe5
001efc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001efe   ffd9
001f00   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f02   ffe5
001f04   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f06   ffe5
001f08   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f0a   ffe5
001f0c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001f0e   ffe5
001f10   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001f12   ffe5
001f14   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001f16   ffe5
001f18   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001f1a   ffe5
001f1c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001f1e   ffe5
001f20   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f22   ffe5
001f24   0e02     movlw	0x2                	MOVLW	0x02
001f26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001f28   f000
001f2a   0e03     movlw	0x3                	MOVLW	0x03
001f2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001f2e   f001
001f30   0e04     movlw	0x4                	MOVLW	0x04
001f32   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001f34   f002
001f36   0e05     movlw	0x5                	MOVLW	0x05
001f38   cfdb     movff	0xfdb, 0xa49       	MOVFF	PLUSW2, _CalcIPChecksum_count_1_1
001f3a   fa49
001f3c   0e06     movlw	0x6                	MOVLW	0x06
001f3e   cfdb     movff	0xfdb, 0xa4a       	MOVFF	PLUSW2, (_CalcIPChecksum_count_1_1 + 1)
001f40   fa4a
001f42   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1066; TCPIP_Stack/Helpers.c	DWORD_VAL sum = {0x00000000ul};
001f44   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f46   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f48   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f4a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f4c   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f4e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f50   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f52   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f54   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f56   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f58   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f5a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f5c   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f5e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f60   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f62   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f64   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f66   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f68   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f6a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f6c   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f6e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f70   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f72   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f74   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f76   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f78   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f7a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f7c   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f7e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f80   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f82   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f84   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f86   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f88   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f8a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f8c   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f8e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f90   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f92   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f94   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f96   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f98   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f9a   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001f9c   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f9e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa0   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001fa2   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fa4   6bee     clrf	0xee, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001fa6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa8   6bef     clrf	0xef, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001faa   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fac   91ee     bcf	0xee, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
001fae   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb0   93ee     bcf	0xee, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
001fb2   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb4   95ee     bcf	0xee, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
001fb6   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb8   97ee     bcf	0xee, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
001fba   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fbc   99ee     bcf	0xee, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
001fbe   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc0   9bee     bcf	0xee, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
001fc2   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc4   9dee     bcf	0xee, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
001fc6   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc8   9fee     bcf	0xee, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
001fca   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fcc   91ef     bcf	0xef, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
001fce   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd0   93ef     bcf	0xef, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
001fd2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd4   95ef     bcf	0xef, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
001fd6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd8   97ef     bcf	0xef, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
001fda   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fdc   99ef     bcf	0xef, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
001fde   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe0   9bef     bcf	0xef, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
001fe2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe4   9def     bcf	0xef, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
001fe6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe8   9fef     bcf	0xef, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
001fea   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001fec   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001fee   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff0   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ff2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ff4   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ff6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff8   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ffa   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ffc   6bf0     clrf	0xf0, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ffe   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002000   6bf1     clrf	0xf1, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
002002   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002004   91f0     bcf	0xf0, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002006   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002008   93f0     bcf	0xf0, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00200a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00200c   95f0     bcf	0xf0, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00200e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002010   97f0     bcf	0xf0, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002012   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002014   99f0     bcf	0xf0, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002016   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002018   9bf0     bcf	0xf0, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00201a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00201c   9df0     bcf	0xf0, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00201e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002020   9ff0     bcf	0xf0, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
002022   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002024   91f1     bcf	0xf1, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
002026   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002028   93f1     bcf	0xf1, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
00202a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00202c   95f1     bcf	0xf1, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
00202e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002030   97f1     bcf	0xf1, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
002032   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002034   99f1     bcf	0xf1, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
002036   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002038   9bf1     bcf	0xf1, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00203a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00203c   9df1     bcf	0xf1, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
00203e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002040   9ff1     bcf	0xf1, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
002042   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002044   91ee     bcf	0xee, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
002046   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002048   93ee     bcf	0xee, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
00204a   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
00204c   95ee     bcf	0xee, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
00204e   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002050   97ee     bcf	0xee, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
002052   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002054   99ee     bcf	0xee, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
002056   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002058   9bee     bcf	0xee, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
00205a   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
00205c   9dee     bcf	0xee, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
00205e   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002060   9fee     bcf	0xee, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
002062   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002064   91ef     bcf	0xef, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
002066   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002068   93ef     bcf	0xef, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
00206a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00206c   95ef     bcf	0xef, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
00206e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002070   97ef     bcf	0xef, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
002072   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002074   99ef     bcf	0xef, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
002076   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002078   9bef     bcf	0xef, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
00207a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00207c   9def     bcf	0xef, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
00207e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002080   9fef     bcf	0xef, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
002082   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002084   91f0     bcf	0xf0, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002086   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002088   93f0     bcf	0xf0, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00208a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00208c   95f0     bcf	0xf0, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00208e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002090   97f0     bcf	0xf0, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002092   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002094   99f0     bcf	0xf0, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002096   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002098   9bf0     bcf	0xf0, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00209a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00209c   9df0     bcf	0xf0, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00209e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0020a0   9ff0     bcf	0xf0, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
0020a2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a4   91f1     bcf	0xf1, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
0020a6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a8   93f1     bcf	0xf1, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
0020aa   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020ac   95f1     bcf	0xf1, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
0020ae   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b0   97f1     bcf	0xf1, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
0020b2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b4   99f1     bcf	0xf1, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
0020b6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b8   9bf1     bcf	0xf1, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
0020ba   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020bc   9df1     bcf	0xf1, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
0020be   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020c0   9ff1     bcf	0xf1, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
                                           ;	.line	1068; TCPIP_Stack/Helpers.c	i = count >> 1;
0020c2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0020c4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_count_1_1 + 1)
0020c6   314a     rrcf	0x4a, 0, 0x1        	RRCF	(_CalcIPChecksum_count_1_1 + 1), W, B
0020c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0020ca   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
0020cc   3149     rrcf	0x49, 0, 0x1        	RRCF	_CalcIPChecksum_count_1_1, W, B
0020ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00274_DS_:
                                           ;	.line	1072; TCPIP_Stack/Helpers.c	while(i--)
0020d0   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
0020d2   f005
0020d4   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0020d6   f006
0020d8   0eff     movlw	0xff               	MOVLW	0xff
0020da   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0020dc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0020de   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0020e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020e2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0020e4   e02b     bz	0x213c                	BZ	_00276_DS_
                                           ;	.line	1073; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*val++;
0020e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0020e8   ffe9
0020ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0020ec   fff3
0020ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020f0   ecb8     call	0x7770, 0           	CALL	__gptrget2
0020f2   f03b
0020f4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0020f6   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0020f8   f006
0020fa   0e02     movlw	0x2                	MOVLW	0x02
0020fc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0020fe   0e00     movlw	0                  	MOVLW	0x00
002100   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002102   0e00     movlw	0                  	MOVLW	0x00
002104   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002106   6a07     clrf	0x7, 0              	CLRF	r0x07
002108   6a08     clrf	0x8, 0              	CLRF	r0x08
00210a   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
00210c   51ee     movf	0xee, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00210e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002110   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002112   51ef     movf	0xef, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002114   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002116   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002118   51f0     movf	0xf0, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
00211a   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00211c   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00211e   51f1     movf	0xf1, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
002120   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
002122   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002124   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002126   6fee     movwf	0xee, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002128   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00212a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00212c   6fef     movwf	0xef, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00212e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002130   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002132   6ff0     movwf	0xf0, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002134   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002136   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002138   6ff1     movwf	0xf1, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
00213a   d7ca     bra	0x20d0               	BRA	_00274_DS_
                                           _00276_DS_:
00213c   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
                                           ;	.line	1076; TCPIP_Stack/Helpers.c	if(((WORD_VAL*)&count)->bits.b0)
00213e   a149     btfss	0x49, 0, 0x1       	BTFSS	_CalcIPChecksum_count_1_1, 0, B
002140   d023     bra	0x2188               	BRA	_00278_DS_
                                           ;	.line	1077; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*(BYTE*)val;
002142   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002144   ffe9
002146   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002148   fff3
00214a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00214c   ec31     call	0x7862, 0           	CALL	__gptrget1
00214e   f03c
002150   6e00     movwf	0, 0               	MOVWF	r0x00
002152   6a01     clrf	0x1, 0              	CLRF	r0x01
002154   6a02     clrf	0x2, 0              	CLRF	r0x02
002156   6a03     clrf	0x3, 0              	CLRF	r0x03
002158   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
00215a   51ee     movf	0xee, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00215c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00215e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002160   51ef     movf	0xef, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002162   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002164   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002166   51f0     movf	0xf0, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
002168   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00216a   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00216c   51f1     movf	0xf1, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
00216e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002170   5000     movf	0, 0, 0             	MOVF	r0x00, W
002172   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
002174   6fee     movwf	0xee, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002176   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002178   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00217a   6fef     movwf	0xef, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00217c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00217e   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002180   6ff0     movwf	0xf0, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002182   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002184   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002186   6ff1     movwf	0xf1, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
                                           _00278_DS_:
                                           ;	.line	1080; TCPIP_Stack/Helpers.c	sum.Val = (DWORD)sum.w[0] + (DWORD)sum.w[1];
002188   c8ee     movff	0x8ee, 0           	MOVFF	_CalcIPChecksum_sum_1_1, r0x00
00218a   f000
00218c   c8ef     movff	0x8ef, 0x1         	MOVFF	(_CalcIPChecksum_sum_1_1 + 1), r0x01
00218e   f001
002190   6a02     clrf	0x2, 0              	CLRF	r0x02
002192   6a03     clrf	0x3, 0              	CLRF	r0x03
002194   c8f0     movff	0x8f0, 0x4         	MOVFF	(_CalcIPChecksum_sum_1_1 + 2), r0x04
002196   f004
002198   c8f1     movff	0x8f1, 0x5         	MOVFF	(_CalcIPChecksum_sum_1_1 + 3), r0x05
00219a   f005
00219c   6a06     clrf	0x6, 0              	CLRF	r0x06
00219e   6a07     clrf	0x7, 0              	CLRF	r0x07
0021a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021a2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021a6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0021a8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0021aa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0021ac   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0021ae   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0021b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021b2   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
0021b4   6fee     movwf	0xee, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021b8   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021ba   6fef     movwf	0xef, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021be   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0021c0   6ff0     movwf	0xf0, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
0021c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021c4   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021c6   6ff1     movwf	0xf1, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
0021c8   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
                                           ;	.line	1084; TCPIP_Stack/Helpers.c	sum.w[0] += sum.w[1];
0021ca   51f0     movf	0xf0, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0021cc   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
0021ce   25ee     addwf	0xee, 0, 0x1       	ADDWF	_CalcIPChecksum_sum_1_1, W, B
0021d0   6e00     movwf	0, 0               	MOVWF	r0x00
0021d2   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021d4   51f1     movf	0xf1, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0021d6   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021d8   21ef     addwfc	0xef, 0, 0x1      	ADDWFC	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021de   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
0021e0   6fee     movwf	0xee, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021e4   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021e6   6fef     movwf	0xef, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021e8   0108     movlb	0x8                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1087; TCPIP_Stack/Helpers.c	return ~sum.w[0];
0021ea   1dee     comf	0xee, 0, 0x1        	COMF	_CalcIPChecksum_sum_1_1, W, B
0021ec   6e00     movwf	0, 0               	MOVWF	r0x00
0021ee   0108     movlb	0x8                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021f0   1def     comf	0xef, 0, 0x1        	COMF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021f4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0021f6   fff3
0021f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021fa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0021fc   f008
0021fe   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002200   f007
002202   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002204   f006
002206   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002208   f005
00220a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00220c   f004
00220e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002210   f003
002212   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002214   f002
002216   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002218   f001
00221a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00221c   f000
00221e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002220   ffd9
002222   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swapl	code
                                           _swapl:
                                           ;	.line	1020; TCPIP_Stack/Helpers.c	DWORD swapl(DWORD v)
006614   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006616   ffe5
006618   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00661a   ffd9
00661c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00661e   ffe5
006620   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006622   ffe5
006624   0e02     movlw	0x2                	MOVLW	0x02
006626   cfdb     movff	0xfdb, 0x8ea       	MOVFF	PLUSW2, _swapl_v_1_1
006628   f8ea
00662a   0e03     movlw	0x3                	MOVLW	0x03
00662c   cfdb     movff	0xfdb, 0x8eb       	MOVFF	PLUSW2, (_swapl_v_1_1 + 1)
00662e   f8eb
006630   0e04     movlw	0x4                	MOVLW	0x04
006632   cfdb     movff	0xfdb, 0x8ec       	MOVFF	PLUSW2, (_swapl_v_1_1 + 2)
006634   f8ec
006636   0e05     movlw	0x5                	MOVLW	0x05
006638   cfdb     movff	0xfdb, 0x8ed       	MOVFF	PLUSW2, (_swapl_v_1_1 + 3)
00663a   f8ed
                                           ;	.line	1023; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
00663c   c8ed     movff	0x8ed, 0           	MOVFF	(_swapl_v_1_1 + 3), r0x00
00663e   f000
006640   5000     movf	0, 0, 0             	MOVF	r0x00, W
006642   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
006644   19ea     xorwf	0xea, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006646   6e01     movwf	0x1, 0             	MOVWF	r0x01
006648   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00664a   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
00664c   6fea     movwf	0xea, 0x1          	MOVWF	_swapl_v_1_1, B
00664e   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
                                           ;	.line	1024; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[3] ^= ((DWORD_VAL*)&v)->v[0];
006650   51ea     movf	0xea, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
006652   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006654   5000     movf	0, 0, 0             	MOVF	r0x00, W
006656   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 3)
006658   6fed     movwf	0xed, 0x1          	MOVWF	(_swapl_v_1_1 + 3), B
00665a   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 3)
                                           ;	.line	1025; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
00665c   51ed     movf	0xed, 0, 0x1        	MOVF	(_swapl_v_1_1 + 3), W, B
00665e   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
006660   19ea     xorwf	0xea, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006662   6e00     movwf	0, 0               	MOVWF	r0x00
006664   5000     movf	0, 0, 0             	MOVF	r0x00, W
006666   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
006668   6fea     movwf	0xea, 0x1          	MOVWF	_swapl_v_1_1, B
                                           ;	.line	1028; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
00666a   c8ec     movff	0x8ec, 0           	MOVFF	(_swapl_v_1_1 + 2), r0x00
00666c   f000
00666e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006670   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 1)
006672   19eb     xorwf	0xeb, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006674   6e01     movwf	0x1, 0             	MOVWF	r0x01
006676   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006678   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 1)
00667a   6feb     movwf	0xeb, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
00667c   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 1)
                                           ;	.line	1029; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[2] ^= ((DWORD_VAL*)&v)->v[1];
00667e   51eb     movf	0xeb, 0, 0x1        	MOVF	(_swapl_v_1_1 + 1), W, B
006680   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006682   5000     movf	0, 0, 0             	MOVF	r0x00, W
006684   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 2)
006686   6fec     movwf	0xec, 0x1          	MOVWF	(_swapl_v_1_1 + 2), B
006688   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 2)
                                           ;	.line	1030; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
00668a   51ec     movf	0xec, 0, 0x1        	MOVF	(_swapl_v_1_1 + 2), W, B
00668c   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 1)
00668e   19eb     xorwf	0xeb, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006690   6e00     movwf	0, 0               	MOVWF	r0x00
006692   5000     movf	0, 0, 0             	MOVF	r0x00, W
006694   0108     movlb	0x8                	BANKSEL	(_swapl_v_1_1 + 1)
006696   6feb     movwf	0xeb, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
                                           ;	.line	1032; TCPIP_Stack/Helpers.c	return v;
006698   c8ed     movff	0x8ed, 0xfe9       	MOVFF	(_swapl_v_1_1 + 3), FSR0L
00669a   ffe9
00669c   c8ec     movff	0x8ec, 0xff4       	MOVFF	(_swapl_v_1_1 + 2), PRODH
00669e   fff4
0066a0   c8eb     movff	0x8eb, 0xff3       	MOVFF	(_swapl_v_1_1 + 1), PRODL
0066a2   fff3
0066a4   0108     movlb	0x8                	BANKSEL	_swapl_v_1_1
0066a6   51ea     movf	0xea, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
0066a8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0066aa   f001
0066ac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0066ae   f000
0066b0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0066b2   ffd9
0066b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swaps	code
                                           _swaps:
                                           ;	.line	991; TCPIP_Stack/Helpers.c	WORD swaps(WORD v)
007362   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007364   ffe5
007366   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007368   ffd9
00736a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00736c   ffe5
00736e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007370   ffe5
007372   0e02     movlw	0x2                	MOVLW	0x02
007374   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007376   f000
007378   0e03     movlw	0x3                	MOVLW	0x03
00737a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00737c   f001
                                           ;	.line	996; TCPIP_Stack/Helpers.c	t.Val   = v;
00737e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007380   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007382   6f47     movwf	0x47, 0x1          	MOVWF	_swaps_t_1_1, B
007384   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007386   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007388   6f48     movwf	0x48, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	997; TCPIP_Stack/Helpers.c	b       = t.v[1];
00738a   ca48     movff	0xa48, 0           	MOVFF	(_swaps_t_1_1 + 1), r0x00
00738c   f000
                                           ;	.line	998; TCPIP_Stack/Helpers.c	t.v[1]  = t.v[0];
00738e   ca47     movff	0xa47, 0x1         	MOVFF	_swaps_t_1_1, r0x01
007390   f001
007392   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007394   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007396   6f48     movwf	0x48, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	999; TCPIP_Stack/Helpers.c	t.v[0]  = b;
007398   5000     movf	0, 0, 0             	MOVF	r0x00, W
00739a   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
00739c   6f47     movwf	0x47, 0x1          	MOVWF	_swaps_t_1_1, B
                                           ;	.line	1001; TCPIP_Stack/Helpers.c	return t.Val;
00739e   ca48     movff	0xa48, 0xff3       	MOVFF	(_swaps_t_1_1 + 1), PRODL
0073a0   fff3
0073a2   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
0073a4   5147     movf	0x47, 0, 0x1        	MOVF	_swaps_t_1_1, W, B
0073a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0073a8   f001
0073aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0073ac   f000
0073ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0073b0   ffd9
0073b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_low	code
                                           _btohexa_low:
                                           ;	.line	904; TCPIP_Stack/Helpers.c	BYTE btohexa_low(BYTE b)
0073b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0073b6   ffe5
0073b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0073ba   ffd9
0073bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0073be   ffe5
0073c0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0073c2   ffe5
0073c4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0073c6   ffe5
0073c8   0e02     movlw	0x2                	MOVLW	0x02
0073ca   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0073cc   f000
                                           ;	.line	906; TCPIP_Stack/Helpers.c	b &= 0x0F;
0073ce   0e0f     movlw	0xf                	MOVLW	0x0f
0073d0   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
                                           ;	.line	907; TCPIP_Stack/Helpers.c	return (b>9u) ? b+'A'-10:b+'0';
0073d2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0073d4   f001
0073d6   6a02     clrf	0x2, 0              	CLRF	r0x02
0073d8   0e00     movlw	0                  	MOVLW	0x00
0073da   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0073dc   e102     bnz	0x73e2               	BNZ	_00259_DS_
0073de   0e0a     movlw	0xa                	MOVLW	0x0a
0073e0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
0073e2   e304     bnc	0x73ec               	BNC	_00255_DS_
0073e4   0e37     movlw	0x37               	MOVLW	0x37
0073e6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0073e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0073ea   d003     bra	0x73f2               	BRA	_00256_DS_
                                           _00255_DS_:
0073ec   0e30     movlw	0x30               	MOVLW	0x30
0073ee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0073f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00256_DS_:
0073f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0073f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0073f6   f002
0073f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0073fa   f001
0073fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0073fe   f000
007400   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007402   ffd9
007404   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_high	code
                                           _btohexa_high:
                                           ;	.line	878; TCPIP_Stack/Helpers.c	BYTE btohexa_high(BYTE b)
00730e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007310   ffe5
007312   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007314   ffd9
007316   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007318   ffe5
00731a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00731c   ffe5
00731e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007320   ffe5
007322   0e02     movlw	0x2                	MOVLW	0x02
007324   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007326   f000
                                           ;	.line	880; TCPIP_Stack/Helpers.c	b >>= 4;
007328   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
00732a   0b0f     andlw	0xf                	ANDLW	0x0f
00732c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	881; TCPIP_Stack/Helpers.c	return (b>0x9u) ? b+'A'-10:b+'0';
00732e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007330   f001
007332   6a02     clrf	0x2, 0              	CLRF	r0x02
007334   0e00     movlw	0                  	MOVLW	0x00
007336   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007338   e102     bnz	0x733e               	BNZ	_00248_DS_
00733a   0e0a     movlw	0xa                	MOVLW	0x0a
00733c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00248_DS_:
00733e   e304     bnc	0x7348               	BNC	_00245_DS_
007340   0e37     movlw	0x37               	MOVLW	0x37
007342   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
007344   6e01     movwf	0x1, 0             	MOVWF	r0x01
007346   d003     bra	0x734e               	BRA	_00246_DS_
                                           _00245_DS_:
007348   0e30     movlw	0x30               	MOVLW	0x30
00734a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00734c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00246_DS_:
00734e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007350   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007352   f002
007354   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007356   f001
007358   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00735a   f000
00735c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00735e   ffd9
007360   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__hexatob	code
                                           _hexatob:
                                           ;	.line	829; TCPIP_Stack/Helpers.c	BYTE hexatob(WORD AsciiCharsarg)
0058bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0058be   ffe5
0058c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0058c2   ffd9
0058c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0058c6   ffe5
0058c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0058ca   ffe5
0058cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0058ce   ffe5
0058d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0058d2   ffe5
0058d4   0e02     movlw	0x2                	MOVLW	0x02
0058d6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0058d8   f000
0058da   0e03     movlw	0x3                	MOVLW	0x03
0058dc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0058de   f001
                                           ;	.line	832; TCPIP_Stack/Helpers.c	AsciiChars.v[0] = (BYTE)AsciiCharsarg&0xFF; //ML
0058e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0058e2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0058e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0058e6   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
0058e8   6f45     movwf	0x45, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           ;	.line	833; TCPIP_Stack/Helpers.c	AsciiChars.v[1] = (BYTE)(AsciiCharsarg>>8)&0xFF; //ML
0058ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0058ec   6e00     movwf	0, 0               	MOVWF	r0x00
0058ee   6a01     clrf	0x1, 0              	CLRF	r0x01
0058f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0058f2   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
0058f4   6f46     movwf	0x46, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           ;	.line	836; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'F')
0058f6   ca46     movff	0xa46, 0x1         	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x01
0058f8   f001
0058fa   6a02     clrf	0x2, 0              	CLRF	r0x02
0058fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0058fe   0f80     addlw	0x80               	ADDLW	0x80
005900   0f80     addlw	0x80               	ADDLW	0x80
005902   e102     bnz	0x5908               	BNZ	_00235_DS_
005904   0e47     movlw	0x47               	MOVLW	0x47
005906   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00235_DS_:
005908   e305     bnc	0x5914               	BNC	_00220_DS_
                                           ;	.line	837; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'a'-(int)'A';
00590a   0ee0     movlw	0xe0               	MOVLW	0xe0
00590c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00590e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005910   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005912   6f46     movwf	0x46, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00220_DS_:
                                           ;	.line	838; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'F')
005914   ca45     movff	0xa45, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005916   f000
005918   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00591a   f001
00591c   6a02     clrf	0x2, 0              	CLRF	r0x02
00591e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005920   0f80     addlw	0x80               	ADDLW	0x80
005922   0f80     addlw	0x80               	ADDLW	0x80
005924   e102     bnz	0x592a               	BNZ	_00236_DS_
005926   0e47     movlw	0x47               	MOVLW	0x47
005928   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00236_DS_:
00592a   e305     bnc	0x5936               	BNC	_00222_DS_
                                           ;	.line	839; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'a'-(int)'A';
00592c   0ee0     movlw	0xe0               	MOVLW	0xe0
00592e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005930   5000     movf	0, 0, 0             	MOVF	r0x00, W
005932   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005934   6f45     movwf	0x45, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00222_DS_:
                                           ;	.line	842; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'9')
005936   ca46     movff	0xa46, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005938   f000
00593a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00593c   f001
00593e   6a02     clrf	0x2, 0              	CLRF	r0x02
005940   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005942   0f80     addlw	0x80               	ADDLW	0x80
005944   0f80     addlw	0x80               	ADDLW	0x80
005946   e102     bnz	0x594c               	BNZ	_00237_DS_
005948   0e3a     movlw	0x3a               	MOVLW	0x3a
00594a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00237_DS_:
00594c   e307     bnc	0x595c               	BNC	_00224_DS_
                                           ;	.line	843; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'A' - 10;
00594e   0ec9     movlw	0xc9               	MOVLW	0xc9
005950   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005952   6e01     movwf	0x1, 0             	MOVWF	r0x01
005954   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005956   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005958   6f46     movwf	0x46, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
00595a   d005     bra	0x5966               	BRA	_00225_DS_
                                           _00224_DS_:
                                           ;	.line	845; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= '0';
00595c   0ed0     movlw	0xd0               	MOVLW	0xd0
00595e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005960   5000     movf	0, 0, 0             	MOVF	r0x00, W
005962   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005964   6f46     movwf	0x46, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00225_DS_:
                                           ;	.line	847; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'9')
005966   ca45     movff	0xa45, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005968   f000
00596a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00596c   f001
00596e   6a02     clrf	0x2, 0              	CLRF	r0x02
005970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005972   0f80     addlw	0x80               	ADDLW	0x80
005974   0f80     addlw	0x80               	ADDLW	0x80
005976   e102     bnz	0x597c               	BNZ	_00238_DS_
005978   0e3a     movlw	0x3a               	MOVLW	0x3a
00597a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00238_DS_:
00597c   e307     bnc	0x598c               	BNC	_00227_DS_
                                           ;	.line	848; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'A' - 10;
00597e   0ec9     movlw	0xc9               	MOVLW	0xc9
005980   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005982   6e01     movwf	0x1, 0             	MOVWF	r0x01
005984   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005986   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005988   6f45     movwf	0x45, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
00598a   d005     bra	0x5996               	BRA	_00228_DS_
                                           _00227_DS_:
                                           ;	.line	850; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'0';
00598c   0ed0     movlw	0xd0               	MOVLW	0xd0
00598e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005990   5000     movf	0, 0, 0             	MOVF	r0x00, W
005992   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005994   6f45     movwf	0x45, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00228_DS_:
                                           ;	.line	854; TCPIP_Stack/Helpers.c	return (WORD)((AsciiChars.v[1]<<4) |  AsciiChars.v[0]);
005996   ca46     movff	0xa46, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005998   f000
00599a   6a01     clrf	0x1, 0              	CLRF	r0x01
00599c   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
00599e   0bf0     andlw	0xf0               	ANDLW	0xf0
0059a0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0059a2   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0059a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0059a6   0b0f     andlw	0xf                	ANDLW	0x0f
0059a8   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
0059aa   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0059ac   ca45     movff	0xa45, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
0059ae   f000
0059b0   6a01     clrf	0x1, 0              	CLRF	r0x01
0059b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059b4   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
0059b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0059b8   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0059ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0059bc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0059be   f003
0059c0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0059c2   f002
0059c4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0059c6   f001
0059c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0059ca   f000
0059cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0059ce   ffd9
0059d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__StringToIPAddress	code
                                           _StringToIPAddress:
                                           ;	.line	330; TCPIP_Stack/Helpers.c	BOOL StringToIPAddress(BYTE* str, IP_ADDR* IPAddress)
002224   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002226   ffe5
002228   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00222a   ffd9
00222c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00222e   ffe5
002230   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002232   ffe5
002234   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002236   ffe5
002238   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00223a   ffe5
00223c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00223e   ffe5
002240   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002242   ffe5
002244   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002246   ffe5
002248   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00224a   ffe5
00224c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00224e   ffe5
002250   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002252   ffe5
002254   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002256   ffe5
002258   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00225a   ffe5
00225c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00225e   ffe5
002260   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002262   ffe5
002264   0e02     movlw	0x2                	MOVLW	0x02
002266   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002268   f000
00226a   0e03     movlw	0x3                	MOVLW	0x03
00226c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226e   f001
002270   0e04     movlw	0x4                	MOVLW	0x04
002272   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002274   f002
002276   0e05     movlw	0x5                	MOVLW	0x05
002278   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00227a   f003
00227c   0e06     movlw	0x6                	MOVLW	0x06
00227e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002280   f004
002282   0e07     movlw	0x7                	MOVLW	0x07
002284   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002286   f005
                                           ;	.line	335; TCPIP_Stack/Helpers.c	charLen = 0;
002288   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           ;	.line	336; TCPIP_Stack/Helpers.c	currentOctet = 0;
00228a   6a07     clrf	0x7, 0              	CLRF	r0x07
00228c   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	337; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00228e   6be6     clrf	0xe6, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002290   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002292   6be7     clrf	0xe7, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002294   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002296   6be8     clrf	0xe8, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002298   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00229a   6be9     clrf	0xe9, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           _00161_DS_:
                                           ;	.line	338; TCPIP_Stack/Helpers.c	while((i = *str++))
00229c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00229e   ffe9
0022a0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022a2   fff3
0022a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022a6   ec31     call	0x7862, 0           	CALL	__gptrget1
0022a8   f03c
0022aa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0022ac   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0022ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0022b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0022b6   c008     movff	0x8, 0x9           	MOVFF	r0x08, r0x09
0022b8   f009
0022ba   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022bc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0022be   d0d0     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	340; TCPIP_Stack/Helpers.c	if(currentOctet > 3u)
0022c0   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0022c2   f008
0022c4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022c6   0e00     movlw	0                  	MOVLW	0x00
0022c8   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022ca   e102     bnz	0x22d0               	BNZ	_00193_DS_
0022cc   0e04     movlw	0x4                	MOVLW	0x04
0022ce   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00193_DS_:
0022d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022d2   d0c6     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	343; TCPIP_Stack/Helpers.c	i -= '0';
0022d4   0ed0     movlw	0xd0               	MOVLW	0xd0
0022d6   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
                                           ;	.line	347; TCPIP_Stack/Helpers.c	if(charLen == 0u)
0022d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0022da   e10c     bnz	0x22f4               	BNZ	_00159_DS_
                                           ;	.line	349; TCPIP_Stack/Helpers.c	if(i > 9u)
0022dc   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0022de   f008
0022e0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022e2   0e00     movlw	0                  	MOVLW	0x00
0022e4   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022e6   e102     bnz	0x22ec               	BNZ	_00194_DS_
0022e8   0e0a     movlw	0xa                	MOVLW	0x0a
0022ea   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00194_DS_:
0022ec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0022ee   d09d     bra	0x242a               	BRA	_00160_DS_
                                           ;	.line	350; TCPIP_Stack/Helpers.c	return FALSE;
0022f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0022f2   d107     bra	0x2502               	BRA	_00173_DS_
                                           _00159_DS_:
                                           ;	.line	352; TCPIP_Stack/Helpers.c	else if(charLen == 3u)
0022f4   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0022f6   f008
0022f8   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022fa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022fc   0a03     xorlw	0x3                	XORLW	0x03
0022fe   e102     bnz	0x2304               	BNZ	_00195_DS_
002300   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002302   e001     bz	0x2306                	BZ	_00196_DS_
                                           _00195_DS_:
002304   d044     bra	0x238e               	BRA	_00156_DS_
                                           _00196_DS_:
                                           ;	.line	354; TCPIP_Stack/Helpers.c	if(i != (BYTE)('.' - '0'))
002306   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002308   0afe     xorlw	0xfe               	XORLW	0xfe
00230a   e002     bz	0x2310                	BZ	_00146_DS_
                                           ;	.line	355; TCPIP_Stack/Helpers.c	return FALSE;
00230c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00230e   d0f9     bra	0x2502               	BRA	_00173_DS_
                                           _00146_DS_:
                                           ;	.line	357; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002310   0e00     movlw	0                  	MOVLW	0x00
002312   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002314   5de9     subwf	0xe9, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
002316   e10b     bnz	0x232e               	BNZ	_00199_DS_
002318   0e02     movlw	0x2                	MOVLW	0x02
00231a   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00231c   5de8     subwf	0xe8, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00231e   e107     bnz	0x232e               	BNZ	_00199_DS_
002320   0e05     movlw	0x5                	MOVLW	0x05
002322   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002324   5de7     subwf	0xe7, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002326   e103     bnz	0x232e               	BNZ	_00199_DS_
002328   0e06     movlw	0x6                	MOVLW	0x06
00232a   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
00232c   5de6     subwf	0xe6, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00199_DS_:
00232e   e302     bnc	0x2334               	BNC	_00148_DS_
                                           ;	.line	358; TCPIP_Stack/Helpers.c	return FALSE;
002330   6ae8     clrf	0xe8, 0             	CLRF	WREG
002332   d0e7     bra	0x2502               	BRA	_00173_DS_
                                           _00148_DS_:
                                           ;	.line	360; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
002334   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
002336   f008
002338   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00233a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00233c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00233e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002340   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002342   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002344   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
002346   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002348   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00234a   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00234c   51e8     movf	0xe8, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00234e   0d64     mullw	0x64               	MULLW	0x64
002350   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002352   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002354   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002356   51e7     movf	0xe7, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002358   0d0a     mullw	0xa                	MULLW	0x0a
00235a   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
00235c   f00d
00235e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002360   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002362   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
002364   51e6     movf	0xe6, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
002366   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002368   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00236a   ffe5
00236c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00236e   ffe9
002370   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
002372   fff3
002374   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002376   ecf3     call	0x79e6, 0           	CALL	__gptrput1
002378   f03c
                                           ;	.line	361; TCPIP_Stack/Helpers.c	charLen = 0;
00237a   6a06     clrf	0x6, 0              	CLRF	r0x06
00237c   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	362; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00237e   6be6     clrf	0xe6, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002380   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002382   6be7     clrf	0xe7, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002384   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002386   6be8     clrf	0xe8, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002388   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00238a   6be9     clrf	0xe9, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	363; TCPIP_Stack/Helpers.c	continue;
00238c   d787     bra	0x229c               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	367; TCPIP_Stack/Helpers.c	if(i == (BYTE)('.' - '0'))
00238e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002390   0afe     xorlw	0xfe               	XORLW	0xfe
002392   e001     bz	0x2396                	BZ	_00201_DS_
002394   d03f     bra	0x2414               	BRA	_00152_DS_
                                           _00201_DS_:
                                           ;	.line	369; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002396   0e00     movlw	0                  	MOVLW	0x00
002398   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00239a   5de9     subwf	0xe9, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
00239c   e10b     bnz	0x23b4               	BNZ	_00202_DS_
00239e   0e02     movlw	0x2                	MOVLW	0x02
0023a0   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023a2   5de8     subwf	0xe8, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023a4   e107     bnz	0x23b4               	BNZ	_00202_DS_
0023a6   0e05     movlw	0x5                	MOVLW	0x05
0023a8   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023aa   5de7     subwf	0xe7, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023ac   e103     bnz	0x23b4               	BNZ	_00202_DS_
0023ae   0e06     movlw	0x6                	MOVLW	0x06
0023b0   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023b2   5de6     subwf	0xe6, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00202_DS_:
0023b4   e302     bnc	0x23ba               	BNC	_00150_DS_
                                           ;	.line	370; TCPIP_Stack/Helpers.c	return FALSE;
0023b6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0023b8   d0a4     bra	0x2502               	BRA	_00173_DS_
                                           _00150_DS_:
                                           ;	.line	372; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0023ba   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0023bc   f008
0023be   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0023c0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0023c2   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0023c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023c6   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0023c8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023ca   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0023cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023ce   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023d0   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023d2   51e8     movf	0xe8, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023d4   0d64     mullw	0x64               	MULLW	0x64
0023d6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
0023d8   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023da   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023dc   51e7     movf	0xe7, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023de   0d0a     mullw	0xa                	MULLW	0x0a
0023e0   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0023e2   f00d
0023e4   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0023e6   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023e8   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023ea   51e6     movf	0xe6, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0023ec   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023ee   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0023f0   ffe5
0023f2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0023f4   ffe9
0023f6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0023f8   fff3
0023fa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0023fc   ecf3     call	0x79e6, 0           	CALL	__gptrput1
0023fe   f03c
                                           ;	.line	373; TCPIP_Stack/Helpers.c	charLen = 0;
002400   6a06     clrf	0x6, 0              	CLRF	r0x06
002402   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	374; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
002404   6be6     clrf	0xe6, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002406   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002408   6be7     clrf	0xe7, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
00240a   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00240c   6be8     clrf	0xe8, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
00240e   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002410   6be9     clrf	0xe9, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	375; TCPIP_Stack/Helpers.c	continue;
002412   d744     bra	0x229c               	BRA	_00161_DS_
                                           _00152_DS_:
                                           ;	.line	377; TCPIP_Stack/Helpers.c	if(i > 9u)
002414   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
002416   f008
002418   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00241a   0e00     movlw	0                  	MOVLW	0x00
00241c   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00241e   e102     bnz	0x2424               	BNZ	_00203_DS_
002420   0e0a     movlw	0xa                	MOVLW	0x0a
002422   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00203_DS_:
002424   e302     bnc	0x242a               	BNC	_00160_DS_
                                           ;	.line	378; TCPIP_Stack/Helpers.c	return FALSE;
002426   6ae8     clrf	0xe8, 0             	CLRF	WREG
002428   d06c     bra	0x2502               	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	381; TCPIP_Stack/Helpers.c	charLen++;
00242a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00242c   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
                                           ;	.line	382; TCPIP_Stack/Helpers.c	dwVal.Val <<= 8;
00242e   51e8     movf	0xe8, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
002430   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002432   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002434   51e7     movf	0xe7, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002436   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002438   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
00243a   51e6     movf	0xe6, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
00243c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00243e   6a08     clrf	0x8, 0              	CLRF	r0x08
002440   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002442   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
002444   6fe6     movwf	0xe6, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
002446   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002448   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00244a   6fe7     movwf	0xe7, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 1), B
00244c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00244e   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002450   6fe8     movwf	0xe8, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 2), B
002452   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002454   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002456   6fe9     movwf	0xe9, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	383; TCPIP_Stack/Helpers.c	dwVal.v[0] = i;
002458   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00245a   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
00245c   6fe6     movwf	0xe6, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
00245e   d71e     bra	0x229c               	BRA	_00161_DS_
                                           _00163_DS_:
                                           ;	.line	389; TCPIP_Stack/Helpers.c	if(i != 0u && i != (int)'/' && i != (int)'\r' && i != (int)'\n' && i !=(int) ' ' && i != (int)'\t')
002460   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002462   e01e     bz	0x24a0                	BZ	_00165_DS_
002464   c009     movff	0x9, 0             	MOVFF	r0x09, r0x00
002466   f000
002468   6a01     clrf	0x1, 0              	CLRF	r0x01
00246a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00246c   0a2f     xorlw	0x2f               	XORLW	0x2f
00246e   e102     bnz	0x2474               	BNZ	_00205_DS_
002470   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002472   e016     bz	0x24a0                	BZ	_00165_DS_
                                           _00205_DS_:
002474   5000     movf	0, 0, 0             	MOVF	r0x00, W
002476   0a0d     xorlw	0xd                	XORLW	0x0d
002478   e102     bnz	0x247e               	BNZ	_00207_DS_
00247a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00247c   e011     bz	0x24a0                	BZ	_00165_DS_
                                           _00207_DS_:
00247e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002480   0a0a     xorlw	0xa                	XORLW	0x0a
002482   e102     bnz	0x2488               	BNZ	_00209_DS_
002484   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002486   e00c     bz	0x24a0                	BZ	_00165_DS_
                                           _00209_DS_:
002488   5000     movf	0, 0, 0             	MOVF	r0x00, W
00248a   0a20     xorlw	0x20               	XORLW	0x20
00248c   e102     bnz	0x2492               	BNZ	_00211_DS_
00248e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002490   e007     bz	0x24a0                	BZ	_00165_DS_
                                           _00211_DS_:
002492   5000     movf	0, 0, 0             	MOVF	r0x00, W
002494   0a09     xorlw	0x9                	XORLW	0x09
002496   e102     bnz	0x249c               	BNZ	_00213_DS_
002498   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00249a   e002     bz	0x24a0                	BZ	_00165_DS_
                                           _00213_DS_:
                                           ;	.line	390; TCPIP_Stack/Helpers.c	return FALSE;
00249c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00249e   d031     bra	0x2502               	BRA	_00173_DS_
                                           _00165_DS_:
                                           ;	.line	393; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
0024a0   0e00     movlw	0                  	MOVLW	0x00
0024a2   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0024a4   5de9     subwf	0xe9, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
0024a6   e10b     bnz	0x24be               	BNZ	_00214_DS_
0024a8   0e02     movlw	0x2                	MOVLW	0x02
0024aa   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024ac   5de8     subwf	0xe8, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024ae   e107     bnz	0x24be               	BNZ	_00214_DS_
0024b0   0e05     movlw	0x5                	MOVLW	0x05
0024b2   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024b4   5de7     subwf	0xe7, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024b6   e103     bnz	0x24be               	BNZ	_00214_DS_
0024b8   0e06     movlw	0x6                	MOVLW	0x06
0024ba   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024bc   5de6     subwf	0xe6, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00214_DS_:
0024be   e302     bnc	0x24c4               	BNC	_00172_DS_
                                           ;	.line	394; TCPIP_Stack/Helpers.c	return FALSE;
0024c0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0024c2   d01f     bra	0x2502               	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	396; TCPIP_Stack/Helpers.c	IPAddress->v[3] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0024c4   0e03     movlw	0x3                	MOVLW	0x03
0024c6   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0024c8   0e00     movlw	0                  	MOVLW	0x00
0024ca   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0024cc   0e00     movlw	0                  	MOVLW	0x00
0024ce   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024d0   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024d2   51e8     movf	0xe8, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024d4   0d64     mullw	0x64               	MULLW	0x64
0024d6   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0024d8   f000
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024da   0108     movlb	0x8                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024dc   51e7     movf	0xe7, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024de   0d0a     mullw	0xa                	MULLW	0x0a
0024e0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0024e2   f001
0024e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024e6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024e8   0108     movlb	0x8                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024ea   51e6     movf	0xe6, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0024ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024f0   ffe5
0024f2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0024f4   ffe9
0024f6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0024f8   fff3
0024fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024fc   ecf3     call	0x79e6, 0           	CALL	__gptrput1
0024fe   f03c
                                           ;	.line	398; TCPIP_Stack/Helpers.c	return TRUE;
002500   0e01     movlw	0x1                	MOVLW	0x01
                                           _00173_DS_:
002502   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002504   f00d
002506   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002508   f00c
00250a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00250c   f00b
00250e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002510   f00a
002512   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002514   f009
002516   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002518   f008
00251a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00251c   f007
00251e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002520   f006
002522   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002524   f005
002526   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002528   f004
00252a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00252c   f003
00252e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002530   f002
002532   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002534   f001
002536   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002538   f000
00253a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00253c   ffd9
00253e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__GenerateRandomDWORD	code
                                           _GenerateRandomDWORD:
                                           ;	.line	106; TCPIP_Stack/Helpers.c	DWORD GenerateRandomDWORD(void)
002b14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b16   ffe5
002b18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b1a   ffd9
002b1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1e   ffe5
002b20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b22   ffe5
002b24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b26   ffe5
002b28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b2a   ffe5
002b2c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b2e   ffe5
002b30   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b32   ffe5
002b34   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b36   ffe5
002b38   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b3a   ffe5
002b3c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002b3e   ffe5
002b40   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002b42   ffe5
002b44   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002b46   ffe5
002b48   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002b4a   ffe5
002b4c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002b4e   ffe5
002b50   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002b52   ffe5
002b54   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002b56   ffe5
002b58   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002b5a   ffe5
002b5c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002b5e   ffe5
002b60   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002b62   ffe5
002b64   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002b66   ffe5
002b68   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002b6a   ffe5
002b6c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002b6e   ffe5
002b70   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002b72   ffe5
002b74   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
002b76   ffe5
002b78   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
002b7a   ffe5
002b7c   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
002b7e   ffe5
002b80   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
002b82   ffe5
002b84   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
002b86   ffe5
002b88   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
002b8a   ffe5
002b8c   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
002b8e   ffe5
002b90   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
002b92   ffe5
                                           ;	.line	119; TCPIP_Stack/Helpers.c	ADCON0Save = ADCON0;
002b94   cfc2     movff	0xfc2, 0           	MOVFF	_ADCON0, r0x00
002b96   f000
                                           ;	.line	120; TCPIP_Stack/Helpers.c	ADCON2Save = ADCON2;
002b98   cfc0     movff	0xfc0, 0x1         	MOVFF	_ADCON2, r0x01
002b9a   f001
                                           ;	.line	121; TCPIP_Stack/Helpers.c	T0CONSave = T0CON;
002b9c   cfd5     movff	0xfd5, 0x2         	MOVFF	_T0CON, r0x02
002b9e   f002
                                           ;	.line	122; TCPIP_Stack/Helpers.c	TMR0LSave = TMR0L;
002ba0   cfd6     movff	0xfd6, 0x3         	MOVFF	_TMR0L, r0x03
002ba2   f003
                                           ;	.line	123; TCPIP_Stack/Helpers.c	TMR0HSave = TMR0H;
002ba4   cfd7     movff	0xfd7, 0x4         	MOVFF	_TMR0H, r0x04
002ba6   f004
                                           ;	.line	126; TCPIP_Stack/Helpers.c	ADCON0 = 0x01;	// Turn on the A/D module
002ba8   0e01     movlw	0x1                	MOVLW	0x01
002baa   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	127; TCPIP_Stack/Helpers.c	ADCON2 = 0x3F;	// 20 Tad acquisition, Frc A/D clock used for conversion
002bac   0e3f     movlw	0x3f               	MOVLW	0x3f
002bae   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	128; TCPIP_Stack/Helpers.c	T0CON = 0x88;	// TMR0ON = 1, no prescalar
002bb0   0e88     movlw	0x88               	MOVLW	0x88
002bb2   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	130; TCPIP_Stack/Helpers.c	dwTotalTime = 0;
002bb4   6a05     clrf	0x5, 0              	CLRF	r0x05
002bb6   6a06     clrf	0x6, 0              	CLRF	r0x06
002bb8   6a07     clrf	0x7, 0              	CLRF	r0x07
002bba   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           ;	.line	131; TCPIP_Stack/Helpers.c	wLastValue = 0;
002bbc   6a09     clrf	0x9, 0              	CLRF	r0x09
002bbe   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	132; TCPIP_Stack/Helpers.c	dwRandomResult = rand();
002bc0   ec03     call	0x7406, 0           	CALL	_rand
002bc2   f03a
002bc4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002bc6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002bc8   f00c
002bca   cff4     movff	0xff4, 0xd         	MOVFF	PRODH, r0x0d
002bcc   f00d
002bce   cfe9     movff	0xfe9, 0xe         	MOVFF	FSR0L, r0x0e
002bd0   f00e
                                           ;	.line	133; TCPIP_Stack/Helpers.c	while(1)
002bd2   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00120_DS_:
                                           ;	.line	136; TCPIP_Stack/Helpers.c	TMR0H = 0x00;
002bd4   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	137; TCPIP_Stack/Helpers.c	TMR0L = 0x00;
002bd6   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	138; TCPIP_Stack/Helpers.c	ADCON0bits.GO = 1;
002bd8   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
002bda   0004     clrwdt                   	clrwdt 
                                           _00108_DS_:
                                           ;	.line	140; TCPIP_Stack/Helpers.c	while(ADCON0bits.GO);
002bdc   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
002bde   d7fe     bra	0x2bdc               	BRA	_00108_DS_
                                           ;	.line	141; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[0] = TMR0L;
002be0   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
002be2   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002be4   6f43     movwf	0x43, 0x1          	MOVWF	_GenerateRandomDWORD_wTime_1_1, B
                                           ;	.line	142; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[1] = TMR0H;
002be6   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
002be8   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002bea   6f44     movwf	0x44, 0x1          	MOVWF	(_GenerateRandomDWORD_wTime_1_1 + 1), B
                                           ;	.line	143; TCPIP_Stack/Helpers.c	w = rand();
002bec   ec03     call	0x7406, 0           	CALL	_rand
002bee   f03a
002bf0   6e10     movwf	0x10, 0            	MOVWF	r0x10
002bf2   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002bf4   f011
002bf6   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002bf8   f012
002bfa   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002bfc   f013
                                           ;	.line	146; TCPIP_Stack/Helpers.c	dwTotalTime += wTime;
002bfe   ca43     movff	0xa43, 0x12        	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x12
002c00   f012
002c02   ca44     movff	0xa44, 0x13        	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x13
002c04   f013
002c06   6a14     clrf	0x14, 0             	CLRF	r0x14
002c08   6a15     clrf	0x15, 0             	CLRF	r0x15
002c0a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002c0c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002c0e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002c10   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002c12   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002c14   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
002c16   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002c18   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
                                           ;	.line	147; TCPIP_Stack/Helpers.c	if(dwTotalTime >= GetInstructionClock())
002c1a   0e00     movlw	0                  	MOVLW	0x00
002c1c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
002c1e   e108     bnz	0x2c30               	BNZ	_00130_DS_
002c20   0e9e     movlw	0x9e               	MOVLW	0x9e
002c22   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
002c24   e105     bnz	0x2c30               	BNZ	_00130_DS_
002c26   0ef2     movlw	0xf2               	MOVLW	0xf2
002c28   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002c2a   e102     bnz	0x2c30               	BNZ	_00130_DS_
002c2c   0e1a     movlw	0x1a               	MOVLW	0x1a
002c2e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00130_DS_:
002c30   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002c32   d048     bra	0x2cc4               	BRA	_00112_DS_
                                           ;	.line	149; TCPIP_Stack/Helpers.c	dwRandomResult ^= rand() | (((DWORD)rand())<<15ul) | (((DWORD)rand())<<30ul);
002c34   ec03     call	0x7406, 0           	CALL	_rand
002c36   f03a
002c38   6e12     movwf	0x12, 0            	MOVWF	r0x12
002c3a   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
002c3c   f013
002c3e   cff4     movff	0xff4, 0x14        	MOVFF	PRODH, r0x14
002c40   f014
002c42   cfe9     movff	0xfe9, 0x15        	MOVFF	FSR0L, r0x15
002c44   f015
002c46   ec03     call	0x7406, 0           	CALL	_rand
002c48   f03a
002c4a   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c4c   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c4e   f017
002c50   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c52   f018
002c54   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c56   f019
002c58   3018     rrcf	0x18, 0, 0          	RRCF	r0x18, W
002c5a   3017     rrcf	0x17, 0, 0          	RRCF	r0x17, W
002c5c   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c5e   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002c60   321c     rrcf	0x1c, 0x1, 0        	RRCF	r0x1c, F
002c62   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c64   0b80     andlw	0x80               	ANDLW	0x80
002c66   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
002c68   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002c6a   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c6c   0b7f     andlw	0x7f               	ANDLW	0x7f
002c6e   121c     iorwf	0x1c, 0x1, 0       	IORWF	r0x1c, F
002c70   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c72   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002c74   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002c76   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002c78   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002c7a   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002c7c   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002c7e   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002c80   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002c82   ec03     call	0x7406, 0           	CALL	_rand
002c84   f03a
002c86   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c88   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c8a   f017
002c8c   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c8e   f018
002c90   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c92   f019
002c94   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c96   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c98   0bc0     andlw	0xc0               	ANDLW	0xc0
002c9a   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c9c   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c9e   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
002ca0   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002ca2   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002ca4   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002ca6   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002ca8   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002caa   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002cac   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002cae   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002cb0   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002cb2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cb4   1a0b     xorwf	0xb, 0x1, 0        	XORWF	r0x0b, F
002cb6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cb8   1a0c     xorwf	0xc, 0x1, 0        	XORWF	r0x0c, F
002cba   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002cbc   1a0d     xorwf	0xd, 0x1, 0        	XORWF	r0x0d, F
002cbe   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002cc0   1a0e     xorwf	0xe, 0x1, 0        	XORWF	r0x0e, F
                                           ;	.line	150; TCPIP_Stack/Helpers.c	break;
002cc2   d047     bra	0x2d52               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	154; TCPIP_Stack/Helpers.c	if(wLastValue == wTime)
002cc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002cc6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002cc8   1943     xorwf	0x43, 0, 0x1       	XORWF	_GenerateRandomDWORD_wTime_1_1, W, B
002cca   e105     bnz	0x2cd6               	BNZ	_00135_DS_
002ccc   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002cce   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002cd0   1944     xorwf	0x44, 0, 0x1       	XORWF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002cd2   e101     bnz	0x2cd6               	BNZ	_00135_DS_
002cd4   d77f     bra	0x2bd4               	BRA	_00120_DS_
                                           _00135_DS_:
002cd6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
                                           ;	.line	158; TCPIP_Stack/Helpers.c	srand(w + (wLastValue - wTime));
002cd8   5143     movf	0x43, 0, 0x1        	MOVF	_GenerateRandomDWORD_wTime_1_1, W, B
002cda   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
002cdc   6e12     movwf	0x12, 0            	MOVWF	r0x12
002cde   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002ce0   5144     movf	0x44, 0, 0x1        	MOVF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002ce2   580a     subwfb	0xa, 0, 0         	SUBWFB	r0x0a, W
002ce4   6e13     movwf	0x13, 0            	MOVWF	r0x13
002ce6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002ce8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
002cea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cec   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
002cee   6a12     clrf	0x12, 0             	CLRF	r0x12
002cf0   6a13     clrf	0x13, 0             	CLRF	r0x13
002cf2   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d02   ec0d     call	0x781a, 0           	CALL	_srand
002d04   f03c
002d06   0e04     movlw	0x4                	MOVLW	0x04
002d08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; TCPIP_Stack/Helpers.c	wLastValue = wTime;
002d0a   ca43     movff	0xa43, 0x9         	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x09
002d0c   f009
002d0e   ca44     movff	0xa44, 0xa         	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x0a
002d10   f00a
                                           ;	.line	162; TCPIP_Stack/Helpers.c	dwRandomResult <<= 1;
002d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d14   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
002d16   360c     rlcf	0xc, 0x1, 0         	RLCF	r0x0c, F
002d18   360d     rlcf	0xd, 0x1, 0         	RLCF	r0x0d, F
002d1a   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
                                           ;	.line	163; TCPIP_Stack/Helpers.c	if(rand() >= 16384)
002d1c   ec03     call	0x7406, 0           	CALL	_rand
002d1e   f03a
002d20   6e10     movwf	0x10, 0            	MOVWF	r0x10
002d22   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002d24   f011
002d26   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002d28   f012
002d2a   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002d2c   f013
002d2e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002d30   0f80     addlw	0x80               	ADDLW	0x80
002d32   0f80     addlw	0x80               	ADDLW	0x80
002d34   e108     bnz	0x2d46               	BNZ	_00136_DS_
002d36   0e00     movlw	0                  	MOVLW	0x00
002d38   5c12     subwf	0x12, 0, 0         	SUBWF	r0x12, W
002d3a   e105     bnz	0x2d46               	BNZ	_00136_DS_
002d3c   0e40     movlw	0x40               	MOVLW	0x40
002d3e   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
002d40   e102     bnz	0x2d46               	BNZ	_00136_DS_
002d42   0e00     movlw	0                  	MOVLW	0x00
002d44   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
                                           _00136_DS_:
002d46   e301     bnc	0x2d4a               	BNC	_00116_DS_
                                           ;	.line	164; TCPIP_Stack/Helpers.c	dwRandomResult |= 0x1;
002d48   800b     bsf	0xb, 0, 0            	BSF	r0x0b, 0
                                           _00116_DS_:
                                           ;	.line	167; TCPIP_Stack/Helpers.c	if(++vBitCount == 0u)
002d4a   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
002d4c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002d4e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
002d50   d741     bra	0x2bd4               	BRA	_00120_DS_
                                           _00121_DS_:
                                           ;	.line	172; TCPIP_Stack/Helpers.c	ADCON0 = ADCON0Save;
002d52   c000     movff	0, 0xfc2           	MOVFF	r0x00, _ADCON0
002d54   ffc2
                                           ;	.line	173; TCPIP_Stack/Helpers.c	ADCON2 = ADCON2Save;
002d56   c001     movff	0x1, 0xfc0         	MOVFF	r0x01, _ADCON2
002d58   ffc0
                                           ;	.line	174; TCPIP_Stack/Helpers.c	TMR0H = TMR0HSave;
002d5a   c004     movff	0x4, 0xfd7         	MOVFF	r0x04, _TMR0H
002d5c   ffd7
                                           ;	.line	175; TCPIP_Stack/Helpers.c	TMR0L = TMR0LSave;
002d5e   c003     movff	0x3, 0xfd6         	MOVFF	r0x03, _TMR0L
002d60   ffd6
                                           ;	.line	176; TCPIP_Stack/Helpers.c	T0CON = T0CONSave;
002d62   c002     movff	0x2, 0xfd5         	MOVFF	r0x02, _T0CON
002d64   ffd5
                                           ;	.line	254; TCPIP_Stack/Helpers.c	return dwRandomResult;
002d66   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
002d68   ffe9
002d6a   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
002d6c   fff4
002d6e   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
002d70   fff3
002d72   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d74   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
002d76   f01d
002d78   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
002d7a   f01c
002d7c   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
002d7e   f01b
002d80   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
002d82   f01a
002d84   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
002d86   f019
002d88   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
002d8a   f018
002d8c   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
002d8e   f017
002d90   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
002d92   f016
002d94   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002d96   f015
002d98   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002d9a   f014
002d9c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002d9e   f013
002da0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002da2   f012
002da4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002da6   f011
002da8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002daa   f010
002dac   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002dae   f00f
002db0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002db2   f00e
002db4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002db6   f00d
002db8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002dba   f00c
002dbc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002dbe   f00b
002dc0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002dc2   f00a
002dc4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002dc6   f009
002dc8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002dca   f008
002dcc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002dce   f007
002dd0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002dd2   f006
002dd4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002dd6   f005
002dd8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dda   f004
002ddc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002dde   f003
002de0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002de2   f002
002de4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002de6   f001
002de8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dea   f000
002dec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dee   ffd9
002df0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3510 (0x0db6) bytes ( 2.68%)
                                           ;           	 1755 (0x06db) words
                                           ; udata size:	   24 (0x0018) bytes ( 0.62%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:31 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ICMPProcess
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACMemCopyAsync
                                           	extern _MACIsMemCopyDone
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_ICMP_0	udata
                                           _ICMPProcess_dwVal_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ICMP__ICMPProcess	code
                                           _ICMPProcess:
                                           ;	.line	132; TCPIP_Stack/ICMP.c	void ICMPProcess(NODE_INFO *remote, WORD len)
00477c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00477e   ffe5
004780   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004782   ffd9
004784   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004786   ffe5
004788   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00478a   ffe5
00478c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00478e   ffe5
004790   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004792   ffe5
004794   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004796   ffe5
004798   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00479a   ffe5
00479c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00479e   ffe5
0047a0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0047a2   ffe5
0047a4   0e02     movlw	0x2                	MOVLW	0x02
0047a6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0047a8   f000
0047aa   0e03     movlw	0x3                	MOVLW	0x03
0047ac   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0047ae   f001
0047b0   0e04     movlw	0x4                	MOVLW	0x04
0047b2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0047b4   f002
0047b6   0e05     movlw	0x5                	MOVLW	0x05
0047b8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0047ba   f003
0047bc   0e06     movlw	0x6                	MOVLW	0x06
0047be   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0047c0   f004
                                           ;	.line	137; TCPIP_Stack/ICMP.c	MACGetArray((BYTE*)&dwVal, sizeof(dwVal));
0047c2   0e08     movlw	0x8                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
0047c4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0047c6   0ef6     movlw	0xf6               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
0047c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0047ca   0e80     movlw	0x80               	MOVLW	0x80
0047cc   6e07     movwf	0x7, 0             	MOVWF	r0x07
0047ce   0e00     movlw	0                  	MOVLW	0x00
0047d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047d2   0e04     movlw	0x4                	MOVLW	0x04
0047d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047d6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0047d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047da   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0047dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047de   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0047e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047e2   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
0047e4   f02f
0047e6   0e05     movlw	0x5                	MOVLW	0x05
0047e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0047ea   0108     movlb	0x8                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	140; TCPIP_Stack/ICMP.c	if(dwVal.w[0] == 0x0008u)
0047ec   51f6     movf	0xf6, 0, 0x1        	MOVF	_ICMPProcess_dwVal_1_1, W, B
0047ee   0a08     xorlw	0x8                	XORLW	0x08
0047f0   e103     bnz	0x47f8               	BNZ	_00129_DS_
0047f2   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 1)
0047f4   51f7     movf	0xf7, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 1), W, B
0047f6   e001     bz	0x47fa                	BZ	_00130_DS_
                                           _00129_DS_:
0047f8   d07e     bra	0x48f6               	BRA	_00119_DS_
                                           _00130_DS_:
                                           ;	.line	146; TCPIP_Stack/ICMP.c	if(MACCalcRxChecksum(0+sizeof(IP_HEADER), len))
0047fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0047fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004800   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004802   0e00     movlw	0                  	MOVLW	0x00
004804   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004806   0e14     movlw	0x14               	MOVLW	0x14
004808   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00480a   ec2c     call	0x5458, 0           	CALL	_MACCalcRxChecksum
00480c   f02a
00480e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004810   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004812   f006
004814   0e04     movlw	0x4                	MOVLW	0x04
004816   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004818   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00481a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00481c   e001     bz	0x4820                	BZ	_00106_DS_
                                           ;	.line	147; TCPIP_Stack/ICMP.c	return;
00481e   d06b     bra	0x48f6               	BRA	_00119_DS_
                                           _00106_DS_:
004820   0108     movlb	0x8                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	150; TCPIP_Stack/ICMP.c	dwVal.v[0] = 0x00;	// Type: 0 (ICMP echo/ping reply)
004822   6bf6     clrf	0xf6, 0x1           	CLRF	_ICMPProcess_dwVal_1_1, B
                                           ;	.line	151; TCPIP_Stack/ICMP.c	dwVal.v[2] += 8;	// Subtract 0x0800 from the checksum
004824   0e08     movlw	0x8                	MOVLW	0x08
004826   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
004828   25f8     addwf	0xf8, 0, 0x1       	ADDWF	(_ICMPProcess_dwVal_1_1 + 2), W, B
00482a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00482c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00482e   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
004830   6ff8     movwf	0xf8, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           ;	.line	152; TCPIP_Stack/ICMP.c	if(dwVal.v[2] < 8u)
004832   c8f8     movff	0x8f8, 0x6         	MOVFF	(_ICMPProcess_dwVal_1_1 + 2), r0x06
004834   f006
004836   6a07     clrf	0x7, 0              	CLRF	r0x07
004838   0e00     movlw	0                  	MOVLW	0x00
00483a   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
00483c   e102     bnz	0x4842               	BNZ	_00131_DS_
00483e   0e08     movlw	0x8                	MOVLW	0x08
004840   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00131_DS_:
004842   e20d     bc	0x485e                	BC	_00111_DS_
                                           ;	.line	154; TCPIP_Stack/ICMP.c	dwVal.v[3]++;
004844   c8f9     movff	0x8f9, 0x5         	MOVFF	(_ICMPProcess_dwVal_1_1 + 3), r0x05
004846   f005
004848   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00484a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00484c   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
00484e   6ff9     movwf	0xf9, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 3), B
004850   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
                                           ;	.line	155; TCPIP_Stack/ICMP.c	if(dwVal.v[3] == 0u) dwVal.v[2]++;
004852   51f9     movf	0xf9, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 3), W, B
004854   e104     bnz	0x485e               	BNZ	_00111_DS_
004856   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
004858   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00485a   0108     movlb	0x8                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
00485c   6ff8     movwf	0xf8, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           _00111_DS_:
                                           ;	.line	160; TCPIP_Stack/ICMP.c	while(!IPIsTxReady());
00485e   ecc1     call	0x6f82, 0           	CALL	_MACIsTxReady
004860   f037
004862   6e05     movwf	0x5, 0             	MOVWF	r0x05
004864   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004866   e0fb     bz	0x485e                	BZ	_00111_DS_
                                           ;	.line	165; TCPIP_Stack/ICMP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
004868   0e1a     movlw	0x1a               	MOVLW	0x1a
00486a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00486c   0e19     movlw	0x19               	MOVLW	0x19
00486e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004870   ecc0     call	0x6d80, 0           	CALL	_MACSetWritePtr
004872   f036
004874   0e02     movlw	0x2                	MOVLW	0x02
004876   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; TCPIP_Stack/ICMP.c	IPPutHeader(remote, IP_PROT_ICMP, len);
004878   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00487a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00487c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00487e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004880   0e01     movlw	0x1                	MOVLW	0x01
004882   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004884   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004886   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004888   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00488a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00488c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00488e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004890   ec0a     call	0x4214, 0           	CALL	_IPPutHeader
004892   f021
004894   0e06     movlw	0x6                	MOVLW	0x06
004896   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; TCPIP_Stack/ICMP.c	MACPutArray((BYTE*)&dwVal, sizeof(dwVal));
004898   0e08     movlw	0x8                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
00489a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00489c   0ef6     movlw	0xf6               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
00489e   6e00     movwf	0, 0               	MOVWF	r0x00
0048a0   0e80     movlw	0x80               	MOVLW	0x80
0048a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0048a4   0e00     movlw	0                  	MOVLW	0x00
0048a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048a8   0e04     movlw	0x4                	MOVLW	0x04
0048aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0048ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0048b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0048b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048b8   ec41     call	0x6882, 0           	CALL	_MACPutArray
0048ba   f034
0048bc   0e05     movlw	0x5                	MOVLW	0x05
0048be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; TCPIP_Stack/ICMP.c	MACMemCopyAsync(-1, -1, len-4);
0048c0   0efc     movlw	0xfc               	MOVLW	0xfc
0048c2   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0048c4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0048c6   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0048c8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0048ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0048ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048d0   0eff     movlw	0xff               	MOVLW	0xff
0048d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048d4   0eff     movlw	0xff               	MOVLW	0xff
0048d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048d8   0eff     movlw	0xff               	MOVLW	0xff
0048da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048dc   0eff     movlw	0xff               	MOVLW	0xff
0048de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048e0   ec36     call	0x186c, 0           	CALL	_MACMemCopyAsync
0048e2   f00c
0048e4   0e06     movlw	0x6                	MOVLW	0x06
0048e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00114_DS_:
                                           ;	.line	173; TCPIP_Stack/ICMP.c	while(!MACIsMemCopyDone());
0048e8   ecce     call	0x779c, 0           	CALL	_MACIsMemCopyDone
0048ea   f03b
0048ec   6e00     movwf	0, 0               	MOVWF	r0x00
0048ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0048f0   e0fb     bz	0x48e8                	BZ	_00114_DS_
                                           ;	.line	176; TCPIP_Stack/ICMP.c	MACFlush();
0048f2   ec6c     call	0x70d8, 0           	CALL	_MACFlush
0048f4   f038
                                           _00119_DS_:
0048f6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0048f8   f007
0048fa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0048fc   f006
0048fe   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004900   f005
004902   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004904   f004
004906   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004908   f003
00490a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00490c   f002
00490e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004910   f001
004912   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004914   f000
004916   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004918   ffd9
00491a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  416 (0x01a0) bytes ( 0.32%)
                                           ;           	  208 (0x00d0) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.10%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:32 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _IPGetHeader
                                           	global _IPPutHeader
                                           	global _IPSetRxBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetReadPtrInRx
                                           	extern _MACGetArray
                                           	extern _MACPutHeader
                                           	extern _MACPutArray
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           __Identifier	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_IP_0	udata
                                           _IPHeaderLen	res	1
                                           
                                           udata_IP_1	udata
                                           _IPGetHeader_header_1_1	res	20
                                           
                                           udata_IP_2	udata
                                           _IPGetHeader_CalcChecksum_1_1	res	2
                                           
                                           udata_IP_3	udata
                                           _IPPutHeader_header_1_1	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_IP__SwapIPHeader	code
                                           _SwapIPHeader:
                                           ;	.line	302; TCPIP_Stack/IP.c	static void SwapIPHeader(IP_HEADER* h)
004a80   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004a82   ffe5
004a84   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004a86   ffd9
004a88   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004a8a   ffe5
004a8c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004a8e   ffe5
004a90   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004a92   ffe5
004a94   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004a96   ffe5
004a98   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004a9a   ffe5
004a9c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004a9e   ffe5
004aa0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004aa2   ffe5
004aa4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004aa6   ffe5
004aa8   0e02     movlw	0x2                	MOVLW	0x02
004aaa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004aac   f000
004aae   0e03     movlw	0x3                	MOVLW	0x03
004ab0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004ab2   f001
004ab4   0e04     movlw	0x4                	MOVLW	0x04
004ab6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004ab8   f002
                                           ;	.line	304; TCPIP_Stack/IP.c	h->TotalLength      = swaps(h->TotalLength);
004aba   5000     movf	0, 0, 0             	MOVF	r0x00, W
004abc   0f02     addlw	0x2                	ADDLW	0x02
004abe   6e03     movwf	0x3, 0             	MOVWF	r0x03
004ac0   0e00     movlw	0                  	MOVLW	0x00
004ac2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004ac4   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ac6   0e00     movlw	0                  	MOVLW	0x00
004ac8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004aca   6e05     movwf	0x5, 0             	MOVWF	r0x05
004acc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004ace   ffe9
004ad0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004ad2   fff3
004ad4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004ad6   ecb8     call	0x7770, 0           	CALL	__gptrget2
004ad8   f03b
004ada   6e06     movwf	0x6, 0             	MOVWF	r0x06
004adc   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004ade   f007
004ae0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ae4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ae8   ecb1     call	0x7362, 0           	CALL	_swaps
004aea   f039
004aec   6e06     movwf	0x6, 0             	MOVWF	r0x06
004aee   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004af0   f007
004af2   0e02     movlw	0x2                	MOVLW	0x02
004af4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004af6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004af8   ffe5
004afa   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004afc   fff4
004afe   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004b00   ffe9
004b02   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004b04   fff3
004b06   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b08   ecd3     call	0x79a6, 0           	CALL	__gptrput2
004b0a   f03c
                                           ;	.line	305; TCPIP_Stack/IP.c	h->Identification   = swaps(h->Identification);
004b0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b0e   0f04     addlw	0x4                	ADDLW	0x04
004b10   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b12   0e00     movlw	0                  	MOVLW	0x00
004b14   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004b16   6e04     movwf	0x4, 0             	MOVWF	r0x04
004b18   0e00     movlw	0                  	MOVLW	0x00
004b1a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004b1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
004b1e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004b20   ffe9
004b22   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004b24   fff3
004b26   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b28   ecb8     call	0x7770, 0           	CALL	__gptrget2
004b2a   f03b
004b2c   6e06     movwf	0x6, 0             	MOVWF	r0x06
004b2e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004b30   f007
004b32   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b36   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b3a   ecb1     call	0x7362, 0           	CALL	_swaps
004b3c   f039
004b3e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004b40   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004b42   f007
004b44   0e02     movlw	0x2                	MOVLW	0x02
004b46   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b48   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004b4a   ffe5
004b4c   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004b4e   fff4
004b50   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004b52   ffe9
004b54   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004b56   fff3
004b58   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b5a   ecd3     call	0x79a6, 0           	CALL	__gptrput2
004b5c   f03c
                                           ;	.line	306; TCPIP_Stack/IP.c	h->HeaderChecksum   = swaps(h->HeaderChecksum);
004b5e   0e0a     movlw	0xa                	MOVLW	0x0a
004b60   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004b62   0e00     movlw	0                  	MOVLW	0x00
004b64   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004b66   0e00     movlw	0                  	MOVLW	0x00
004b68   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004b6a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004b6c   ffe9
004b6e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004b70   fff3
004b72   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004b74   ecb8     call	0x7770, 0           	CALL	__gptrget2
004b76   f03b
004b78   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b7a   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004b7c   f004
004b7e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b82   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b86   ecb1     call	0x7362, 0           	CALL	_swaps
004b88   f039
004b8a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004b8c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004b8e   f004
004b90   0e02     movlw	0x2                	MOVLW	0x02
004b92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b94   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004b96   ffe5
004b98   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
004b9a   fff4
004b9c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004b9e   ffe9
004ba0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004ba2   fff3
004ba4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ba6   ecd3     call	0x79a6, 0           	CALL	__gptrput2
004ba8   f03c
004baa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004bac   f007
004bae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004bb0   f006
004bb2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004bb4   f005
004bb6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004bb8   f004
004bba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004bbc   f003
004bbe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004bc0   f002
004bc2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004bc4   f001
004bc6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004bc8   f000
004bca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004bcc   ffd9
004bce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPSetRxBuffer	code
                                           _IPSetRxBuffer:
                                           ;	.line	295; TCPIP_Stack/IP.c	void IPSetRxBuffer(WORD Offset) 
007260   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007262   ffe5
007264   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007266   ffd9
007268   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00726a   ffe5
00726c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00726e   ffe5
007270   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007272   ffe5
007274   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007276   ffe5
007278   0e02     movlw	0x2                	MOVLW	0x02
00727a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00727c   f000
00727e   0e03     movlw	0x3                	MOVLW	0x03
007280   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007282   f001
                                           ;	.line	297; TCPIP_Stack/IP.c	MACSetReadPtrInRx(Offset+IPHeaderLen);
007284   ca61     movff	0xa61, 0x2         	MOVFF	_IPHeaderLen, r0x02
007286   f002
007288   6a03     clrf	0x3, 0              	CLRF	r0x03
00728a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00728c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00728e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007290   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
007292   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007294   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007296   5000     movf	0, 0, 0             	MOVF	r0x00, W
007298   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00729a   ec55     call	0x64aa, 0           	CALL	_MACSetReadPtrInRx
00729c   f032
00729e   0e02     movlw	0x2                	MOVLW	0x02
0072a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0072a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0072a4   f003
0072a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0072a8   f002
0072aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0072ac   f001
0072ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0072b0   f000
0072b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0072b4   ffd9
0072b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPPutHeader	code
                                           _IPPutHeader:
                                           ;	.line	247; TCPIP_Stack/IP.c	WORD IPPutHeader(NODE_INFO *remote,
004214   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004216   ffe5
004218   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00421a   ffd9
00421c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00421e   ffe5
004220   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004222   ffe5
004224   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004226   ffe5
004228   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00422a   ffe5
00422c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00422e   ffe5
004230   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004232   ffe5
004234   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004236   ffe5
004238   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00423a   ffe5
00423c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00423e   ffe5
004240   0e02     movlw	0x2                	MOVLW	0x02
004242   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004244   f000
004246   0e03     movlw	0x3                	MOVLW	0x03
004248   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00424a   f001
00424c   0e04     movlw	0x4                	MOVLW	0x04
00424e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004250   f002
004252   0e05     movlw	0x5                	MOVLW	0x05
004254   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004256   f003
004258   0e06     movlw	0x6                	MOVLW	0x06
00425a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00425c   f004
00425e   0e07     movlw	0x7                	MOVLW	0x07
004260   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004262   f005
                                           ;	.line	253; TCPIP_Stack/IP.c	IPHeaderLen = sizeof(IP_HEADER);
004264   0e14     movlw	0x14               	MOVLW	0x14
004266   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
004268   6f61     movwf	0x61, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	255; TCPIP_Stack/IP.c	header.VersionIHL       = IP_VERSION | IP_IHL;
00426a   0e45     movlw	0x45               	MOVLW	0x45
00426c   0108     movlb	0x8                	BANKSEL	_IPPutHeader_header_1_1
00426e   6f78     movwf	0x78, 0x1          	MOVWF	_IPPutHeader_header_1_1, B
004270   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 1)
                                           ;	.line	256; TCPIP_Stack/IP.c	header.TypeOfService    = IP_SERVICE;
004272   6b79     clrf	0x79, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 1), B
                                           ;	.line	257; TCPIP_Stack/IP.c	header.TotalLength      = sizeof(header) + len;
004274   0e14     movlw	0x14               	MOVLW	0x14
004276   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004278   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00427a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00427c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00427e   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 2)
004280   6f7a     movwf	0x7a, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 2), B
004282   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004284   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 3)
004286   6f7b     movwf	0x7b, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 3), B
004288   0108     movlb	0x8                	BANKSEL	__Identifier
                                           ;	.line	258; TCPIP_Stack/IP.c	header.Identification   = ++_Identifier;
00428a   2b42     incf	0x42, 0x1, 0x1      	INCF	__Identifier, F, B
00428c   e302     bnc	0x4292               	BNC	_10137_DS_
00428e   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
004290   2b43     incf	0x43, 0x1, 0x1      	INCF	(__Identifier + 1), F, B
                                           _10137_DS_:
004292   0108     movlb	0x8                	BANKSEL	__Identifier
004294   5142     movf	0x42, 0, 0x1        	MOVF	__Identifier, W, B
004296   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 4)
004298   6f7c     movwf	0x7c, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 4), B
00429a   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
00429c   5143     movf	0x43, 0, 0x1        	MOVF	(__Identifier + 1), W, B
00429e   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 5)
0042a0   6f7d     movwf	0x7d, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 5), B
0042a2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 6)
                                           ;	.line	259; TCPIP_Stack/IP.c	header.FragmentInfo     = 0;
0042a4   6b7e     clrf	0x7e, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 6), B
0042a6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 7)
0042a8   6b7f     clrf	0x7f, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 7), B
                                           ;	.line	260; TCPIP_Stack/IP.c	header.TimeToLive       = MY_IP_TTL;
0042aa   0e64     movlw	0x64               	MOVLW	0x64
0042ac   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 8)
0042ae   6f80     movwf	0x80, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 8), B
                                           ;	.line	261; TCPIP_Stack/IP.c	header.Protocol         = protocol;
0042b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042b2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 9)
0042b4   6f81     movwf	0x81, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 9), B
0042b6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
                                           ;	.line	262; TCPIP_Stack/IP.c	header.HeaderChecksum   = 0;
0042b8   6b82     clrf	0x82, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 10), B
0042ba   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
0042bc   6b83     clrf	0x83, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 11), B
0042be   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	264; TCPIP_Stack/IP.c	header.SourceAddress.Val 	= AppConfig.MyIPAddr.Val;
0042c0   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0042c2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 12)
0042c4   6f84     movwf	0x84, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 12), B
0042c6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0042c8   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0042ca   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 13)
0042cc   6f85     movwf	0x85, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 13), B
0042ce   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0042d0   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0042d2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 14)
0042d4   6f86     movwf	0x86, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 14), B
0042d6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
0042d8   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
0042da   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 15)
0042dc   6f87     movwf	0x87, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 15), B
                                           ;	.line	266; TCPIP_Stack/IP.c	header.DestAddress.Val = remote->IPAddr.Val;
0042de   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0042e0   ffe9
0042e2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0042e4   fff3
0042e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0042e8   ec48     call	0x7690, 0           	CALL	__gptrget4
0042ea   f03b
0042ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0042ee   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0042f0   f006
0042f2   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
0042f4   f007
0042f6   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
0042f8   f008
0042fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042fc   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 16)
0042fe   6f88     movwf	0x88, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 16), B
004300   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004302   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 17)
004304   6f89     movwf	0x89, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 17), B
004306   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004308   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 18)
00430a   6f8a     movwf	0x8a, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 18), B
00430c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00430e   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 19)
004310   6f8b     movwf	0x8b, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 19), B
                                           ;	.line	268; TCPIP_Stack/IP.c	SwapIPHeader(&header);
004312   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004314   6e06     movwf	0x6, 0             	MOVWF	r0x06
004316   0e78     movlw	0x78               	MOVLW	LOW(_IPPutHeader_header_1_1)
004318   6e03     movwf	0x3, 0             	MOVWF	r0x03
00431a   0e80     movlw	0x80               	MOVLW	0x80
00431c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00431e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004322   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004324   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004326   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004328   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00432a   ec40     call	0x4a80, 0           	CALL	_SwapIPHeader
00432c   f025
00432e   0e03     movlw	0x3                	MOVLW	0x03
004330   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; TCPIP_Stack/IP.c	header.HeaderChecksum   = CalcIPChecksum((BYTE*)&header, sizeof(header));
004332   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004334   6e06     movwf	0x6, 0             	MOVWF	r0x06
004336   0e78     movlw	0x78               	MOVLW	LOW(_IPPutHeader_header_1_1)
004338   6e03     movwf	0x3, 0             	MOVWF	r0x03
00433a   0e80     movlw	0x80               	MOVLW	0x80
00433c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00433e   0e00     movlw	0                  	MOVLW	0x00
004340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004342   0e14     movlw	0x14               	MOVLW	0x14
004344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004346   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00434a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00434c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00434e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004350   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004352   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
004354   f00f
004356   6e03     movwf	0x3, 0             	MOVWF	r0x03
004358   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00435a   f006
00435c   0e05     movlw	0x5                	MOVLW	0x05
00435e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004360   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004362   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
004364   6f82     movwf	0x82, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 10), B
004366   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004368   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
00436a   6f83     movwf	0x83, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 11), B
                                           ;	.line	272; TCPIP_Stack/IP.c	MACPutHeader(&remote->MACAddr, MAC_IP, (sizeof(header)+len));
00436c   0e04     movlw	0x4                	MOVLW	0x04
00436e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004370   0e00     movlw	0                  	MOVLW	0x00
004372   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004374   0e00     movlw	0                  	MOVLW	0x00
004376   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004378   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00437a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00437c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00437e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004380   0e00     movlw	0                  	MOVLW	0x00
004382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004384   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004388   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00438a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00438c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00438e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004390   ec2f     call	0x4e5e, 0           	CALL	_MACPutHeader
004392   f027
004394   0e06     movlw	0x6                	MOVLW	0x06
004396   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	273; TCPIP_Stack/IP.c	MACPutArray((BYTE*)&header, sizeof(header));
004398   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
00439a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00439c   0e78     movlw	0x78               	MOVLW	LOW(_IPPutHeader_header_1_1)
00439e   6e00     movwf	0, 0               	MOVWF	r0x00
0043a0   0e80     movlw	0x80               	MOVLW	0x80
0043a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0043a4   0e00     movlw	0                  	MOVLW	0x00
0043a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043a8   0e14     movlw	0x14               	MOVLW	0x14
0043aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0043ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0043b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0043b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043b8   ec41     call	0x6882, 0           	CALL	_MACPutArray
0043ba   f034
0043bc   0e05     movlw	0x5                	MOVLW	0x05
0043be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; TCPIP_Stack/IP.c	return 0x0000;
0043c0   6af3     clrf	0xf3, 0             	CLRF	PRODL
0043c2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0043c4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0043c6   f008
0043c8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0043ca   f007
0043cc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0043ce   f006
0043d0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0043d2   f005
0043d4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0043d6   f004
0043d8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0043da   f003
0043dc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0043de   f002
0043e0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0043e2   f001
0043e4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0043e6   f000
0043e8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0043ea   ffd9
0043ec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPGetHeader	code
                                           _IPGetHeader:
                                           ;	.line	136; TCPIP_Stack/IP.c	BOOL IPGetHeader(IP_ADDR *localIP,
00379a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00379c   ffe5
00379e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0037a0   ffd9
0037a2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0037a4   ffe5
0037a6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0037a8   ffe5
0037aa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0037ac   ffe5
0037ae   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0037b0   ffe5
0037b2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0037b4   ffe5
0037b6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0037b8   ffe5
0037ba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0037bc   ffe5
0037be   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0037c0   ffe5
0037c2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0037c4   ffe5
0037c6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0037c8   ffe5
0037ca   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0037cc   ffe5
0037ce   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0037d0   ffe5
0037d2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0037d4   ffe5
0037d6   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0037d8   ffe5
0037da   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0037dc   ffe5
0037de   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0037e0   ffe5
0037e2   0e02     movlw	0x2                	MOVLW	0x02
0037e4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0037e6   f000
0037e8   0e03     movlw	0x3                	MOVLW	0x03
0037ea   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0037ec   f001
0037ee   0e04     movlw	0x4                	MOVLW	0x04
0037f0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0037f2   f002
0037f4   0e05     movlw	0x5                	MOVLW	0x05
0037f6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0037f8   f003
0037fa   0e06     movlw	0x6                	MOVLW	0x06
0037fc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0037fe   f004
003800   0e07     movlw	0x7                	MOVLW	0x07
003802   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003804   f005
003806   0e08     movlw	0x8                	MOVLW	0x08
003808   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00380a   f006
00380c   0e09     movlw	0x9                	MOVLW	0x09
00380e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003810   f007
003812   0e0a     movlw	0xa                	MOVLW	0x0a
003814   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
003816   f008
003818   0e0b     movlw	0xb                	MOVLW	0x0b
00381a   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
00381c   f009
00381e   0e0c     movlw	0xc                	MOVLW	0x0c
003820   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
003822   f00a
003824   0e0d     movlw	0xd                	MOVLW	0x0d
003826   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
003828   f00b
                                           ;	.line	153; TCPIP_Stack/IP.c	MACGetArray((BYTE*)&header, sizeof(header));
00382a   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
00382c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00382e   0e64     movlw	0x64               	MOVLW	LOW(_IPGetHeader_header_1_1)
003830   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003832   0e80     movlw	0x80               	MOVLW	0x80
003834   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003836   0e00     movlw	0                  	MOVLW	0x00
003838   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00383a   0e14     movlw	0x14               	MOVLW	0x14
00383c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00383e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003842   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003844   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003846   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003848   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00384a   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
00384c   f02f
00384e   0e05     movlw	0x5                	MOVLW	0x05
003850   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; TCPIP_Stack/IP.c	if((header.VersionIHL & 0xf0) != IP_VERSION) return FALSE;
003852   0ef0     movlw	0xf0               	MOVLW	0xf0
003854   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
003856   1564     andwf	0x64, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
003858   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00385a   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00385c   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00385e   0a40     xorlw	0x40               	XORLW	0x40
003860   e102     bnz	0x3866               	BNZ	_00121_DS_
003862   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003864   e002     bz	0x386a                	BZ	_00106_DS_
                                           _00121_DS_:
003866   6ae8     clrf	0xe8, 0             	CLRF	WREG
003868   d0a0     bra	0x39aa               	BRA	_00113_DS_
                                           _00106_DS_:
00386a   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 6)
                                           ;	.line	160; TCPIP_Stack/IP.c	if(header.FragmentInfo & 0xFF1F) return FALSE;
00386c   516a     movf	0x6a, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 6), W, B
00386e   0b1f     andlw	0x1f               	ANDLW	0x1f
003870   e103     bnz	0x3878               	BNZ	_00122_DS_
003872   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 7)
003874   516b     movf	0x6b, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 7), W, B
003876   e002     bz	0x387c                	BZ	_00108_DS_
                                           _00122_DS_:
003878   6ae8     clrf	0xe8, 0             	CLRF	WREG
00387a   d097     bra	0x39aa               	BRA	_00113_DS_
                                           _00108_DS_:
                                           ;	.line	162; TCPIP_Stack/IP.c	IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
00387c   0e0f     movlw	0xf                	MOVLW	0x0f
00387e   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
003880   1564     andwf	0x64, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
003882   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003884   440c     rlncf	0xc, 0, 0          	RLNCF	r0x0c, W
003886   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
003888   0bfc     andlw	0xfc               	ANDLW	0xfc
00388a   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
00388c   6f61     movwf	0x61, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	169; TCPIP_Stack/IP.c	CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
00388e   ca61     movff	0xa61, 0xc         	MOVFF	_IPHeaderLen, r0x0c
003890   f00c
003892   6a0d     clrf	0xd, 0              	CLRF	r0x0d
003894   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003898   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00389a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00389c   0e00     movlw	0                  	MOVLW	0x00
00389e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038a0   0e00     movlw	0                  	MOVLW	0x00
0038a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038a4   ec2c     call	0x5458, 0           	CALL	_MACCalcRxChecksum
0038a6   f02a
0038a8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0038aa   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0038ac   f00d
0038ae   0e04     movlw	0x4                	MOVLW	0x04
0038b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0038b2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0038b4   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
0038b6   6f4b     movwf	0x4b, 0x1          	MOVWF	_IPGetHeader_CalcChecksum_1_1, B
0038b8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0038ba   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
0038bc   6f4c     movwf	0x4c, 0x1          	MOVWF	(_IPGetHeader_CalcChecksum_1_1 + 1), B
                                           ;	.line	172; TCPIP_Stack/IP.c	MACSetReadPtrInRx(IPHeaderLen);
0038be   ca61     movff	0xa61, 0xc         	MOVFF	_IPHeaderLen, r0x0c
0038c0   f00c
0038c2   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0038c4   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0038c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038c8   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0038ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038cc   ec55     call	0x64aa, 0           	CALL	_MACSetReadPtrInRx
0038ce   f032
0038d0   0e02     movlw	0x2                	MOVLW	0x02
0038d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0038d4   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
                                           ;	.line	174; TCPIP_Stack/IP.c	if(CalcChecksum.Val)
0038d6   514b     movf	0x4b, 0, 0x1        	MOVF	_IPGetHeader_CalcChecksum_1_1, W, B
0038d8   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
0038da   114c     iorwf	0x4c, 0, 0x1       	IORWF	(_IPGetHeader_CalcChecksum_1_1 + 1), W, B
0038dc   e002     bz	0x38e2                	BZ	_00110_DS_
                                           ;	.line	209; TCPIP_Stack/IP.c	return FALSE;
0038de   6ae8     clrf	0xe8, 0             	CLRF	WREG
0038e0   d064     bra	0x39aa               	BRA	_00113_DS_
                                           _00110_DS_:
                                           ;	.line	213; TCPIP_Stack/IP.c	SwapIPHeader(&header);
0038e2   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
0038e4   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0038e6   0e64     movlw	0x64               	MOVLW	LOW(_IPGetHeader_header_1_1)
0038e8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0038ea   0e80     movlw	0x80               	MOVLW	0x80
0038ec   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0038ee   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0038f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038f2   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0038f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038f6   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0038f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0038fa   ec40     call	0x4a80, 0           	CALL	_SwapIPHeader
0038fc   f025
0038fe   0e03     movlw	0x3                	MOVLW	0x03
003900   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; TCPIP_Stack/IP.c	if ( localIP ) localIP->Val = header.DestAddress.Val;
003902   5000     movf	0, 0, 0             	MOVF	r0x00, W
003904   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
003906   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
003908   e017     bz	0x3938                	BZ	_00112_DS_
00390a   c874     movff	0x874, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 16), r0x0c
00390c   f00c
00390e   c875     movff	0x875, 0xd         	MOVFF	(_IPGetHeader_header_1_1 + 17), r0x0d
003910   f00d
003912   c876     movff	0x876, 0xe         	MOVFF	(_IPGetHeader_header_1_1 + 18), r0x0e
003914   f00e
003916   c877     movff	0x877, 0xf         	MOVFF	(_IPGetHeader_header_1_1 + 19), r0x0f
003918   f00f
00391a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00391c   ffe5
00391e   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
003920   fff4
003922   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
003924   fff6
003926   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
003928   fff7
00392a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00392c   ffe9
00392e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003930   fff3
003932   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003934   ec62     call	0x78c4, 0           	CALL	__gptrput4
003936   f03c
                                           _00112_DS_:
                                           ;	.line	219; TCPIP_Stack/IP.c	remote->IPAddr.Val  = header.SourceAddress.Val;
003938   c870     movff	0x870, 0           	MOVFF	(_IPGetHeader_header_1_1 + 12), r0x00
00393a   f000
00393c   c871     movff	0x871, 0x1         	MOVFF	(_IPGetHeader_header_1_1 + 13), r0x01
00393e   f001
003940   c872     movff	0x872, 0x2         	MOVFF	(_IPGetHeader_header_1_1 + 14), r0x02
003942   f002
003944   c873     movff	0x873, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 15), r0x0c
003946   f00c
003948   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00394a   ffe5
00394c   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
00394e   fff4
003950   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
003952   fff6
003954   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
003956   fff7
003958   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00395a   ffe9
00395c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00395e   fff3
003960   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003962   ec62     call	0x78c4, 0           	CALL	__gptrput4
003964   f03c
                                           ;	.line	220; TCPIP_Stack/IP.c	*protocol           = header.Protocol;
003966   c86d     movff	0x86d, 0           	MOVFF	(_IPGetHeader_header_1_1 + 9), r0x00
003968   f000
00396a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00396c   ffe5
00396e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
003970   ffe9
003972   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
003974   fff3
003976   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003978   ecf3     call	0x79e6, 0           	CALL	__gptrput1
00397a   f03c
                                           ;	.line	221; TCPIP_Stack/IP.c	*len 		= header.TotalLength - IPHeaderLen;
00397c   ca61     movff	0xa61, 0           	MOVFF	_IPHeaderLen, r0x00
00397e   f000
003980   6a01     clrf	0x1, 0              	CLRF	r0x01
003982   5000     movf	0, 0, 0             	MOVF	r0x00, W
003984   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 2)
003986   5d66     subwf	0x66, 0, 0x1       	SUBWF	(_IPGetHeader_header_1_1 + 2), W, B
003988   6e00     movwf	0, 0               	MOVWF	r0x00
00398a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00398c   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 3)
00398e   5967     subwfb	0x67, 0, 0x1      	SUBWFB	(_IPGetHeader_header_1_1 + 3), W, B
003990   6e01     movwf	0x1, 0             	MOVWF	r0x01
003992   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003994   ffe5
003996   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003998   fff4
00399a   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
00399c   ffe9
00399e   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0039a0   fff3
0039a2   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0039a4   ecd3     call	0x79a6, 0           	CALL	__gptrput2
0039a6   f03c
                                           ;	.line	223; TCPIP_Stack/IP.c	return TRUE;
0039a8   0e01     movlw	0x1                	MOVLW	0x01
                                           _00113_DS_:
0039aa   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0039ac   f00f
0039ae   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0039b0   f00e
0039b2   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0039b4   f00d
0039b6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0039b8   f00c
0039ba   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0039bc   f00b
0039be   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0039c0   f00a
0039c2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0039c4   f009
0039c6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0039c8   f008
0039ca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0039cc   f007
0039ce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0039d0   f006
0039d2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0039d4   f005
0039d6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0039d8   f004
0039da   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0039dc   f003
0039de   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0039e0   f002
0039e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0039e4   f001
0039e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0039e8   f000
0039ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0039ec   ffd9
0039ee   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   43 (0x002b) bytes ( 1.12%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:32 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
006564   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006566   ffe5
006568   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00656a   ffd9
00656c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00656e   ffe5
006570   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006572   ffe5
006574   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006576   ffe5
006578   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00657a   ffe5
00657c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00657e   ffe5
006580   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006582   ffe5
006584   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006586   ffe5
006588   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00658a   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00658c   0e01     movlw	0x1                	MOVLW	0x01
00658e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006590   0e00     movlw	0                  	MOVLW	0x00
006592   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006594   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
006596   f038
006598   0e02     movlw	0x2                	MOVLW	0x02
00659a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00659c   0e48     movlw	0x48               	MOVLW	0x48
00659e   6e00     movwf	0, 0               	MOVWF	r0x00
0065a0   0e0d     movlw	0xd                	MOVLW	0x0d
0065a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0065a4   6a02     clrf	0x2, 0              	CLRF	r0x02
0065a6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0065a8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0065aa   f004
0065ac   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0065ae   f005
0065b0   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0065b2   f006
0065b4   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0065b6   f007
0065b8   0eff     movlw	0xff               	MOVLW	0xff
0065ba   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0065bc   0eff     movlw	0xff               	MOVLW	0xff
0065be   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0065c0   0eff     movlw	0xff               	MOVLW	0xff
0065c2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0065c4   0eff     movlw	0xff               	MOVLW	0xff
0065c6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0065c8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0065ca   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0065cc   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0065ce   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0065d0   e1eb     bnz	0x65a8               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0065d2   0e00     movlw	0                  	MOVLW	0x00
0065d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065d6   0e20     movlw	0x20               	MOVLW	0x20
0065d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065da   0e20     movlw	0x20               	MOVLW	0x20
0065dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065de   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0065e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e2   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0065e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e6   ec8c     call	0x6318, 0           	CALL	_memset
0065e8   f031
0065ea   0e05     movlw	0x5                	MOVLW	0x05
0065ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0065ee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0065f0   f007
0065f2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0065f4   f006
0065f6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0065f8   f005
0065fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0065fc   f004
0065fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006600   f003
006602   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006604   f002
006606   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006608   f001
00660a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00660c   f000
00660e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006610   ffd9
006612   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
003072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003074   ffe5
003076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003078   ffd9
00307a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00307c   ffe5
00307e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003080   ffe5
003082   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003084   ffe5
003086   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003088   ffe5
00308a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00308c   ffe5
00308e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003090   ffe5
003092   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003094   ffe5
003096   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003098   ffe5
00309a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00309c   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
00309e   0e02     movlw	0x2                	MOVLW	0x02
0030a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030a2   0e00     movlw	0                  	MOVLW	0x00
0030a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030a6   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
0030a8   f038
0030aa   0e02     movlw	0x2                	MOVLW	0x02
0030ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0030ae   0e48     movlw	0x48               	MOVLW	0x48
0030b0   6e00     movwf	0, 0               	MOVWF	r0x00
0030b2   0e0d     movlw	0xd                	MOVLW	0x0d
0030b4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0030b6   6a02     clrf	0x2, 0              	CLRF	r0x02
0030b8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
0030ba   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0030bc   f004
0030be   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0030c0   f005
0030c2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0030c4   f006
0030c6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0030c8   f007
0030ca   0eff     movlw	0xff               	MOVLW	0xff
0030cc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0030ce   0eff     movlw	0xff               	MOVLW	0xff
0030d0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0030d2   0eff     movlw	0xff               	MOVLW	0xff
0030d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0030d6   0eff     movlw	0xff               	MOVLW	0xff
0030d8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0030da   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0030dc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0030de   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0030e0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0030e2   e1eb     bnz	0x30ba               	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0030e4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0030e6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0030e8   f001
0030ea   6a02     clrf	0x2, 0              	CLRF	r0x02
0030ec   0e00     movlw	0                  	MOVLW	0x00
0030ee   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0030f0   e102     bnz	0x30f6               	BNZ	_00297_DS_
0030f2   0e10     movlw	0x10               	MOVLW	0x10
0030f4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0030f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0030f8   d057     bra	0x31a8               	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0030fa   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0030fc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0030fe   6e01     movwf	0x1, 0             	MOVWF	r0x01
003100   6a02     clrf	0x2, 0              	CLRF	r0x02
003102   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
003104   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003106   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003108   ffe9
00310a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00310c   ffea
00310e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
003110   f001
003112   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003114   e119     bnz	0x3148               	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
003116   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
003118   f001
                                           _00253_DS_:
00311a   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00311c   f002
00311e   6a03     clrf	0x3, 0              	CLRF	r0x03
003120   0e00     movlw	0                  	MOVLW	0x00
003122   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
003124   e102     bnz	0x312a               	BNZ	_00298_DS_
003126   0e10     movlw	0x10               	MOVLW	0x10
003128   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
00312a   e20e     bc	0x3148                	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
00312c   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00312e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
003130   6e02     movwf	0x2, 0             	MOVWF	r0x02
003132   6a03     clrf	0x3, 0              	CLRF	r0x03
003134   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
003136   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003138   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00313a   ffe9
00313c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00313e   ffea
003140   0e20     movlw	0x20               	MOVLW	0x20
003142   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
003144   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003146   d7e9     bra	0x311a               	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
003148   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00314a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00314c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00314e   6a02     clrf	0x2, 0              	CLRF	r0x02
003150   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
003152   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003154   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003156   ffe9
003158   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00315a   ffea
00315c   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00315e   f001
003160   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003164   0e01     movlw	0x1                	MOVLW	0x01
003166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003168   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
00316a   f038
00316c   0e02     movlw	0x2                	MOVLW	0x02
00316e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
003170   0e55     movlw	0x55               	MOVLW	0x55
003172   6e01     movwf	0x1, 0             	MOVWF	r0x01
003174   6a02     clrf	0x2, 0              	CLRF	r0x02
003176   6a03     clrf	0x3, 0              	CLRF	r0x03
003178   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
00317a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00317c   f005
00317e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003180   f006
003182   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003184   f007
003186   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
003188   f008
00318a   0eff     movlw	0xff               	MOVLW	0xff
00318c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00318e   0eff     movlw	0xff               	MOVLW	0xff
003190   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003192   0eff     movlw	0xff               	MOVLW	0xff
003194   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003196   0eff     movlw	0xff               	MOVLW	0xff
003198   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00319a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00319c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00319e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0031a0   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0031a2   e1eb     bnz	0x317a               	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0031a4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0031a6   d79f     bra	0x30e6               	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
0031a8   0ec0     movlw	0xc0               	MOVLW	0xc0
0031aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ac   0e00     movlw	0                  	MOVLW	0x00
0031ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031b0   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
0031b2   f038
0031b4   0e02     movlw	0x2                	MOVLW	0x02
0031b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0031b8   0e55     movlw	0x55               	MOVLW	0x55
0031ba   6e00     movwf	0, 0               	MOVWF	r0x00
0031bc   6a01     clrf	0x1, 0              	CLRF	r0x01
0031be   6a02     clrf	0x2, 0              	CLRF	r0x02
0031c0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
0031c2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0031c4   f004
0031c6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0031c8   f005
0031ca   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0031cc   f006
0031ce   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0031d0   f007
0031d2   0eff     movlw	0xff               	MOVLW	0xff
0031d4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0031d6   0eff     movlw	0xff               	MOVLW	0xff
0031d8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0031da   0eff     movlw	0xff               	MOVLW	0xff
0031dc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0031de   0eff     movlw	0xff               	MOVLW	0xff
0031e0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0031e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0031e4   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0031e6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0031e8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0031ea   e1eb     bnz	0x31c2               	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0031ec   0e10     movlw	0x10               	MOVLW	0x10
0031ee   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0031f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0031f2   f001
0031f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0031f6   0e00     movlw	0                  	MOVLW	0x00
0031f8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0031fa   e102     bnz	0x3200               	BNZ	_00299_DS_
0031fc   0e20     movlw	0x20               	MOVLW	0x20
0031fe   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
003200   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003202   d057     bra	0x32b2               	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
003204   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
003206   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
003208   6e01     movwf	0x1, 0             	MOVWF	r0x01
00320a   6a02     clrf	0x2, 0              	CLRF	r0x02
00320c   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00320e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003210   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003212   ffe9
003214   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
003216   ffea
003218   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
00321a   f001
00321c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00321e   e119     bnz	0x3252               	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
003220   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
003222   f001
                                           _00261_DS_:
003224   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
003226   f002
003228   6a03     clrf	0x3, 0              	CLRF	r0x03
00322a   0e00     movlw	0                  	MOVLW	0x00
00322c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00322e   e102     bnz	0x3234               	BNZ	_00300_DS_
003230   0e20     movlw	0x20               	MOVLW	0x20
003232   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
003234   e20e     bc	0x3252                	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
003236   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
003238   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00323a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00323c   6a03     clrf	0x3, 0              	CLRF	r0x03
00323e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
003240   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003242   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
003244   ffe9
003246   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
003248   ffea
00324a   0e20     movlw	0x20               	MOVLW	0x20
00324c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
00324e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003250   d7e9     bra	0x3224               	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
003252   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
003254   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
003256   6e01     movwf	0x1, 0             	MOVWF	r0x01
003258   6a02     clrf	0x2, 0              	CLRF	r0x02
00325a   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00325c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00325e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003260   ffe9
003262   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
003264   ffea
003266   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
003268   f001
00326a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00326c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00326e   0e01     movlw	0x1                	MOVLW	0x01
003270   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003272   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
003274   f038
003276   0e02     movlw	0x2                	MOVLW	0x02
003278   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00327a   0e55     movlw	0x55               	MOVLW	0x55
00327c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00327e   6a02     clrf	0x2, 0              	CLRF	r0x02
003280   6a03     clrf	0x3, 0              	CLRF	r0x03
003282   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
003284   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
003286   f005
003288   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00328a   f006
00328c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00328e   f007
003290   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
003292   f008
003294   0eff     movlw	0xff               	MOVLW	0xff
003296   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003298   0eff     movlw	0xff               	MOVLW	0xff
00329a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00329c   0eff     movlw	0xff               	MOVLW	0xff
00329e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0032a0   0eff     movlw	0xff               	MOVLW	0xff
0032a2   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0032a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0032a6   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0032a8   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0032aa   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0032ac   e1eb     bnz	0x3284               	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0032ae   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0032b0   d79f     bra	0x31f0               	BRA	_00265_DS_
                                           _00269_DS_:
0032b2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0032b4   f008
0032b6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032b8   f007
0032ba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032bc   f006
0032be   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032c0   f005
0032c2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032c4   f004
0032c6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032c8   f003
0032ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032cc   f002
0032ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032d0   f001
0032d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032d4   f000
0032d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032d8   ffd9
0032da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
00353e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003540   ffe5
003542   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003544   ffd9
003546   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003548   ffe5
00354a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00354c   ffe5
00354e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003550   ffe5
003552   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003554   ffe5
003556   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003558   ffe5
00355a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00355c   ffe5
00355e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003560   ffe5
003562   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003564   ffe5
003566   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003568   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00356a   0e00     movlw	0                  	MOVLW	0x00
00356c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00356e   0e20     movlw	0x20               	MOVLW	0x20
003570   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003572   0e20     movlw	0x20               	MOVLW	0x20
003574   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003576   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
003578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357a   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00357c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00357e   ec8c     call	0x6318, 0           	CALL	_memset
003580   f031
003582   0e05     movlw	0x5                	MOVLW	0x05
003584   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003586   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
003588   6b53     clrf	0x53, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00358a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00358c   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00358e   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
003590   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
003592   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
003594   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
003596   0ea0     movlw	0xa0               	MOVLW	0xa0
003598   6e00     movwf	0, 0               	MOVWF	r0x00
00359a   0e09     movlw	0x9                	MOVLW	0x09
00359c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00359e   0e01     movlw	0x1                	MOVLW	0x01
0035a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0035a2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0035a4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0035a6   f004
0035a8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0035aa   f005
0035ac   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0035ae   f006
0035b0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0035b2   f007
0035b4   0eff     movlw	0xff               	MOVLW	0xff
0035b6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0035b8   0eff     movlw	0xff               	MOVLW	0xff
0035ba   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0035bc   0eff     movlw	0xff               	MOVLW	0xff
0035be   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0035c0   0eff     movlw	0xff               	MOVLW	0xff
0035c2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0035c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0035c6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0035c8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0035ca   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0035cc   e1eb     bnz	0x35a4               	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0035ce   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0035d0   0e03     movlw	0x3                	MOVLW	0x03
0035d2   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
0035d4   0000     nop                      	nop 
0035d6   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0035d8   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
0035da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0035dc   f001
0035de   6a02     clrf	0x2, 0              	CLRF	r0x02
0035e0   0e00     movlw	0                  	MOVLW	0x00
0035e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0035e4   e102     bnz	0x35ea               	BNZ	_00220_DS_
0035e6   0e03     movlw	0x3                	MOVLW	0x03
0035e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
0035ea   e239     bc	0x365e                	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0035ec   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
0035ee   0e11     movlw	0x11               	MOVLW	0x11
0035f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0035f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0035f4   6a03     clrf	0x3, 0              	CLRF	r0x03
0035f6   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0035f8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0035fa   f005
0035fc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0035fe   f006
003600   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003602   f007
003604   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
003606   f008
003608   0eff     movlw	0xff               	MOVLW	0xff
00360a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00360c   0eff     movlw	0xff               	MOVLW	0xff
00360e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003610   0eff     movlw	0xff               	MOVLW	0xff
003612   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003614   0eff     movlw	0xff               	MOVLW	0xff
003616   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
003618   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00361a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00361c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00361e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
003620   e1eb     bnz	0x35f8               	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
003622   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
003624   0e48     movlw	0x48               	MOVLW	0x48
003626   6e01     movwf	0x1, 0             	MOVWF	r0x01
003628   0e0d     movlw	0xd                	MOVLW	0x0d
00362a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00362c   6a03     clrf	0x3, 0              	CLRF	r0x03
00362e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
003630   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
003632   f005
003634   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003636   f006
003638   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00363a   f007
00363c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00363e   f008
003640   0eff     movlw	0xff               	MOVLW	0xff
003642   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
003644   0eff     movlw	0xff               	MOVLW	0xff
003646   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003648   0eff     movlw	0xff               	MOVLW	0xff
00364a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00364c   0eff     movlw	0xff               	MOVLW	0xff
00364e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
003650   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003652   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
003654   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003656   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
003658   e1eb     bnz	0x3630               	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00365a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00365c   d7be     bra	0x35da               	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
00365e   0e38     movlw	0x38               	MOVLW	0x38
003660   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003662   0e00     movlw	0                  	MOVLW	0x00
003664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003666   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
003668   f038
00366a   0e02     movlw	0x2                	MOVLW	0x02
00366c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00366e   0e55     movlw	0x55               	MOVLW	0x55
003670   6e00     movwf	0, 0               	MOVWF	r0x00
003672   6a01     clrf	0x1, 0              	CLRF	r0x01
003674   6a02     clrf	0x2, 0              	CLRF	r0x02
003676   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
003678   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00367a   f004
00367c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00367e   f005
003680   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003682   f006
003684   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003686   f007
003688   0eff     movlw	0xff               	MOVLW	0xff
00368a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00368c   0eff     movlw	0xff               	MOVLW	0xff
00368e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003690   0eff     movlw	0xff               	MOVLW	0xff
003692   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003694   0eff     movlw	0xff               	MOVLW	0xff
003696   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003698   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00369a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00369c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00369e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0036a0   e1eb     bnz	0x3678               	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0036a2   0e06     movlw	0x6                	MOVLW	0x06
0036a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036a6   0e00     movlw	0                  	MOVLW	0x00
0036a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036aa   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
0036ac   f038
0036ae   0e02     movlw	0x2                	MOVLW	0x02
0036b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0036b2   0e55     movlw	0x55               	MOVLW	0x55
0036b4   6e00     movwf	0, 0               	MOVWF	r0x00
0036b6   6a01     clrf	0x1, 0              	CLRF	r0x01
0036b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0036ba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0036bc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0036be   f004
0036c0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0036c2   f005
0036c4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0036c6   f006
0036c8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0036ca   f007
0036cc   0eff     movlw	0xff               	MOVLW	0xff
0036ce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0036d0   0eff     movlw	0xff               	MOVLW	0xff
0036d2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0036d4   0eff     movlw	0xff               	MOVLW	0xff
0036d6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0036d8   0eff     movlw	0xff               	MOVLW	0xff
0036da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0036dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0036de   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0036e0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0036e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0036e4   e1eb     bnz	0x36bc               	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0036e6   0e0c     movlw	0xc                	MOVLW	0x0c
0036e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036ea   0e00     movlw	0                  	MOVLW	0x00
0036ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036ee   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
0036f0   f038
0036f2   0e02     movlw	0x2                	MOVLW	0x02
0036f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0036f6   0e55     movlw	0x55               	MOVLW	0x55
0036f8   6e00     movwf	0, 0               	MOVWF	r0x00
0036fa   6a01     clrf	0x1, 0              	CLRF	r0x01
0036fc   6a02     clrf	0x2, 0              	CLRF	r0x02
0036fe   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
003700   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003702   f004
003704   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
003706   f005
003708   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00370a   f006
00370c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00370e   f007
003710   0eff     movlw	0xff               	MOVLW	0xff
003712   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003714   0eff     movlw	0xff               	MOVLW	0xff
003716   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003718   0eff     movlw	0xff               	MOVLW	0xff
00371a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00371c   0eff     movlw	0xff               	MOVLW	0xff
00371e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003720   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003722   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
003724   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
003726   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003728   e1eb     bnz	0x3700               	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
00372a   0e01     movlw	0x1                	MOVLW	0x01
00372c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00372e   0e00     movlw	0                  	MOVLW	0x00
003730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003732   ecd0     call	0x71a0, 0           	CALL	_LCDWrite
003734   f038
003736   0e02     movlw	0x2                	MOVLW	0x02
003738   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00373a   0e48     movlw	0x48               	MOVLW	0x48
00373c   6e00     movwf	0, 0               	MOVWF	r0x00
00373e   0e0d     movlw	0xd                	MOVLW	0x0d
003740   6e01     movwf	0x1, 0             	MOVWF	r0x01
003742   6a02     clrf	0x2, 0              	CLRF	r0x02
003744   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
003746   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003748   f004
00374a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00374c   f005
00374e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003750   f006
003752   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003754   f007
003756   0eff     movlw	0xff               	MOVLW	0xff
003758   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00375a   0eff     movlw	0xff               	MOVLW	0xff
00375c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00375e   0eff     movlw	0xff               	MOVLW	0xff
003760   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003762   0eff     movlw	0xff               	MOVLW	0xff
003764   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003766   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003768   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00376a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00376c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00376e   e1eb     bnz	0x3746               	BNZ	_00185_DS_
003770   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003772   f008
003774   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003776   f007
003778   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00377a   f006
00377c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00377e   f005
003780   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003782   f004
003784   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003786   f003
003788   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00378a   f002
00378c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00378e   f001
003790   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003792   f000
003794   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003796   ffd9
003798   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0071a0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0071a2   ffe5
0071a4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0071a6   ffd9
0071a8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0071aa   ffe5
0071ac   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0071ae   ffe5
0071b0   0e02     movlw	0x2                	MOVLW	0x02
0071b2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0071b4   f000
0071b6   0e03     movlw	0x3                	MOVLW	0x03
0071b8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0071ba   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0071bc   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0071be   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0071c0   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0071c2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
0071c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0071c6   0b01     andlw	0x1                	ANDLW	0x01
0071c8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0071ca   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0071cc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0071ce   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
0071d0   0bfb     andlw	0xfb               	ANDLW	0xfb
0071d2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0071d4   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
0071d6   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
0071d8   ff8d
0071da   0000     nop                      	nop 
0071dc   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0071de   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
0071e0   0000     nop                      	nop 
0071e2   0000     nop                      	nop 
0071e4   0000     nop                      	nop 
0071e6   0000     nop                      	nop 
0071e8   0000     nop                      	nop 
0071ea   0000     nop                      	nop 
0071ec   0000     nop                      	nop 
0071ee   0000     nop                      	nop 
0071f0   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0071f2   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0071f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0071f6   f001
0071f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0071fa   f000
0071fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0071fe   ffd9
007200   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:32 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _StackInit
                                           	global _StackTask
                                           	global _StackApplications
                                           	global _remoteNode
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _GenerateRandomDWORD
                                           	extern _MACInit
                                           	extern _MACIsLinked
                                           	extern _MACGetHeader
                                           	extern _IPGetHeader
                                           	extern _ARPInit
                                           	extern _ARPProcess
                                           	extern _UDPInit
                                           	extern _UDPTask
                                           	extern _UDPProcess
                                           	extern _UDPDiscard
                                           	extern _DHCPInit
                                           	extern _DHCPTask
                                           	extern _DHCPDisable
                                           	extern _DHCPIsBound
                                           	extern _ICMPProcess
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _StackTask_bLastLinkState_2_2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_StackTsk_0	udata
                                           _smStack	res	1
                                           
                                           udata_StackTsk_1	udata
                                           _StackTask_tempLocalIP_1_1	res	4
                                           
                                           udata_StackTsk_2	udata
                                           _remoteNode	res	10
                                           
                                           udata_StackTsk_3	udata
                                           _StackTask_cFrameType_1_1	res	1
                                           
                                           udata_StackTsk_4	udata
                                           _StackTask_cIPFrameType_1_1	res	1
                                           
                                           udata_StackTsk_5	udata
                                           _StackTask_dataCount_1_1	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_StackTsk__StackApplications	code
                                           _StackApplications:
                                           ;	.line	378; TCPIP_Stack/StackTsk.c	void StackApplications(void)
007a0a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a0c   ffe5
007a0e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a10   ffd9
                                           ;	.line	435; TCPIP_Stack/StackTsk.c	}
007a12   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a14   ffd9
007a16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTask	code
                                           _StackTask:
                                           ;	.line	209; TCPIP_Stack/StackTsk.c	void StackTask(void)
001bca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001bcc   ffe5
001bce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bd0   ffd9
001bd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bd4   ffe5
001bd6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bd8   ffe5
001bda   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bdc   ffe5
001bde   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001be0   ffe5
001be2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001be4   ffe5
001be6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001be8   ffe5
001bea   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bec   ffe5
001bee   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bf0   ffe5
001bf2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bf4   ffe5
001bf6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bf8   ffe5
001bfa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bfc   ffe5
001bfe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001c00   ffe5
001c02   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001c04   ffe5
001c06   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001c08   ffe5
001c0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	229; TCPIP_Stack/StackTsk.c	if(AppConfig.Flags.bIsDHCPEnabled)
001c0c   ad2c     btfss	0x2c, 0x6, 0x1     	BTFSS	(_AppConfig + 44), 6, B
001c0e   d047     bra	0x1c9e               	BRA	_00119_DS_
                                           ;	.line	234; TCPIP_Stack/StackTsk.c	bCurrentLinkState = MACIsLinked();
001c10   ece4     call	0x75c8, 0           	CALL	_MACIsLinked
001c12   f03a
001c14   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	235; TCPIP_Stack/StackTsk.c	if(bCurrentLinkState != bLastLinkState)
001c16   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c18   0108     movlb	0x8                	BANKSEL	_StackTask_bLastLinkState_2_2
001c1a   1944     xorwf	0x44, 0, 0x1       	XORWF	_StackTask_bLastLinkState_2_2, W, B
001c1c   e101     bnz	0x1c20               	BNZ	_00157_DS_
001c1e   d033     bra	0x1c86               	BRA	_00115_DS_
                                           _00157_DS_:
                                           ;	.line	237; TCPIP_Stack/StackTsk.c	bLastLinkState = bCurrentLinkState;
001c20   c000     movff	0, 0x844           	MOVFF	r0x00, _StackTask_bLastLinkState_2_2
001c22   f844
                                           ;	.line	238; TCPIP_Stack/StackTsk.c	if(!bCurrentLinkState) //we lost the MAC link
001c24   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c26   e12f     bnz	0x1c86               	BNZ	_00115_DS_
                                           ;	.line	240; TCPIP_Stack/StackTsk.c	AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
001c28   ce14     movff	0xe14, 0           	MOVFF	(_AppConfig + 20), r0x00
001c2a   f000
001c2c   ce15     movff	0xe15, 0x1         	MOVFF	(_AppConfig + 21), r0x01
001c2e   f001
001c30   ce16     movff	0xe16, 0x2         	MOVFF	(_AppConfig + 22), r0x02
001c32   f002
001c34   ce17     movff	0xe17, 0x3         	MOVFF	(_AppConfig + 23), r0x03
001c36   f003
001c38   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c3a   010e     movlb	0xe                	BANKSEL	_AppConfig
001c3c   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
001c3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c40   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001c42   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001c44   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c46   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001c48   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
001c4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001c4e   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	241; TCPIP_Stack/StackTsk.c	AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
001c50   ce18     movff	0xe18, 0           	MOVFF	(_AppConfig + 24), r0x00
001c52   f000
001c54   ce19     movff	0xe19, 0x1         	MOVFF	(_AppConfig + 25), r0x01
001c56   f001
001c58   ce1a     movff	0xe1a, 0x2         	MOVFF	(_AppConfig + 26), r0x02
001c5a   f002
001c5c   ce1b     movff	0xe1b, 0x3         	MOVFF	(_AppConfig + 27), r0x03
001c5e   f003
001c60   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c62   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001c64   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
001c66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c68   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001c6a   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
001c6c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c6e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001c70   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
001c72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c74   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001c76   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
001c78   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	242; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
001c7a   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	243; TCPIP_Stack/StackTsk.c	DHCPInit(0);
001c7c   0e00     movlw	0                  	MOVLW	0x00
001c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c80   ec7e     call	0x6cfc, 0           	CALL	_DHCPInit
001c82   f036
001c84   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	251; TCPIP_Stack/StackTsk.c	DHCPTask();
001c86   ec83     call	0x706, 0            	CALL	_DHCPTask
001c88   f003
                                           ;	.line	253; TCPIP_Stack/StackTsk.c	if(DHCPIsBound(0))
001c8a   0e00     movlw	0                  	MOVLW	0x00
001c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8e   ec52     call	0x78a4, 0           	CALL	_DHCPIsBound
001c90   f03c
001c92   6e00     movwf	0, 0               	MOVWF	r0x00
001c94   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001c96   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c98   e002     bz	0x1c9e                	BZ	_00119_DS_
001c9a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	254; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = FALSE;
001c9c   9f2c     bcf	0x2c, 0x7, 0x1       	BCF	(_AppConfig + 44), 7, B
                                           _00119_DS_:
                                           ;	.line	270; TCPIP_Stack/StackTsk.c	UDPTask();
001c9e   ece9     call	0x79d2, 0           	CALL	_UDPTask
001ca0   f03c
                                           _00138_DS_:
                                           ;	.line	285; TCPIP_Stack/StackTsk.c	UDPDiscard();
001ca2   ecf8     call	0x77f0, 0           	CALL	_UDPDiscard
001ca4   f03b
                                           ;	.line	290; TCPIP_Stack/StackTsk.c	if(!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
001ca6   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode + 4)
001ca8   6e01     movwf	0x1, 0             	MOVWF	r0x01
001caa   0eb0     movlw	0xb0               	MOVLW	LOW(_remoteNode + 4)
001cac   6e00     movwf	0, 0               	MOVWF	r0x00
001cae   0e80     movlw	0x80               	MOVLW	0x80
001cb0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001cb2   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cFrameType_1_1)
001cb4   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cb6   0e63     movlw	0x63               	MOVLW	LOW(_StackTask_cFrameType_1_1)
001cb8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001cba   0e80     movlw	0x80               	MOVLW	0x80
001cbc   6e05     movwf	0x5, 0             	MOVWF	r0x05
001cbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd6   ec02     call	0x3c04, 0           	CALL	_MACGetHeader
001cd8   f01e
001cda   6e00     movwf	0, 0               	MOVWF	r0x00
001cdc   0e06     movlw	0x6                	MOVLW	0x06
001cde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001ce0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ce2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001ce4   d0ea     bra	0x1eba               	BRA	_00140_DS_
                                           ;	.line	294; TCPIP_Stack/StackTsk.c	switch(cFrameType)
001ce6   ca63     movff	0xa63, 0           	MOVFF	_StackTask_cFrameType_1_1, r0x00
001ce8   f000
001cea   6a01     clrf	0x1, 0              	CLRF	r0x01
001cec   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cee   e102     bnz	0x1cf4               	BNZ	_00159_DS_
001cf0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cf2   e009     bz	0x1d06                	BZ	_00123_DS_
                                           _00159_DS_:
001cf4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cf6   0a06     xorlw	0x6                	XORLW	0x06
001cf8   e102     bnz	0x1cfe               	BNZ	_00160_DS_
001cfa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cfc   e001     bz	0x1d00                	BZ	_00161_DS_
                                           _00160_DS_:
001cfe   d7d1     bra	0x1ca2               	BRA	_00138_DS_
                                           _00161_DS_:
                                           ;	.line	298; TCPIP_Stack/StackTsk.c	ARPProcess();
001d00   ecf9     call	0x2df2, 0           	CALL	_ARPProcess
001d02   f016
                                           ;	.line	299; TCPIP_Stack/StackTsk.c	break;
001d04   d7ce     bra	0x1ca2               	BRA	_00138_DS_
                                           _00123_DS_:
                                           ;	.line	303; TCPIP_Stack/StackTsk.c	if(!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCount))
001d06   0e08     movlw	0x8                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001d08   6e01     movwf	0x1, 0             	MOVWF	r0x01
001d0a   0efa     movlw	0xfa               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001d0c   6e00     movwf	0, 0               	MOVWF	r0x00
001d0e   0e80     movlw	0x80               	MOVLW	0x80
001d10   6e02     movwf	0x2, 0             	MOVWF	r0x02
001d12   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001d14   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d16   0eac     movlw	0xac               	MOVLW	LOW(_remoteNode)
001d18   6e03     movwf	0x3, 0             	MOVWF	r0x03
001d1a   0e80     movlw	0x80               	MOVLW	0x80
001d1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d1e   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cIPFrameType_1_1)
001d20   6e07     movwf	0x7, 0             	MOVWF	r0x07
001d22   0e64     movlw	0x64               	MOVLW	LOW(_StackTask_cIPFrameType_1_1)
001d24   6e06     movwf	0x6, 0             	MOVWF	r0x06
001d26   0e80     movlw	0x80               	MOVLW	0x80
001d28   6e08     movwf	0x8, 0             	MOVWF	r0x08
001d2a   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_dataCount_1_1)
001d2c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001d2e   0e4d     movlw	0x4d               	MOVLW	LOW(_StackTask_dataCount_1_1)
001d30   6e09     movwf	0x9, 0             	MOVWF	r0x09
001d32   0e80     movlw	0x80               	MOVLW	0x80
001d34   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001d36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001d3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d42   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d46   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d66   eccd     call	0x379a, 0           	CALL	_IPGetHeader
001d68   f01b
001d6a   6e00     movwf	0, 0               	MOVWF	r0x00
001d6c   0e0c     movlw	0xc                	MOVLW	0x0c
001d6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d70   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d72   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d74   d796     bra	0x1ca2               	BRA	_00138_DS_
                                           ;	.line	307; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_ICMP)
001d76   ca64     movff	0xa64, 0           	MOVFF	_StackTask_cIPFrameType_1_1, r0x00
001d78   f000
001d7a   6a01     clrf	0x1, 0              	CLRF	r0x01
001d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d7e   0a01     xorlw	0x1                	XORLW	0x01
001d80   e102     bnz	0x1d86               	BNZ	_00162_DS_
001d82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d84   e001     bz	0x1d88                	BZ	_00163_DS_
                                           _00162_DS_:
001d86   d06d     bra	0x1e62               	BRA	_00131_DS_
                                           _00163_DS_:
                                           ;	.line	328; TCPIP_Stack/StackTsk.c	if( (tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
001d88   c8fa     movff	0x8fa, 0x2         	MOVFF	_StackTask_tempLocalIP_1_1, r0x02
001d8a   f002
001d8c   c8fb     movff	0x8fb, 0x3         	MOVFF	(_StackTask_tempLocalIP_1_1 + 1), r0x03
001d8e   f003
001d90   c8fc     movff	0x8fc, 0x4         	MOVFF	(_StackTask_tempLocalIP_1_1 + 2), r0x04
001d92   f004
001d94   c8fd     movff	0x8fd, 0x5         	MOVFF	(_StackTask_tempLocalIP_1_1 + 3), r0x05
001d96   f005
001d98   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
001d9a   f006
001d9c   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
001d9e   f007
001da0   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
001da2   f008
001da4   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
001da6   f009
001da8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001daa   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001dac   e10a     bnz	0x1dc2               	BNZ	_00165_DS_
001dae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001db0   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001db2   e107     bnz	0x1dc2               	BNZ	_00165_DS_
001db4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001db6   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001db8   e104     bnz	0x1dc2               	BNZ	_00165_DS_
001dba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dbc   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001dbe   e101     bnz	0x1dc2               	BNZ	_00165_DS_
001dc0   d039     bra	0x1e34               	BRA	_00126_DS_
                                           _00165_DS_:
                                           ;	.line	329; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == 0xFFFFFFFF) ||
001dc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dc4   0aff     xorlw	0xff               	XORLW	0xff
001dc6   e109     bnz	0x1dda               	BNZ	_00167_DS_
001dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dca   0aff     xorlw	0xff               	XORLW	0xff
001dcc   e106     bnz	0x1dda               	BNZ	_00167_DS_
001dce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dd0   0aff     xorlw	0xff               	XORLW	0xff
001dd2   e103     bnz	0x1dda               	BNZ	_00167_DS_
001dd4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dd6   0aff     xorlw	0xff               	XORLW	0xff
001dd8   e02d     bz	0x1e34                	BZ	_00126_DS_
                                           _00167_DS_:
001dda   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	330; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val) | ~AppConfig.MyMask.Val)))
001ddc   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
001dde   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
001de0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001de2   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
001de4   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
001de6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001de8   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
001dea   1608     andwf	0x8, 0x1, 0        	ANDWF	r0x08, F
001dec   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001dee   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
001df0   1609     andwf	0x9, 0x1, 0        	ANDWF	r0x09, F
001df2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001df4   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
001df6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001df8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001dfa   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
001dfc   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001dfe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001e00   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
001e02   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001e04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001e06   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
001e08   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001e0a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001e0c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001e0e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001e10   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001e12   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001e14   1208     iorwf	0x8, 0x1, 0        	IORWF	r0x08, F
001e16   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001e18   1209     iorwf	0x9, 0x1, 0        	IORWF	r0x09, F
001e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e1c   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001e1e   e109     bnz	0x1e32               	BNZ	_00170_DS_
001e20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e22   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001e24   e106     bnz	0x1e32               	BNZ	_00170_DS_
001e26   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e28   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001e2a   e103     bnz	0x1e32               	BNZ	_00170_DS_
001e2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e2e   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001e30   e001     bz	0x1e34                	BZ	_00126_DS_
                                           _00170_DS_:
001e32   d737     bra	0x1ca2               	BRA	_00138_DS_
                                           _00126_DS_:
                                           ;	.line	332; TCPIP_Stack/StackTsk.c	ICMPProcess(&remoteNode, dataCount);
001e34   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e36   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e38   0eac     movlw	0xac               	MOVLW	LOW(_remoteNode)
001e3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e3c   0e80     movlw	0x80               	MOVLW	0x80
001e3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e40   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e42   514e     movf	0x4e, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e46   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e48   514d     movf	0x4d, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e58   ecbe     call	0x477c, 0           	CALL	_ICMPProcess
001e5a   f023
001e5c   0e05     movlw	0x5                	MOVLW	0x05
001e5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	335; TCPIP_Stack/StackTsk.c	break;
001e60   d720     bra	0x1ca2               	BRA	_00138_DS_
                                           _00131_DS_:
                                           ;	.line	349; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_UDP)
001e62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e64   0a11     xorlw	0x11               	XORLW	0x11
001e66   e102     bnz	0x1e6c               	BNZ	_00172_DS_
001e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e6a   e001     bz	0x1e6e                	BZ	_00173_DS_
                                           _00172_DS_:
001e6c   d71a     bra	0x1ca2               	BRA	_00138_DS_
                                           _00173_DS_:
                                           ;	.line	353; TCPIP_Stack/StackTsk.c	if(UDPProcess(&remoteNode, &tempLocalIP, dataCount))
001e6e   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e70   6e01     movwf	0x1, 0             	MOVWF	r0x01
001e72   0eac     movlw	0xac               	MOVLW	LOW(_remoteNode)
001e74   6e00     movwf	0, 0               	MOVWF	r0x00
001e76   0e80     movlw	0x80               	MOVLW	0x80
001e78   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e7a   0e08     movlw	0x8                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001e7c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e7e   0efa     movlw	0xfa               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001e80   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e82   0e80     movlw	0x80               	MOVLW	0x80
001e84   6e05     movwf	0x5, 0             	MOVWF	r0x05
001e86   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e88   514e     movf	0x4e, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e8c   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e8e   514d     movf	0x4d, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e92   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e96   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ea0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ea4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ea8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eaa   eca0     call	0x2540, 0           	CALL	_UDPProcess
001eac   f012
001eae   6e00     movwf	0, 0               	MOVWF	r0x00
001eb0   0e08     movlw	0x8                	MOVLW	0x08
001eb2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001eb4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001eb6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001eb8   d6f4     bra	0x1ca2               	BRA	_00138_DS_
                                           _00140_DS_:
                                           ;	.line	359; TCPIP_Stack/StackTsk.c	}
001eba   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001ebc   f00d
001ebe   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001ec0   f00c
001ec2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001ec4   f00b
001ec6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001ec8   f00a
001eca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ecc   f009
001ece   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ed0   f008
001ed2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ed4   f007
001ed6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ed8   f006
001eda   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001edc   f005
001ede   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ee0   f004
001ee2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ee4   f003
001ee6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ee8   f002
001eea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001eec   f001
001eee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ef0   f000
001ef2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ef4   ffd9
001ef6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackInit	code
                                           _StackInit:
                                           ;	.line	115; TCPIP_Stack/StackTsk.c	void StackInit(void)
006bf0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006bf2   ffe5
006bf4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006bf6   ffd9
006bf8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006bfa   ffe5
006bfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006bfe   ffe5
006c00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c02   ffe5
006c04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006c06   ffe5
006c08   010a     movlb	0xa                	BANKSEL	_smStack
                                           ;	.line	117; TCPIP_Stack/StackTsk.c	smStack                     = SM_STACK_IDLE;
006c0a   6b62     clrf	0x62, 0x1           	CLRF	_smStack, B
006c0c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	124; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
006c0e   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	128; TCPIP_Stack/StackTsk.c	srand(GenerateRandomDWORD());
006c10   ec8a     call	0x2b14, 0           	CALL	_GenerateRandomDWORD
006c12   f015
006c14   6e00     movwf	0, 0               	MOVWF	r0x00
006c16   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
006c18   f001
006c1a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
006c1c   f002
006c1e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
006c20   f003
006c22   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006c24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006c28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006c2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c32   ec0d     call	0x781a, 0           	CALL	_srand
006c34   f03c
006c36   0e04     movlw	0x4                	MOVLW	0x04
006c38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; TCPIP_Stack/StackTsk.c	MACInit();
006c3a   ec47     call	0x568e, 0           	CALL	_MACInit
006c3c   f02b
                                           ;	.line	139; TCPIP_Stack/StackTsk.c	ARPInit();
006c3e   ec86     call	0x770c, 0           	CALL	_ARPInit
006c40   f03b
                                           ;	.line	142; TCPIP_Stack/StackTsk.c	UDPInit();
006c42   ec79     call	0x74f2, 0           	CALL	_UDPInit
006c44   f03a
                                           ;	.line	174; TCPIP_Stack/StackTsk.c	DHCPInit(0);
006c46   0e00     movlw	0                  	MOVLW	0x00
006c48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c4a   ec7e     call	0x6cfc, 0           	CALL	_DHCPInit
006c4c   f036
006c4e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006c50   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	176; TCPIP_Stack/StackTsk.c	if(!AppConfig.Flags.bIsDHCPEnabled)
006c52   bd2c     btfsc	0x2c, 0x6, 0x1     	BTFSC	(_AppConfig + 44), 6, B
006c54   d005     bra	0x6c60               	BRA	_00107_DS_
                                           ;	.line	178; TCPIP_Stack/StackTsk.c	DHCPDisable(0);  
006c56   0e00     movlw	0                  	MOVLW	0x00
006c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c5a   ec53     call	0x74a6, 0           	CALL	_DHCPDisable
006c5c   f03a
006c5e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00107_DS_:
006c60   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006c62   f003
006c64   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006c66   f002
006c68   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006c6a   f001
006c6c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006c6e   f000
006c70   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006c72   ffd9
006c74   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  962 (0x03c2) bytes ( 0.73%)
                                           ;           	  481 (0x01e1) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.49%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:32 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:33 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickInit
                                           	global _TickGet
                                           	global _TickGetDiv256
                                           	global _TickGetDiv64K
                                           	global _TickConvertToMilliseconds
                                           	global _TickUpdate
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _dwInternalTicks	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_Tick_0	udata
                                           _vTickReading	res	6
                                           
                                           udata_Tick_1	udata
                                           _TickGetDiv256_ret_1_1	res	4
                                           
                                           udata_Tick_2	udata
                                           _TickGetDiv64K_ret_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Tick__TickUpdate	code
                                           _TickUpdate:
                                           ;	.line	356; TCPIP_Stack/Tick.c	void TickUpdate(void)
0077c6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077c8   ffe5
0077ca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077cc   ffd9
                                           ;	.line	358; TCPIP_Stack/Tick.c	if(INTCONbits.TMR0IF)
0077ce   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0077d0   d00c     bra	0x77ea               	BRA	_00143_DS_
0077d2   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	361; TCPIP_Stack/Tick.c	dwInternalTicks++;
0077d4   2b45     incf	0x45, 0x1, 0x1      	INCF	_dwInternalTicks, F, B
0077d6   e302     bnc	0x77dc               	BNC	_10141_DS_
0077d8   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
0077da   2b46     incf	0x46, 0x1, 0x1      	INCF	(_dwInternalTicks + 1), F, B
                                           _10141_DS_:
0077dc   e302     bnc	0x77e2               	BNC	_20142_DS_
0077de   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
0077e0   2b47     incf	0x47, 0x1, 0x1      	INCF	(_dwInternalTicks + 2), F, B
                                           _20142_DS_:
0077e2   e302     bnc	0x77e8               	BNC	_30143_DS_
0077e4   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
0077e6   2b48     incf	0x48, 0x1, 0x1      	INCF	(_dwInternalTicks + 3), F, B
                                           _30143_DS_:
                                           ;	.line	364; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;
0077e8   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00143_DS_:
0077ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0077ec   ffd9
0077ee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickConvertToMilliseconds	code
                                           _TickConvertToMilliseconds:
                                           ;	.line	333; TCPIP_Stack/Tick.c	DWORD TickConvertToMilliseconds(DWORD dwTickValue)
0066b6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0066b8   ffe5
0066ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0066bc   ffd9
0066be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0066c0   ffe5
0066c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0066c4   ffe5
0066c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0066c8   ffe5
0066ca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0066cc   ffe5
0066ce   0e02     movlw	0x2                	MOVLW	0x02
0066d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0066d2   f000
0066d4   0e03     movlw	0x3                	MOVLW	0x03
0066d6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0066d8   f001
0066da   0e04     movlw	0x4                	MOVLW	0x04
0066dc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0066de   f002
0066e0   0e05     movlw	0x5                	MOVLW	0x05
0066e2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0066e4   f003
                                           ;	.line	335; TCPIP_Stack/Tick.c	return (dwTickValue+(TICKS_PER_SECOND/2000ul))/((DWORD)(TICKS_PER_SECOND/1000ul));
0066e6   0e14     movlw	0x14               	MOVLW	0x14
0066e8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0066ea   0e00     movlw	0                  	MOVLW	0x00
0066ec   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0066ee   0e00     movlw	0                  	MOVLW	0x00
0066f0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0066f2   0e00     movlw	0                  	MOVLW	0x00
0066f4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0066f6   0e00     movlw	0                  	MOVLW	0x00
0066f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066fa   0e00     movlw	0                  	MOVLW	0x00
0066fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066fe   0e00     movlw	0                  	MOVLW	0x00
006700   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006702   0e28     movlw	0x28               	MOVLW	0x28
006704   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006706   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006708   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00670a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00670c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00670e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006712   5000     movf	0, 0, 0             	MOVF	r0x00, W
006714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006716   ecba     call	0x5574, 0           	CALL	__divulong
006718   f02a
00671a   6e00     movwf	0, 0               	MOVWF	r0x00
00671c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00671e   f001
006720   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
006722   f002
006724   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
006726   f003
006728   0e08     movlw	0x8                	MOVLW	0x08
00672a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00672c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00672e   ffe9
006730   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006732   fff4
006734   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006736   fff3
006738   5000     movf	0, 0, 0             	MOVF	r0x00, W
00673a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00673c   f003
00673e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006740   f002
006742   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006744   f001
006746   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006748   f000
00674a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00674c   ffd9
00674e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv64K	code
                                           _TickGetDiv64K:
                                           ;	.line	292; TCPIP_Stack/Tick.c	DWORD TickGetDiv64K(void)
00760c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00760e   ffe5
007610   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007612   ffd9
                                           ;	.line	296; TCPIP_Stack/Tick.c	GetTickCopy();
007614   ec9f     call	0x753e, 0           	CALL	_GetTickCopy
007616   f03a
007618   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	297; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[2];	// Note: This copy must be done one 
00761a   51d6     movf	0xd6, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
00761c   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
00761e   6f04     movwf	0x4, 0x1           	MOVWF	_TickGetDiv64K_ret_1_1, B
007620   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	298; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[3];	// byte at a time to prevent misaligned 
007622   51d7     movf	0xd7, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
007624   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 1)
007626   6f05     movwf	0x5, 0x1           	MOVWF	(_TickGetDiv64K_ret_1_1 + 1), B
007628   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	299; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[4];	// memory reads, which will reset the PIC.
00762a   51d8     movf	0xd8, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
00762c   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 2)
00762e   6f06     movwf	0x6, 0x1           	MOVWF	(_TickGetDiv64K_ret_1_1 + 2), B
007630   0108     movlb	0x8                	BANKSEL	(_vTickReading + 5)
                                           ;	.line	300; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[5];
007632   51d9     movf	0xd9, 0, 0x1        	MOVF	(_vTickReading + 5), W, B
007634   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 3)
007636   6f07     movwf	0x7, 0x1           	MOVWF	(_TickGetDiv64K_ret_1_1 + 3), B
                                           ;	.line	302; TCPIP_Stack/Tick.c	return ret.Val;
007638   ca07     movff	0xa07, 0xfe9       	MOVFF	(_TickGetDiv64K_ret_1_1 + 3), FSR0L
00763a   ffe9
00763c   ca06     movff	0xa06, 0xff4       	MOVFF	(_TickGetDiv64K_ret_1_1 + 2), PRODH
00763e   fff4
007640   ca05     movff	0xa05, 0xff3       	MOVFF	(_TickGetDiv64K_ret_1_1 + 1), PRODL
007642   fff3
007644   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
007646   5104     movf	0x4, 0, 0x1         	MOVF	_TickGetDiv64K_ret_1_1, W, B
007648   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00764a   ffd9
00764c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv256	code
                                           _TickGetDiv256:
                                           ;	.line	255; TCPIP_Stack/Tick.c	DWORD TickGetDiv256(void)
00764e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007650   ffe5
007652   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007654   ffd9
                                           ;	.line	259; TCPIP_Stack/Tick.c	GetTickCopy();
007656   ec9f     call	0x753e, 0           	CALL	_GetTickCopy
007658   f03a
00765a   0108     movlb	0x8                	BANKSEL	(_vTickReading + 1)
                                           ;	.line	260; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[1];	// Note: This copy must be done one 
00765c   51d5     movf	0xd5, 0, 0x1        	MOVF	(_vTickReading + 1), W, B
00765e   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007660   6f00     movwf	0, 0x1             	MOVWF	_TickGetDiv256_ret_1_1, B
007662   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	261; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[2];	// byte at a time to prevent misaligned 
007664   51d6     movf	0xd6, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
007666   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 1)
007668   6f01     movwf	0x1, 0x1           	MOVWF	(_TickGetDiv256_ret_1_1 + 1), B
00766a   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	262; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[3];	// memory reads, which will reset the PIC.
00766c   51d7     movf	0xd7, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
00766e   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 2)
007670   6f02     movwf	0x2, 0x1           	MOVWF	(_TickGetDiv256_ret_1_1 + 2), B
007672   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	263; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[4];
007674   51d8     movf	0xd8, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
007676   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 3)
007678   6f03     movwf	0x3, 0x1           	MOVWF	(_TickGetDiv256_ret_1_1 + 3), B
                                           ;	.line	265; TCPIP_Stack/Tick.c	return ret.Val;
00767a   ca03     movff	0xa03, 0xfe9       	MOVFF	(_TickGetDiv256_ret_1_1 + 3), FSR0L
00767c   ffe9
00767e   ca02     movff	0xa02, 0xff4       	MOVFF	(_TickGetDiv256_ret_1_1 + 2), PRODH
007680   fff4
007682   ca01     movff	0xa01, 0xff3       	MOVFF	(_TickGetDiv256_ret_1_1 + 1), PRODL
007684   fff3
007686   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007688   5100     movf	0, 0, 0x1           	MOVF	_TickGetDiv256_ret_1_1, W, B
00768a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00768c   ffd9
00768e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGet	code
                                           _TickGet:
                                           ;	.line	225; TCPIP_Stack/Tick.c	DWORD TickGet(void)
007840   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007842   ffe5
007844   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007846   ffd9
                                           ;	.line	227; TCPIP_Stack/Tick.c	GetTickCopy();
007848   ec9f     call	0x753e, 0           	CALL	_GetTickCopy
00784a   f03a
                                           ;	.line	228; TCPIP_Stack/Tick.c	return *((DWORD*)&vTickReading[0]);
00784c   c8d7     movff	0x8d7, 0xfe9       	MOVFF	(_vTickReading + 3), FSR0L
00784e   ffe9
007850   c8d6     movff	0x8d6, 0xff4       	MOVFF	(_vTickReading + 2), PRODH
007852   fff4
007854   c8d5     movff	0x8d5, 0xff3       	MOVFF	(_vTickReading + 1), PRODL
007856   fff3
007858   0108     movlb	0x8                	BANKSEL	_vTickReading
00785a   51d4     movf	0xd4, 0, 0x1        	MOVF	_vTickReading, W, B
00785c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00785e   ffd9
007860   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__GetTickCopy	code
                                           _GetTickCopy:
                                           ;	.line	157; TCPIP_Stack/Tick.c	static void GetTickCopy(void)
00753e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007540   ffe5
007542   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007544   ffd9
                                           _00113_DS_:
                                           ;	.line	164; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
007546   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
007548   0000     nop                      	nop 
                                           ;	.line	166; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 0;		// Disable interrupt
00754a   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	167; TCPIP_Stack/Tick.c	vTickReading[0] = TMR0L;
00754c   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
00754e   0108     movlb	0x8                	BANKSEL	_vTickReading
007550   6fd4     movwf	0xd4, 0x1          	MOVWF	_vTickReading, B
                                           ;	.line	168; TCPIP_Stack/Tick.c	vTickReading[1] = TMR0H;
007552   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
007554   0108     movlb	0x8                	BANKSEL	(_vTickReading + 1)
007556   6fd5     movwf	0xd5, 0x1          	MOVWF	(_vTickReading + 1), B
007558   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	169; TCPIP_Stack/Tick.c	*((DWORD*)&vTickReading[2]) = dwInternalTicks;
00755a   5145     movf	0x45, 0, 0x1        	MOVF	_dwInternalTicks, W, B
00755c   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
00755e   6fd6     movwf	0xd6, 0x1          	MOVWF	(_vTickReading + 2), B
007560   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
007562   5146     movf	0x46, 0, 0x1        	MOVF	(_dwInternalTicks + 1), W, B
007564   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
007566   6fd7     movwf	0xd7, 0x1          	MOVWF	(_vTickReading + 3), B
007568   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
00756a   5147     movf	0x47, 0, 0x1        	MOVF	(_dwInternalTicks + 2), W, B
00756c   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
00756e   6fd8     movwf	0xd8, 0x1          	MOVWF	(_vTickReading + 4), B
007570   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
007572   5148     movf	0x48, 0, 0x1        	MOVF	(_dwInternalTicks + 3), W, B
007574   0108     movlb	0x8                	BANKSEL	(_vTickReading + 5)
007576   6fd9     movwf	0xd9, 0x1          	MOVWF	(_vTickReading + 5), B
                                           ;	.line	170; TCPIP_Stack/Tick.c	} while(INTCONbits.TMR0IF);
007578   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
00757a   d7e5     bra	0x7546               	BRA	_00113_DS_
                                           ;	.line	171; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;			// Enable interrupt
00757c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
00757e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007580   ffd9
007582   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickInit	code
                                           _TickInit:
                                           ;	.line	97; TCPIP_Stack/Tick.c	void TickInit(void)
00795a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00795c   ffe5
00795e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007960   ffd9
                                           ;	.line	102; TCPIP_Stack/Tick.c	TMR0H = 0;
007962   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	103; TCPIP_Stack/Tick.c	TMR0L = 0;
007964   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	106; TCPIP_Stack/Tick.c	INTCON2bits.TMR0IP = 0;		// Low priority
007966   94f1     bcf	0xf1, 0x2, 0         	BCF	_INTCON2bits, 2
                                           ;	.line	107; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;          //reset overflow indicator
007968   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
00796a   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	111; TCPIP_Stack/Tick.c	T0CON = 0x87;
00796c   0e87     movlw	0x87               	MOVLW	0x87
00796e   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
007970   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007972   ffd9
007974   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  460 (0x01cc) bytes ( 0.35%)
                                           ;           	  230 (0x00e6) words
                                           ; udata size:	   14 (0x000e) bytes ( 0.36%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Dec 17 2009) (UNIX)
                                           ; This file was generated Mon Mar 15 11:43:33 2010
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _UDPInit
                                           	global _UDPTask
                                           	global _UDPOpen
                                           	global _UDPClose
                                           	global _UDPSetTxBuffer
                                           	global _UDPSetRxBuffer
                                           	global _UDPIsPutReady
                                           	global _UDPPut
                                           	global _UDPPutArray
                                           	global _UDPPutString
                                           	global _UDPFlush
                                           	global _UDPIsGetReady
                                           	global _UDPGet
                                           	global _UDPGetArray
                                           	global _UDPDiscard
                                           	global _UDPProcess
                                           	global _UDPSocketInfo
                                           	global _activeUDPSocket
                                           	global _UDPTxCount
                                           	global _UDPRxCount
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _CalcIPBufferChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACSetReadPtr
                                           	extern _MACGet
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACIsTxReady
                                           	extern _MACPut
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           	extern _IPSetRxBuffer
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LastPutSocket	db	0xff
                                           _SocketWithRxData	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           
                                           udata_UDP_0	udata
                                           _wPutOffset	res	2
                                           
                                           udata_UDP_1	udata
                                           _wGetOffset	res	2
                                           
                                           udata_UDP_2	udata
                                           _Flags	res	1
                                           
                                           udata_UDP_3	udata
                                           _UDPOpen_NextPort_1_1	res	2
                                           
                                           udata_UDP_4	udata
                                           _activeUDPSocket	res	1
                                           
                                           udata_UDP_5	udata
                                           _UDPSocketInfo	res	140
                                           
                                           udata_UDP_6	udata
                                           _UDPTxCount	res	2
                                           
                                           udata_UDP_7	udata
                                           _UDPFlush_wChecksum_1_1	res	2
                                           
                                           udata_UDP_8	udata
                                           _UDPFlush_h_1_1	res	8
                                           
                                           udata_UDP_9	udata
                                           _UDPFlush_pseudoHeader_2_2	res	12
                                           
                                           udata_UDP_10	udata
                                           _UDPRxCount	res	2
                                           
                                           udata_UDP_11	udata
                                           _UDPProcess_h_1_1	res	8
                                           
                                           udata_UDP_12	udata
                                           _UDPProcess_pseudoHeader_1_1	res	12
                                           
                                           udata_UDP_13	udata
                                           _UDPProcess_checksums_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_UDP__FindMatchingSocket	code
                                           _FindMatchingSocket:
                                           ;	.line	1017; TCPIP_Stack/UDP.c	static UDP_SOCKET FindMatchingSocket(UDP_HEADER *h,
001196   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001198   ffe5
00119a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00119c   ffd9
00119e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011a0   ffe5
0011a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011a4   ffe5
0011a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011a8   ffe5
0011aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011ac   ffe5
0011ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011b0   ffe5
0011b2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011b4   ffe5
0011b6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011b8   ffe5
0011ba   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011bc   ffe5
0011be   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011c0   ffe5
0011c2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011c4   ffe5
0011c6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011c8   ffe5
0011ca   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0011cc   ffe5
0011ce   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0011d0   ffe5
0011d2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0011d4   ffe5
0011d6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0011d8   ffe5
0011da   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0011dc   ffe5
0011de   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0011e0   ffe5
0011e2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0011e4   ffe5
0011e6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0011e8   ffe5
0011ea   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0011ec   ffe5
0011ee   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0011f0   ffe5
0011f2   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0011f4   ffe5
0011f6   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0011f8   ffe5
0011fa   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
0011fc   ffe5
0011fe   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
001200   ffe5
001202   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
001204   ffe5
001206   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
001208   ffe5
00120a   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
00120c   ffe5
00120e   0e02     movlw	0x2                	MOVLW	0x02
001210   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001212   f000
001214   0e03     movlw	0x3                	MOVLW	0x03
001216   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001218   f001
00121a   0e04     movlw	0x4                	MOVLW	0x04
00121c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00121e   f002
001220   0e05     movlw	0x5                	MOVLW	0x05
001222   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001224   f003
001226   0e06     movlw	0x6                	MOVLW	0x06
001228   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00122a   f004
00122c   0e07     movlw	0x7                	MOVLW	0x07
00122e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001230   f005
001232   0e08     movlw	0x8                	MOVLW	0x08
001234   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001236   f006
001238   0e09     movlw	0x9                	MOVLW	0x09
00123a   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00123c   f007
00123e   0e0a     movlw	0xa                	MOVLW	0x0a
001240   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001242   f008
                                           ;	.line	1025; TCPIP_Stack/UDP.c	partialMatch = INVALID_UDP_SOCKET;
001244   0eff     movlw	0xff               	MOVLW	0xff
001246   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	1027; TCPIP_Stack/UDP.c	p = UDPSocketInfo;
001248   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00124a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00124c   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00124e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001250   0e80     movlw	0x80               	MOVLW	0x80
001252   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
001254   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001256   5000     movf	0, 0, 0             	MOVF	r0x00, W
001258   0f02     addlw	0x2                	ADDLW	0x02
00125a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00125c   0e00     movlw	0                  	MOVLW	0x00
00125e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001260   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001262   0e00     movlw	0                  	MOVLW	0x00
001264   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001266   6e10     movwf	0x10, 0            	MOVWF	r0x10
001268   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
00126a   ffe9
00126c   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
00126e   fff3
001270   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
001272   ecb8     call	0x7770, 0           	CALL	__gptrget2
001274   f03b
001276   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001278   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
00127a   f00f
00127c   c00a     movff	0xa, 0x10          	MOVFF	r0x0a, r0x10
00127e   f010
001280   c00b     movff	0xb, 0x11          	MOVFF	r0x0b, r0x11
001282   f011
001284   c00c     movff	0xc, 0x12          	MOVFF	r0x0c, r0x12
001286   f012
001288   6a13     clrf	0x13, 0             	CLRF	r0x13
                                           _00306_DS_:
00128a   c013     movff	0x13, 0x14         	MOVFF	r0x13, r0x14
00128c   f014
00128e   6a15     clrf	0x15, 0             	CLRF	r0x15
001290   0e00     movlw	0                  	MOVLW	0x00
001292   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
001294   e102     bnz	0x129a               	BNZ	_00319_DS_
001296   0e0a     movlw	0xa                	MOVLW	0x0a
001298   5c14     subwf	0x14, 0, 0         	SUBWF	r0x14, W
                                           _00319_DS_:
00129a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00129c   d0b4     bra	0x1406               	BRA	_00309_DS_
                                           ;	.line	1035; TCPIP_Stack/UDP.c	if ( p->localPort == h->DestinationPort )
00129e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012a0   0f0c     addlw	0xc                	ADDLW	0x0c
0012a2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012a4   0e00     movlw	0                  	MOVLW	0x00
0012a6   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012a8   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012aa   0e00     movlw	0                  	MOVLW	0x00
0012ac   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012ae   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012b0   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012b2   ffe9
0012b4   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012b6   fff3
0012b8   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ba   ecb8     call	0x7770, 0           	CALL	__gptrget2
0012bc   f03b
0012be   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012c0   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012c2   f015
0012c4   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0012c6   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
0012c8   e103     bnz	0x12d0               	BNZ	_00320_DS_
0012ca   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0012cc   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
0012ce   e001     bz	0x12d2                	BZ	_00321_DS_
                                           _00320_DS_:
0012d0   d090     bra	0x13f2               	BRA	_00303_DS_
                                           _00321_DS_:
                                           ;	.line	1037; TCPIP_Stack/UDP.c	if(p->remotePort == h->SourcePort)
0012d2   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012d4   0f0a     addlw	0xa                	ADDLW	0x0a
0012d6   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012d8   0e00     movlw	0                  	MOVLW	0x00
0012da   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012dc   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012de   0e00     movlw	0                  	MOVLW	0x00
0012e0   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012e2   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012e4   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012e6   ffe9
0012e8   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012ea   fff3
0012ec   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ee   ecb8     call	0x7770, 0           	CALL	__gptrget2
0012f0   f03b
0012f2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012f4   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012f6   f015
0012f8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0012fa   ffe9
0012fc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0012fe   fff3
001300   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001302   ecb8     call	0x7770, 0           	CALL	__gptrget2
001304   f03b
001306   6e16     movwf	0x16, 0            	MOVWF	r0x16
001308   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00130a   f017
00130c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00130e   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
001310   e103     bnz	0x1318               	BNZ	_00322_DS_
001312   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001314   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
001316   e001     bz	0x131a                	BZ	_00323_DS_
                                           _00322_DS_:
001318   d06a     bra	0x13ee               	BRA	_00301_DS_
                                           _00323_DS_:
                                           ;	.line	1039; TCPIP_Stack/UDP.c	if( (p->remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) ||
00131a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00131c   ffe9
00131e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
001320   fff3
001322   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001324   ec48     call	0x7690, 0           	CALL	__gptrget4
001326   f03b
001328   6e14     movwf	0x14, 0            	MOVWF	r0x14
00132a   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00132c   f015
00132e   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001330   f016
001332   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001334   f017
001336   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001338   ffe9
00133a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00133c   fff3
00133e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001340   ec48     call	0x7690, 0           	CALL	__gptrget4
001342   f03b
001344   6e18     movwf	0x18, 0            	MOVWF	r0x18
001346   cff3     movff	0xff3, 0x19        	MOVFF	PRODL, r0x19
001348   f019
00134a   cff4     movff	0xff4, 0x1a        	MOVFF	PRODH, r0x1a
00134c   f01a
00134e   cfe9     movff	0xfe9, 0x1b        	MOVFF	FSR0L, r0x1b
001350   f01b
001352   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
001354   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
001356   e10a     bnz	0x136c               	BNZ	_00325_DS_
001358   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00135a   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
00135c   e107     bnz	0x136c               	BNZ	_00325_DS_
00135e   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001360   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
001362   e104     bnz	0x136c               	BNZ	_00325_DS_
001364   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
001366   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
001368   e101     bnz	0x136c               	BNZ	_00325_DS_
00136a   d03f     bra	0x13ea               	BRA	_00296_DS_
                                           _00325_DS_:
                                           ;	.line	1040; TCPIP_Stack/UDP.c	(localIP->Val == 0xFFFFFFFFul) || (localIP->Val == 
00136c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00136e   ffe9
001370   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001372   fff3
001374   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001376   ec48     call	0x7690, 0           	CALL	__gptrget4
001378   f03b
00137a   6e14     movwf	0x14, 0            	MOVWF	r0x14
00137c   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00137e   f015
001380   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001382   f016
001384   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001386   f017
001388   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00138a   0aff     xorlw	0xff               	XORLW	0xff
00138c   e109     bnz	0x13a0               	BNZ	_00327_DS_
00138e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001390   0aff     xorlw	0xff               	XORLW	0xff
001392   e106     bnz	0x13a0               	BNZ	_00327_DS_
001394   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001396   0aff     xorlw	0xff               	XORLW	0xff
001398   e103     bnz	0x13a0               	BNZ	_00327_DS_
00139a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00139c   0aff     xorlw	0xff               	XORLW	0xff
00139e   e025     bz	0x13ea                	BZ	_00296_DS_
                                           _00327_DS_:
0013a0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1041; TCPIP_Stack/UDP.c	(AppConfig.MyIPAddr.Val | (~AppConfig.MyMask.Val))))
0013a2   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
0013a4   6e18     movwf	0x18, 0            	MOVWF	r0x18
0013a6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
0013a8   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
0013aa   6e19     movwf	0x19, 0            	MOVWF	r0x19
0013ac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
0013ae   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
0013b0   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
0013b2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
0013b4   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
0013b6   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
0013b8   010e     movlb	0xe                	BANKSEL	_AppConfig
0013ba   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0013bc   1218     iorwf	0x18, 0x1, 0       	IORWF	r0x18, F
0013be   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0013c0   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0013c2   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x19, F
0013c4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0013c6   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0013c8   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x1a, F
0013ca   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
0013cc   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
0013ce   121b     iorwf	0x1b, 0x1, 0       	IORWF	r0x1b, F
0013d0   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0013d2   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
0013d4   e109     bnz	0x13e8               	BNZ	_00329_DS_
0013d6   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0013d8   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
0013da   e106     bnz	0x13e8               	BNZ	_00329_DS_
0013dc   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0013de   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
0013e0   e103     bnz	0x13e8               	BNZ	_00329_DS_
0013e2   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0013e4   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
0013e6   e001     bz	0x13ea                	BZ	_00296_DS_
                                           _00329_DS_:
0013e8   d002     bra	0x13ee               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	1043; TCPIP_Stack/UDP.c	return s;
0013ea   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0013ec   d054     bra	0x1496               	BRA	_00310_DS_
                                           _00301_DS_:
                                           ;	.line	1047; TCPIP_Stack/UDP.c	partialMatch = s;
0013ee   c013     movff	0x13, 0x9          	MOVFF	r0x13, r0x09
0013f0   f009
                                           _00303_DS_:
                                           ;	.line	1049; TCPIP_Stack/UDP.c	p++;
0013f2   0e0e     movlw	0xe                	MOVLW	0x0e
0013f4   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0013f6   0e00     movlw	0                  	MOVLW	0x00
0013f8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0013fa   0e00     movlw	0                  	MOVLW	0x00
0013fc   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x12, F
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0013fe   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
001400   c013     movff	0x13, 0xd          	MOVFF	r0x13, r0x0d
001402   f00d
001404   d742     bra	0x128a               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	1052; TCPIP_Stack/UDP.c	if ( partialMatch != INVALID_UDP_SOCKET )
001406   c009     movff	0x9, 0x6           	MOVFF	r0x09, r0x06
001408   f006
00140a   6a07     clrf	0x7, 0              	CLRF	r0x07
00140c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00140e   0aff     xorlw	0xff               	XORLW	0xff
001410   e103     bnz	0x1418               	BNZ	_00332_DS_
001412   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001414   e101     bnz	0x1418               	BNZ	_00332_DS_
001416   d03e     bra	0x1494               	BRA	_00305_DS_
                                           ; ;multiply lit val:0x0e by variable r0x09 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00332_DS_:
                                           ;	.line	1054; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[partialMatch];
001418   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00141a   0d0e     mullw	0xe                	MULLW	0x0e
00141c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00141e   f006
001420   6a07     clrf	0x7, 0              	CLRF	r0x07
001422   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
001424   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
001426   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
001428   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00142a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00142c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00142e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001430   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001432   0e80     movlw	0x80               	MOVLW	0x80
001434   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1057; TCPIP_Stack/UDP.c	(void*)remoteNode, sizeof(p->remoteNode) );
001436   0e00     movlw	0                  	MOVLW	0x00
001438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143a   0e0a     movlw	0xa                	MOVLW	0x0a
00143c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001442   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001446   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00144c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001450   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001452   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001456   ec71     call	0x5ae2, 0           	CALL	_memcpy
001458   f02d
00145a   0e08     movlw	0x8                	MOVLW	0x08
00145c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1059; TCPIP_Stack/UDP.c	p->remotePort = h->SourcePort;
00145e   0e0a     movlw	0xa                	MOVLW	0x0a
001460   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
001462   0e00     movlw	0                  	MOVLW	0x00
001464   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
001466   0e00     movlw	0                  	MOVLW	0x00
001468   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00146a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00146c   ffe9
00146e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001470   fff3
001472   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001474   ecb8     call	0x7770, 0           	CALL	__gptrget2
001476   f03b
001478   6e00     movwf	0, 0               	MOVWF	r0x00
00147a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00147c   f001
00147e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001480   ffe5
001482   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
001484   fff4
001486   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
001488   ffe9
00148a   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
00148c   fff3
00148e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001490   ecd3     call	0x79a6, 0           	CALL	__gptrput2
001492   f03c
                                           _00305_DS_:
                                           ;	.line	1061; TCPIP_Stack/UDP.c	return partialMatch;
001494   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
                                           _00310_DS_:
001496   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
001498   f01b
00149a   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
00149c   f01a
00149e   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
0014a0   f019
0014a2   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
0014a4   f018
0014a6   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
0014a8   f017
0014aa   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0014ac   f016
0014ae   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0014b0   f015
0014b2   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0014b4   f014
0014b6   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0014b8   f013
0014ba   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0014bc   f012
0014be   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0014c0   f011
0014c2   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0014c4   f010
0014c6   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0014c8   f00f
0014ca   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0014cc   f00e
0014ce   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0014d0   f00d
0014d2   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0014d4   f00c
0014d6   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0014d8   f00b
0014da   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0014dc   f00a
0014de   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0014e0   f009
0014e2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0014e4   f008
0014e6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0014e8   f007
0014ea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0014ec   f006
0014ee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0014f0   f005
0014f2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0014f4   f004
0014f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0014f8   f003
0014fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0014fc   f002
0014fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001500   f001
001502   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001504   f000
001506   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001508   ffd9
00150a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPProcess	code
                                           _UDPProcess:
                                           ;	.line	929; TCPIP_Stack/UDP.c	BOOL UDPProcess(NODE_INFO *remoteNode, IP_ADDR *localIP, WORD len)
002540   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002542   ffe5
002544   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002546   ffd9
002548   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00254a   ffe5
00254c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00254e   ffe5
002550   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002552   ffe5
002554   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002556   ffe5
002558   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00255a   ffe5
00255c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00255e   ffe5
002560   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002562   ffe5
002564   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002566   ffe5
002568   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00256a   ffe5
00256c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00256e   ffe5
002570   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002572   ffe5
002574   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002576   ffe5
002578   0e02     movlw	0x2                	MOVLW	0x02
00257a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00257c   f000
00257e   0e03     movlw	0x3                	MOVLW	0x03
002580   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002582   f001
002584   0e04     movlw	0x4                	MOVLW	0x04
002586   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002588   f002
00258a   0e05     movlw	0x5                	MOVLW	0x05
00258c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00258e   f003
002590   0e06     movlw	0x6                	MOVLW	0x06
002592   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002594   f004
002596   0e07     movlw	0x7                	MOVLW	0x07
002598   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00259a   f005
00259c   0e08     movlw	0x8                	MOVLW	0x08
00259e   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0025a0   f006
0025a2   0e09     movlw	0x9                	MOVLW	0x09
0025a4   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0025a6   f007
0025a8   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	936; TCPIP_Stack/UDP.c	UDPRxCount = 0;
0025aa   6b59     clrf	0x59, 0x1           	CLRF	_UDPRxCount, B
0025ac   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
0025ae   6b5a     clrf	0x5a, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	939; TCPIP_Stack/UDP.c	MACGetArray((BYTE*)&h, sizeof(h));
0025b0   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_h_1_1)
0025b2   6e09     movwf	0x9, 0             	MOVWF	r0x09
0025b4   0ec6     movlw	0xc6               	MOVLW	LOW(_UDPProcess_h_1_1)
0025b6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025b8   0e80     movlw	0x80               	MOVLW	0x80
0025ba   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0025bc   0e00     movlw	0                  	MOVLW	0x00
0025be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c0   0e08     movlw	0x8                	MOVLW	0x08
0025c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0025c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025d0   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
0025d2   f02f
0025d4   0e05     movlw	0x5                	MOVLW	0x05
0025d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d8   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 1)
                                           ;	.line	941; TCPIP_Stack/UDP.c	h.SourcePort        = swaps(h.SourcePort);
0025da   51c7     movf	0xc7, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 1), W, B
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   0108     movlb	0x8                	BANKSEL	_UDPProcess_h_1_1
0025e0   51c6     movf	0xc6, 0, 0x1        	MOVF	_UDPProcess_h_1_1, W, B
0025e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e4   ecb1     call	0x7362, 0           	CALL	_swaps
0025e6   f039
0025e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0025ec   f009
0025ee   0e02     movlw	0x2                	MOVLW	0x02
0025f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025f4   0108     movlb	0x8                	BANKSEL	_UDPProcess_h_1_1
0025f6   6fc6     movwf	0xc6, 0x1          	MOVWF	_UDPProcess_h_1_1, B
0025f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025fa   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 1)
0025fc   6fc7     movwf	0xc7, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 1), B
0025fe   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 3)
                                           ;	.line	942; TCPIP_Stack/UDP.c	h.DestinationPort   = swaps(h.DestinationPort);
002600   51c9     movf	0xc9, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 3), W, B
002602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002604   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 2)
002606   51c8     movf	0xc8, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 2), W, B
002608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260a   ecb1     call	0x7362, 0           	CALL	_swaps
00260c   f039
00260e   6e08     movwf	0x8, 0             	MOVWF	r0x08
002610   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002612   f009
002614   0e02     movlw	0x2                	MOVLW	0x02
002616   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002618   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00261a   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 2)
00261c   6fc8     movwf	0xc8, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 2), B
00261e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002620   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 3)
002622   6fc9     movwf	0xc9, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 3), B
002624   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 5)
                                           ;	.line	943; TCPIP_Stack/UDP.c	h.Length            = swaps(h.Length) - sizeof(UDP_HEADER);
002626   51cb     movf	0xcb, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 5), W, B
002628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262a   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00262c   51ca     movf	0xca, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 4), W, B
00262e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002630   ecb1     call	0x7362, 0           	CALL	_swaps
002632   f039
002634   6e08     movwf	0x8, 0             	MOVWF	r0x08
002636   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002638   f009
00263a   0e02     movlw	0x2                	MOVLW	0x02
00263c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00263e   0ef8     movlw	0xf8               	MOVLW	0xf8
002640   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002642   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002644   0609     decf	0x9, 0x1, 0         	DECF	r0x09, F
002646   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002648   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00264a   6fca     movwf	0xca, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 4), B
00264c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00264e   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 5)
002650   6fcb     movwf	0xcb, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 5), B
002652   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 6)
                                           ;	.line	946; TCPIP_Stack/UDP.c	if(h.Checksum)
002654   51cc     movf	0xcc, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 6), W, B
002656   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 7)
002658   11cd     iorwf	0xcd, 0, 0x1       	IORWF	(_UDPProcess_h_1_1 + 7), W, B
00265a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00265c   d096     bra	0x278a               	BRA	_00279_DS_
                                           ;	.line	949; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val	= remoteNode->IPAddr.Val;
00265e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002660   ffe9
002662   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002664   fff3
002666   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002668   ec48     call	0x7690, 0           	CALL	__gptrget4
00266a   f03b
00266c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00266e   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002670   f009
002672   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
002674   f00a
002676   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
002678   f00b
00267a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00267c   0108     movlb	0x8                	BANKSEL	_UDPProcess_pseudoHeader_1_1
00267e   6f8c     movwf	0x8c, 0x1          	MOVWF	_UDPProcess_pseudoHeader_1_1, B
002680   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002682   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 1)
002684   6f8d     movwf	0x8d, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 1), B
002686   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002688   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 2)
00268a   6f8e     movwf	0x8e, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 2), B
00268c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00268e   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 3)
002690   6f8f     movwf	0x8f, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 3), B
                                           ;	.line	950; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val	= localIP->Val;
002692   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002694   ffe9
002696   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002698   fff3
00269a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00269c   ec48     call	0x7690, 0           	CALL	__gptrget4
00269e   f03b
0026a0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026a2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026a4   f009
0026a6   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
0026a8   f00a
0026aa   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
0026ac   f00b
0026ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026b0   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 4)
0026b2   6f90     movwf	0x90, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 4), B
0026b4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026b6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 5)
0026b8   6f91     movwf	0x91, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 5), B
0026ba   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0026bc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 6)
0026be   6f92     movwf	0x92, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 6), B
0026c0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0026c2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 7)
0026c4   6f93     movwf	0x93, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 7), B
0026c6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 8)
                                           ;	.line	951; TCPIP_Stack/UDP.c	pseudoHeader.Zero		= 0x0;
0026c8   6b94     clrf	0x94, 0x1           	CLRF	(_UDPProcess_pseudoHeader_1_1 + 8), B
                                           ;	.line	952; TCPIP_Stack/UDP.c	pseudoHeader.Protocol		= IP_PROT_UDP;
0026ca   0e11     movlw	0x11               	MOVLW	0x11
0026cc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 9)
0026ce   6f95     movwf	0x95, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 9), B
                                           ;	.line	953; TCPIP_Stack/UDP.c	pseudoHeader.Length		= len;
0026d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026d2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026d4   6f96     movwf	0x96, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026d6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026d8   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026da   6f97     movwf	0x97, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	955; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0026dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e4   ecb1     call	0x7362, 0           	CALL	_swaps
0026e6   f039
0026e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026ec   f009
0026ee   0e02     movlw	0x2                	MOVLW	0x02
0026f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026f4   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026f6   6f96     movwf	0x96, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026fa   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026fc   6f97     movwf	0x97, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	957; TCPIP_Stack/UDP.c	checksums.w[0] = ~CalcIPChecksum((BYTE*)&pseudoHeader,
0026fe   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_pseudoHeader_1_1)
002700   6e09     movwf	0x9, 0             	MOVWF	r0x09
002702   0e8c     movlw	0x8c               	MOVLW	LOW(_UDPProcess_pseudoHeader_1_1)
002704   6e08     movwf	0x8, 0             	MOVWF	r0x08
002706   0e80     movlw	0x80               	MOVLW	0x80
002708   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	958; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
00270a   0e00     movlw	0                  	MOVLW	0x00
00270c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00270e   0e0c     movlw	0xc                	MOVLW	0x0c
002710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002712   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002716   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002718   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00271c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271e   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
002720   f00f
002722   6e08     movwf	0x8, 0             	MOVWF	r0x08
002724   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002726   f009
002728   0e05     movlw	0x5                	MOVLW	0x05
00272a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00272c   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
00272e   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
002730   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002732   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
002734   6f08     movwf	0x8, 0x1           	MOVWF	_UDPProcess_checksums_1_1, B
002736   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002738   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00273a   6f09     movwf	0x9, 0x1           	MOVWF	(_UDPProcess_checksums_1_1 + 1), B
                                           ;	.line	963; TCPIP_Stack/UDP.c	IPSetRxBuffer(0);
00273c   0e00     movlw	0                  	MOVLW	0x00
00273e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002740   0e00     movlw	0                  	MOVLW	0x00
002742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002744   ec30     call	0x7260, 0           	CALL	_IPSetRxBuffer
002746   f039
002748   0e02     movlw	0x2                	MOVLW	0x02
00274a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/UDP.c	checksums.w[1] = CalcIPBufferChecksum(len);
00274c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00274e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002750   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002754   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002756   f006
002758   6e06     movwf	0x6, 0             	MOVWF	r0x06
00275a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00275c   f007
00275e   0e02     movlw	0x2                	MOVLW	0x02
002760   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002762   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002764   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002766   6f0a     movwf	0xa, 0x1           	MOVWF	(_UDPProcess_checksums_1_1 + 2), B
002768   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00276a   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00276c   6f0b     movwf	0xb, 0x1           	MOVWF	(_UDPProcess_checksums_1_1 + 3), B
00276e   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
                                           ;	.line	966; TCPIP_Stack/UDP.c	if(checksums.w[0] != checksums.w[1])
002770   5108     movf	0x8, 0, 0x1         	MOVF	_UDPProcess_checksums_1_1, W, B
002772   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002774   190a     xorwf	0xa, 0, 0x1        	XORWF	(_UDPProcess_checksums_1_1 + 2), W, B
002776   e105     bnz	0x2782               	BNZ	_00289_DS_
002778   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00277a   5109     movf	0x9, 0, 0x1         	MOVF	(_UDPProcess_checksums_1_1 + 1), W, B
00277c   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00277e   190b     xorwf	0xb, 0, 0x1        	XORWF	(_UDPProcess_checksums_1_1 + 3), W, B
002780   e004     bz	0x278a                	BZ	_00279_DS_
                                           _00289_DS_:
                                           ;	.line	968; TCPIP_Stack/UDP.c	MACDiscardRx();
002782   ecd7     call	0x69ae, 0           	CALL	_MACDiscardRx
002784   f034
                                           ;	.line	969; TCPIP_Stack/UDP.c	return FALSE;
002786   6ae8     clrf	0xe8, 0             	CLRF	WREG
002788   d035     bra	0x27f4               	BRA	_00283_DS_
                                           _00279_DS_:
                                           ;	.line	973; TCPIP_Stack/UDP.c	s = FindMatchingSocket(&h, remoteNode, localIP);
00278a   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_h_1_1)
00278c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00278e   0ec6     movlw	0xc6               	MOVLW	LOW(_UDPProcess_h_1_1)
002790   6e06     movwf	0x6, 0             	MOVWF	r0x06
002792   0e80     movlw	0x80               	MOVLW	0x80
002794   6e08     movwf	0x8, 0             	MOVWF	r0x08
002796   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00279c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0027ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0027b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0027b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0027b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ba   eccb     call	0x1196, 0           	CALL	_FindMatchingSocket
0027bc   f008
0027be   6e00     movwf	0, 0               	MOVWF	r0x00
0027c0   0e09     movlw	0x9                	MOVLW	0x09
0027c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	974; TCPIP_Stack/UDP.c	if(s == INVALID_UDP_SOCKET)
0027c4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0027c6   f001
0027c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0027ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027cc   0aff     xorlw	0xff               	XORLW	0xff
0027ce   e102     bnz	0x27d4               	BNZ	_00290_DS_
0027d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027d2   e001     bz	0x27d6                	BZ	_00291_DS_
                                           _00290_DS_:
0027d4   d004     bra	0x27de               	BRA	_00281_DS_
                                           _00291_DS_:
                                           ;	.line	978; TCPIP_Stack/UDP.c	MACDiscardRx();
0027d6   ecd7     call	0x69ae, 0           	CALL	_MACDiscardRx
0027d8   f034
                                           ;	.line	979; TCPIP_Stack/UDP.c	return FALSE;
0027da   6ae8     clrf	0xe8, 0             	CLRF	WREG
0027dc   d00b     bra	0x27f4               	BRA	_00283_DS_
                                           _00281_DS_:
                                           ;	.line	983; TCPIP_Stack/UDP.c	SocketWithRxData = s;
0027de   c000     movff	0, 0x84a           	MOVFF	r0x00, _SocketWithRxData
0027e0   f84a
                                           ;	.line	984; TCPIP_Stack/UDP.c	UDPRxCount = h.Length;
0027e2   c8ca     movff	0x8ca, 0xa59       	MOVFF	(_UDPProcess_h_1_1 + 4), _UDPRxCount
0027e4   fa59
0027e6   c8cb     movff	0x8cb, 0xa5a       	MOVFF	(_UDPProcess_h_1_1 + 5), (_UDPRxCount + 1)
0027e8   fa5a
0027ea   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	985; TCPIP_Stack/UDP.c	Flags.bFirstRead = 1;
0027ec   8165     bsf	0x65, 0, 0x1         	BSF	_Flags, 0, B
0027ee   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	986; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 0;
0027f0   9365     bcf	0x65, 0x1, 0x1       	BCF	_Flags, 1, B
                                           ;	.line	990; TCPIP_Stack/UDP.c	return TRUE;
0027f2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00283_DS_:
0027f4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0027f6   f00b
0027f8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0027fa   f00a
0027fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0027fe   f009
002800   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002802   f008
002804   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002806   f007
002808   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00280a   f006
00280c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280e   f005
002810   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002812   f004
002814   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002816   f003
002818   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00281a   f002
00281c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281e   f001
002820   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002822   f000
002824   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002826   ffd9
002828   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPDiscard	code
                                           _UDPDiscard:
                                           ;	.line	886; TCPIP_Stack/UDP.c	void UDPDiscard(void)
0077f0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077f2   ffe5
0077f4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077f6   ffd9
0077f8   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	888; TCPIP_Stack/UDP.c	if(!Flags.bWasDiscarded)
0077fa   b365     btfsc	0x65, 0x1, 0x1     	BTFSC	_Flags, 1, B
0077fc   d00b     bra	0x7814               	BRA	_00271_DS_
                                           ;	.line	890; TCPIP_Stack/UDP.c	MACDiscardRx();
0077fe   ecd7     call	0x69ae, 0           	CALL	_MACDiscardRx
007800   f034
007802   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	891; TCPIP_Stack/UDP.c	UDPRxCount = 0;
007804   6b59     clrf	0x59, 0x1           	CLRF	_UDPRxCount, B
007806   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
007808   6b5a     clrf	0x5a, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	892; TCPIP_Stack/UDP.c	SocketWithRxData = INVALID_UDP_SOCKET;
00780a   0eff     movlw	0xff               	MOVLW	0xff
00780c   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
00780e   6f4a     movwf	0x4a, 0x1          	MOVWF	_SocketWithRxData, B
007810   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	893; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
007812   8365     bsf	0x65, 0x1, 0x1       	BSF	_Flags, 1, B
                                           _00271_DS_:
007814   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007816   ffd9
007818   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGetArray	code
                                           _UDPGetArray:
                                           ;	.line	843; TCPIP_Stack/UDP.c	WORD UDPGetArray(BYTE *cData, WORD wDataLen)
005ebe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005ec0   ffe5
005ec2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005ec4   ffd9
005ec6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005ec8   ffe5
005eca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005ecc   ffe5
005ece   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005ed0   ffe5
005ed2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005ed4   ffe5
005ed6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005ed8   ffe5
005eda   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005edc   ffe5
005ede   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005ee0   ffe5
005ee2   0e02     movlw	0x2                	MOVLW	0x02
005ee4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005ee6   f000
005ee8   0e03     movlw	0x3                	MOVLW	0x03
005eea   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005eec   f001
005eee   0e04     movlw	0x4                	MOVLW	0x04
005ef0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005ef2   f002
005ef4   0e05     movlw	0x5                	MOVLW	0x05
005ef6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005ef8   f003
005efa   0e06     movlw	0x6                	MOVLW	0x06
005efc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005efe   f004
005f00   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	848; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
005f02   515a     movf	0x5a, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
005f04   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
005f06   5d52     subwf	0x52, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
005f08   e104     bnz	0x5f12               	BNZ	_00261_DS_
005f0a   010a     movlb	0xa                	BANKSEL	_UDPRxCount
005f0c   5159     movf	0x59, 0, 0x1        	MOVF	_UDPRxCount, W, B
005f0e   010a     movlb	0xa                	BANKSEL	_wGetOffset
005f10   5d51     subwf	0x51, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00261_DS_:
005f12   e205     bc	0x5f1e                	BC	_00252_DS_
005f14   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
005f16   514a     movf	0x4a, 0, 0x1        	MOVF	_SocketWithRxData, W, B
005f18   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
005f1a   1966     xorwf	0x66, 0, 0x1       	XORWF	_activeUDPSocket, W, B
005f1c   e003     bz	0x5f24                	BZ	_00253_DS_
                                           _00252_DS_:
                                           ;	.line	849; TCPIP_Stack/UDP.c	return 0;
005f1e   6af3     clrf	0xf3, 0             	CLRF	PRODL
005f20   6ae8     clrf	0xe8, 0             	CLRF	WREG
005f22   d02e     bra	0x5f80               	BRA	_00257_DS_
                                           _00253_DS_:
005f24   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	852; TCPIP_Stack/UDP.c	wBytesAvailable = UDPRxCount - wGetOffset;
005f26   5151     movf	0x51, 0, 0x1        	MOVF	_wGetOffset, W, B
005f28   010a     movlb	0xa                	BANKSEL	_UDPRxCount
005f2a   5d59     subwf	0x59, 0, 0x1       	SUBWF	_UDPRxCount, W, B
005f2c   6e05     movwf	0x5, 0             	MOVWF	r0x05
005f2e   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
005f30   5152     movf	0x52, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
005f32   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
005f34   595a     subwfb	0x5a, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
005f36   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/UDP.c	if(wBytesAvailable < wDataLen) wDataLen = wBytesAvailable;
005f38   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005f3a   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
005f3c   e102     bnz	0x5f42               	BNZ	_00264_DS_
005f3e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005f40   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00264_DS_:
005f42   e204     bc	0x5f4c                	BC	_00256_DS_
005f44   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
005f46   f003
005f48   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
005f4a   f004
                                           _00256_DS_:
                                           ;	.line	855; TCPIP_Stack/UDP.c	wDataLen = MACGetArray(cData, wDataLen);
005f4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005f52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005f56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f58   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005f5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005f5e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005f60   ecd1     call	0x5fa2, 0           	CALL	_MACGetArray
005f62   f02f
005f64   6e03     movwf	0x3, 0             	MOVWF	r0x03
005f66   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
005f68   f004
005f6a   0e05     movlw	0x5                	MOVLW	0x05
005f6c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	856; TCPIP_Stack/UDP.c	wGetOffset += wDataLen;
005f6e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005f70   010a     movlb	0xa                	BANKSEL	_wGetOffset
005f72   2751     addwf	0x51, 0x1, 0x1     	ADDWF	_wGetOffset, F, B
005f74   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005f76   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
005f78   2352     addwfc	0x52, 0x1, 0x1    	ADDWFC	(_wGetOffset + 1), F, B
                                           ;	.line	858; TCPIP_Stack/UDP.c	return wDataLen;
005f7a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005f7c   fff3
005f7e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00257_DS_:
005f80   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005f82   f006
005f84   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005f86   f005
005f88   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005f8a   f004
005f8c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005f8e   f003
005f90   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005f92   f002
005f94   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005f96   f001
005f98   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005f9a   f000
005f9c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005f9e   ffd9
005fa0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGet	code
                                           _UDPGet:
                                           ;	.line	805; TCPIP_Stack/UDP.c	BOOL UDPGet(BYTE *v)
006c76   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c78   ffe5
006c7a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c7c   ffd9
006c7e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006c80   ffe5
006c82   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006c84   ffe5
006c86   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c88   ffe5
006c8a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006c8c   ffe5
006c8e   0e02     movlw	0x2                	MOVLW	0x02
006c90   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006c92   f000
006c94   0e03     movlw	0x3                	MOVLW	0x03
006c96   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006c98   f001
006c9a   0e04     movlw	0x4                	MOVLW	0x04
006c9c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006c9e   f002
006ca0   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	808; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
006ca2   515a     movf	0x5a, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
006ca4   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
006ca6   5d52     subwf	0x52, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
006ca8   e104     bnz	0x6cb2               	BNZ	_00245_DS_
006caa   010a     movlb	0xa                	BANKSEL	_UDPRxCount
006cac   5159     movf	0x59, 0, 0x1        	MOVF	_UDPRxCount, W, B
006cae   010a     movlb	0xa                	BANKSEL	_wGetOffset
006cb0   5d51     subwf	0x51, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00245_DS_:
006cb2   e205     bc	0x6cbe                	BC	_00239_DS_
006cb4   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
006cb6   514a     movf	0x4a, 0, 0x1        	MOVF	_SocketWithRxData, W, B
006cb8   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
006cba   1966     xorwf	0x66, 0, 0x1       	XORWF	_activeUDPSocket, W, B
006cbc   e002     bz	0x6cc2                	BZ	_00240_DS_
                                           _00239_DS_:
                                           ;	.line	809; TCPIP_Stack/UDP.c	return FALSE;
006cbe   6ae8     clrf	0xe8, 0             	CLRF	WREG
006cc0   d012     bra	0x6ce6               	BRA	_00242_DS_
                                           _00240_DS_:
                                           ;	.line	811; TCPIP_Stack/UDP.c	*v = MACGet();
006cc2   ecfd     call	0x79fa, 0           	CALL	_MACGet
006cc4   f03c
006cc6   6e03     movwf	0x3, 0             	MOVWF	r0x03
006cc8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006cca   ffe5
006ccc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006cce   ffe9
006cd0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006cd2   fff3
006cd4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006cd6   ecf3     call	0x79e6, 0           	CALL	__gptrput1
006cd8   f03c
006cda   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	812; TCPIP_Stack/UDP.c	wGetOffset++;
006cdc   2b51     incf	0x51, 0x1, 0x1      	INCF	_wGetOffset, F, B
006cde   e302     bnc	0x6ce4               	BNC	_10296_DS_
006ce0   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
006ce2   2b52     incf	0x52, 0x1, 0x1      	INCF	(_wGetOffset + 1), F, B
                                           _10296_DS_:
                                           ;	.line	814; TCPIP_Stack/UDP.c	return TRUE;
006ce4   0e01     movlw	0x1                	MOVLW	0x01
                                           _00242_DS_:
006ce6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006ce8   f003
006cea   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006cec   f002
006cee   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006cf0   f001
006cf2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006cf4   f000
006cf6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006cf8   ffd9
006cfa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsGetReady	code
                                           _UDPIsGetReady:
                                           ;	.line	766; TCPIP_Stack/UDP.c	WORD UDPIsGetReady(UDP_SOCKET s)
00706e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007070   ffe5
007072   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007074   ffd9
007076   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007078   ffe5
00707a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00707c   ffe5
00707e   0e02     movlw	0x2                	MOVLW	0x02
007080   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007082   f000
                                           ;	.line	768; TCPIP_Stack/UDP.c	activeUDPSocket = s;
007084   c000     movff	0, 0xa66           	MOVFF	r0x00, _activeUDPSocket
007086   fa66
007088   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
                                           ;	.line	769; TCPIP_Stack/UDP.c	if(SocketWithRxData != s) return 0;
00708a   514a     movf	0x4a, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00708c   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00708e   e003     bz	0x7096                	BZ	_00226_DS_
007090   6af3     clrf	0xf3, 0             	CLRF	PRODL
007092   6ae8     clrf	0xe8, 0             	CLRF	WREG
007094   d01a     bra	0x70ca               	BRA	_00229_DS_
                                           _00226_DS_:
007096   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	773; TCPIP_Stack/UDP.c	if(Flags.bFirstRead)
007098   a165     btfss	0x65, 0, 0x1       	BTFSS	_Flags, 0, B
00709a   d00a     bra	0x70b0               	BRA	_00228_DS_
00709c   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	775; TCPIP_Stack/UDP.c	Flags.bFirstRead = 0;
00709e   9165     bcf	0x65, 0, 0x1         	BCF	_Flags, 0, B
                                           ;	.line	776; TCPIP_Stack/UDP.c	UDPSetRxBuffer(0);
0070a0   0e00     movlw	0                  	MOVLW	0x00
0070a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070a4   0e00     movlw	0                  	MOVLW	0x00
0070a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070a8   ec01     call	0x7202, 0           	CALL	_UDPSetRxBuffer
0070aa   f039
0070ac   0e02     movlw	0x2                	MOVLW	0x02
0070ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00228_DS_:
0070b0   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	779; TCPIP_Stack/UDP.c	return UDPRxCount - wGetOffset;
0070b2   5151     movf	0x51, 0, 0x1        	MOVF	_wGetOffset, W, B
0070b4   010a     movlb	0xa                	BANKSEL	_UDPRxCount
0070b6   5d59     subwf	0x59, 0, 0x1       	SUBWF	_UDPRxCount, W, B
0070b8   6e00     movwf	0, 0               	MOVWF	r0x00
0070ba   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
0070bc   5152     movf	0x52, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
0070be   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
0070c0   595a     subwfb	0x5a, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
0070c2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0070c4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0070c6   fff3
0070c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00229_DS_:
0070ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0070cc   f001
0070ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0070d0   f000
0070d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0070d4   ffd9
0070d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPFlush	code
                                           _UDPFlush:
                                           ;	.line	671; TCPIP_Stack/UDP.c	void UDPFlush(void)
00282a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00282c   ffe5
00282e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002830   ffd9
002832   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002834   ffe5
002836   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002838   ffe5
00283a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00283c   ffe5
00283e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002840   ffe5
002842   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002844   ffe5
002846   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002848   ffe5
00284a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00284c   ffe5
00284e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002850   ffe5
002852   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002854   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002856   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
                                           ;	.line	679; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[activeUDPSocket];
002858   5166     movf	0x66, 0, 0x1        	MOVF	_activeUDPSocket, W, B
00285a   0d0e     mullw	0xe                	MULLW	0x0e
00285c   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00285e   f000
002860   6a01     clrf	0x1, 0              	CLRF	r0x01
002862   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
002864   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002866   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
002868   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00286a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00286c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00286e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002870   6e00     movwf	0, 0               	MOVWF	r0x00
002872   0e80     movlw	0x80               	MOVLW	0x80
002874   6e02     movwf	0x2, 0             	MOVWF	r0x02
002876   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	681; TCPIP_Stack/UDP.c	wUDPLength = UDPTxCount + sizeof(UDP_HEADER);
002878   5155     movf	0x55, 0, 0x1        	MOVF	_UDPTxCount, W, B
00287a   0f08     addlw	0x8                	ADDLW	0x08
00287c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00287e   0e00     movlw	0                  	MOVLW	0x00
002880   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002882   2156     addwfc	0x56, 0, 0x1      	ADDWFC	(_UDPTxCount + 1), W, B
002884   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	684; TCPIP_Stack/UDP.c	h.SourcePort = swaps(p->localPort);
002886   5000     movf	0, 0, 0             	MOVF	r0x00, W
002888   0f0c     addlw	0xc                	ADDLW	0x0c
00288a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00288c   0e00     movlw	0                  	MOVLW	0x00
00288e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002890   6e06     movwf	0x6, 0             	MOVWF	r0x06
002892   0e00     movlw	0                  	MOVLW	0x00
002894   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002896   6e07     movwf	0x7, 0             	MOVWF	r0x07
002898   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00289a   ffe9
00289c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00289e   fff3
0028a0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028a2   ecb8     call	0x7770, 0           	CALL	__gptrget2
0028a4   f03b
0028a6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028a8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028aa   f006
0028ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   ecb1     call	0x7362, 0           	CALL	_swaps
0028b6   f039
0028b8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028ba   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028bc   f006
0028be   0e02     movlw	0x2                	MOVLW	0x02
0028c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028c4   0108     movlb	0x8                	BANKSEL	_UDPFlush_h_1_1
0028c6   6fbe     movwf	0xbe, 0x1          	MOVWF	_UDPFlush_h_1_1, B
0028c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ca   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 1)
0028cc   6fbf     movwf	0xbf, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 1), B
                                           ;	.line	685; TCPIP_Stack/UDP.c	h.DestinationPort = swaps(p->remotePort);
0028ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028d0   0f0a     addlw	0xa                	ADDLW	0x0a
0028d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028d4   0e00     movlw	0                  	MOVLW	0x00
0028d6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0028d8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0028da   0e00     movlw	0                  	MOVLW	0x00
0028dc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0028de   6e07     movwf	0x7, 0             	MOVWF	r0x07
0028e0   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0028e2   ffe9
0028e4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028e6   fff3
0028e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028ea   ecb8     call	0x7770, 0           	CALL	__gptrget2
0028ec   f03b
0028ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028f0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028f2   f006
0028f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   ecb1     call	0x7362, 0           	CALL	_swaps
0028fe   f039
002900   6e05     movwf	0x5, 0             	MOVWF	r0x05
002902   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002904   f006
002906   0e02     movlw	0x2                	MOVLW	0x02
002908   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00290a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00290c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 2)
00290e   6fc0     movwf	0xc0, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 2), B
002910   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002912   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 3)
002914   6fc1     movwf	0xc1, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 3), B
                                           ;	.line	686; TCPIP_Stack/UDP.c	h.Length = swaps(wUDPLength);
002916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00291c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291e   ecb1     call	0x7362, 0           	CALL	_swaps
002920   f039
002922   6e05     movwf	0x5, 0             	MOVWF	r0x05
002924   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002926   f006
002928   0e02     movlw	0x2                	MOVLW	0x02
00292a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00292c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00292e   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 4)
002930   6fc2     movwf	0xc2, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 4), B
002932   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002934   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 5)
002936   6fc3     movwf	0xc3, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 5), B
002938   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 6)
                                           ;	.line	687; TCPIP_Stack/UDP.c	h.Checksum = 0x0000;
00293a   6bc4     clrf	0xc4, 0x1           	CLRF	(_UDPFlush_h_1_1 + 6), B
00293c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 7)
00293e   6bc5     clrf	0xc5, 0x1           	CLRF	(_UDPFlush_h_1_1 + 7), B
002940   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	695; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val = AppConfig.MyIPAddr.Val;
002942   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
002944   010e     movlb	0xe                	BANKSEL	_UDPFlush_pseudoHeader_2_2
002946   6f70     movwf	0x70, 0x1          	MOVWF	_UDPFlush_pseudoHeader_2_2, B
002948   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
00294a   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
00294c   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 1)
00294e   6f71     movwf	0x71, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 1), B
002950   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002952   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
002954   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 2)
002956   6f72     movwf	0x72, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 2), B
002958   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00295a   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
00295c   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 3)
00295e   6f73     movwf	0x73, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 3), B
                                           ;	.line	696; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val = p->remoteNode.IPAddr.Val;
002960   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002962   ffe9
002964   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002966   fff3
002968   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00296a   ec48     call	0x7690, 0           	CALL	__gptrget4
00296c   f03b
00296e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002970   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002972   f006
002974   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
002976   f007
002978   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
00297a   f008
00297c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00297e   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 4)
002980   6f74     movwf	0x74, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 4), B
002982   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002984   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 5)
002986   6f75     movwf	0x75, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 5), B
002988   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00298a   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 6)
00298c   6f76     movwf	0x76, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 6), B
00298e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002990   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 7)
002992   6f77     movwf	0x77, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 7), B
002994   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 8)
                                           ;	.line	697; TCPIP_Stack/UDP.c	pseudoHeader.Zero = 0x0;
002996   6b78     clrf	0x78, 0x1           	CLRF	(_UDPFlush_pseudoHeader_2_2 + 8), B
                                           ;	.line	698; TCPIP_Stack/UDP.c	pseudoHeader.Protocol = IP_PROT_UDP;
002998   0e11     movlw	0x11               	MOVLW	0x11
00299a   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 9)
00299c   6f79     movwf	0x79, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 9), B
                                           ;	.line	699; TCPIP_Stack/UDP.c	pseudoHeader.Length = wUDPLength;
00299e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029a0   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029a2   6f7a     movwf	0x7a, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029a6   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029a8   6f7b     movwf	0x7b, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	700; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0029aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b2   ecb1     call	0x7362, 0           	CALL	_swaps
0029b4   f039
0029b6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029b8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029ba   f006
0029bc   0e02     movlw	0x2                	MOVLW	0x02
0029be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029c2   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029c4   6f7a     movwf	0x7a, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029c6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029c8   010e     movlb	0xe                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029ca   6f7b     movwf	0x7b, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	701; TCPIP_Stack/UDP.c	h.Checksum = ~CalcIPChecksum((BYTE*)&pseudoHeader, 
0029cc   0e0e     movlw	0xe                	MOVLW	HIGH(_UDPFlush_pseudoHeader_2_2)
0029ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
0029d0   0e70     movlw	0x70               	MOVLW	LOW(_UDPFlush_pseudoHeader_2_2)
0029d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029d4   0e80     movlw	0x80               	MOVLW	0x80
0029d6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	702; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0029d8   0e00     movlw	0                  	MOVLW	0x00
0029da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029dc   0e0c     movlw	0xc                	MOVLW	0x0c
0029de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ec   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
0029ee   f00f
0029f0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029f2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029f4   f006
0029f6   0e05     movlw	0x5                	MOVLW	0x05
0029f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029fa   1e05     comf	0x5, 0x1, 0         	COMF	r0x05, F
0029fc   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
0029fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a00   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 6)
002a02   6fc4     movwf	0xc4, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 6), B
002a04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a06   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 7)
002a08   6fc5     movwf	0xc5, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 7), B
                                           ;	.line	708; TCPIP_Stack/UDP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
002a0a   0e1a     movlw	0x1a               	MOVLW	0x1a
002a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0e   0e19     movlw	0x19               	MOVLW	0x19
002a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a12   ecc0     call	0x6d80, 0           	CALL	_MACSetWritePtr
002a14   f036
002a16   0e02     movlw	0x2                	MOVLW	0x02
002a18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; TCPIP_Stack/UDP.c	IPPutHeader(&p->remoteNode, IP_PROT_UDP, wUDPLength);
002a1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a22   0e11     movlw	0x11               	MOVLW	0x11
002a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a32   ec0a     call	0x4214, 0           	CALL	_IPPutHeader
002a34   f021
002a36   0e06     movlw	0x6                	MOVLW	0x06
002a38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&h, sizeof(h));
002a3a   0e08     movlw	0x8                	MOVLW	HIGH(_UDPFlush_h_1_1)
002a3c   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a3e   0ebe     movlw	0xbe               	MOVLW	LOW(_UDPFlush_h_1_1)
002a40   6e00     movwf	0, 0               	MOVWF	r0x00
002a42   0e80     movlw	0x80               	MOVLW	0x80
002a44   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a46   0e00     movlw	0                  	MOVLW	0x00
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   0e08     movlw	0x8                	MOVLW	0x08
002a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a56   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5a   ec41     call	0x6882, 0           	CALL	_MACPutArray
002a5c   f034
002a5e   0e05     movlw	0x5                	MOVLW	0x05
002a60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	720; TCPIP_Stack/UDP.c	sizeof(IP_HEADER));
002a62   0e1a     movlw	0x1a               	MOVLW	0x1a
002a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a66   0e2d     movlw	0x2d               	MOVLW	0x2d
002a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6a   ec02     call	0x6e04, 0           	CALL	_MACSetReadPtr
002a6c   f037
002a6e   6e00     movwf	0, 0               	MOVWF	r0x00
002a70   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002a72   f001
002a74   0e02     movlw	0x2                	MOVLW	0x02
002a76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	721; TCPIP_Stack/UDP.c	wChecksum = CalcIPBufferChecksum(wUDPLength);
002a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a80   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002a82   f006
002a84   010a     movlb	0xa                	BANKSEL	_UDPFlush_wChecksum_1_1
002a86   6f57     movwf	0x57, 0x1          	MOVWF	_UDPFlush_wChecksum_1_1, B
002a88   cff3     movff	0xff3, 0xa58       	MOVFF	PRODL, (_UDPFlush_wChecksum_1_1 + 1)
002a8a   fa58
002a8c   0e02     movlw	0x2                	MOVLW	0x02
002a8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	722; TCPIP_Stack/UDP.c	MACSetReadPtr(wReadPtrSave);
002a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a94   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a98   ec02     call	0x6e04, 0           	CALL	_MACSetReadPtr
002a9a   f037
002a9c   0e02     movlw	0x2                	MOVLW	0x02
002a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	724; TCPIP_Stack/UDP.c	+ 6);    // 6 is the offset to the Checksum field in UDP_HEADER
002aa0   0e1a     movlw	0x1a               	MOVLW	0x1a
002aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa4   0e33     movlw	0x33               	MOVLW	0x33
002aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa8   ecc0     call	0x6d80, 0           	CALL	_MACSetWritePtr
002aaa   f036
002aac   0e02     movlw	0x2                	MOVLW	0x02
002aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	725; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&wChecksum, sizeof(wChecksum));
002ab0   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPFlush_wChecksum_1_1)
002ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
002ab4   0e57     movlw	0x57               	MOVLW	LOW(_UDPFlush_wChecksum_1_1)
002ab6   6e00     movwf	0, 0               	MOVWF	r0x00
002ab8   0e80     movlw	0x80               	MOVLW	0x80
002aba   6e02     movwf	0x2, 0             	MOVWF	r0x02
002abc   0e00     movlw	0                  	MOVLW	0x00
002abe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac0   0e02     movlw	0x2                	MOVLW	0x02
002ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002acc   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad0   ec41     call	0x6882, 0           	CALL	_MACPutArray
002ad2   f034
002ad4   0e05     movlw	0x5                	MOVLW	0x05
002ad6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	730; TCPIP_Stack/UDP.c	MACFlush();
002ad8   ec6c     call	0x70d8, 0           	CALL	_MACFlush
002ada   f038
002adc   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	733; TCPIP_Stack/UDP.c	UDPTxCount = 0;
002ade   6b55     clrf	0x55, 0x1           	CLRF	_UDPTxCount, B
002ae0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002ae2   6b56     clrf	0x56, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	734; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
002ae4   0eff     movlw	0xff               	MOVLW	0xff
002ae6   0108     movlb	0x8                	BANKSEL	_LastPutSocket
002ae8   6f49     movwf	0x49, 0x1          	MOVWF	_LastPutSocket, B
002aea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002aec   f008
002aee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002af0   f007
002af2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002af4   f006
002af6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002af8   f005
002afa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002afc   f004
002afe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b00   f003
002b02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b04   f002
002b06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b08   f001
002b0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b0c   f000
002b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b10   ffd9
002b12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutString	code
                                           _UDPPutString:
                                           ;	.line	601; TCPIP_Stack/UDP.c	BYTE* UDPPutString(BYTE *strData)
006750   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006752   ffe5
006754   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006756   ffd9
006758   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00675a   ffe5
00675c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00675e   ffe5
006760   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006762   ffe5
006764   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006766   ffe5
006768   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00676a   ffe5
00676c   0e02     movlw	0x2                	MOVLW	0x02
00676e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006770   f000
006772   0e03     movlw	0x3                	MOVLW	0x03
006774   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006776   f001
006778   0e04     movlw	0x4                	MOVLW	0x04
00677a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00677c   f002
                                           ;	.line	603; TCPIP_Stack/UDP.c	return strData + UDPPutArray(strData, strlen((char*)strData));
00677e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006780   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006782   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006784   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006786   5000     movf	0, 0, 0             	MOVF	r0x00, W
006788   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00678a   ec42     call	0x6e84, 0           	CALL	_strlen
00678c   f037
00678e   6e03     movwf	0x3, 0             	MOVWF	r0x03
006790   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
006792   f004
006794   0e03     movlw	0x3                	MOVLW	0x03
006796   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006798   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00679a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00679c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00679e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0067a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067a4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0067a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0067ac   ec74     call	0x5ce8, 0           	CALL	_UDPPutArray
0067ae   f02e
0067b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0067b2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0067b4   f004
0067b6   0e05     movlw	0x5                	MOVLW	0x05
0067b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0067ba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0067bc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0067be   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0067c0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0067c2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0067c4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0067c6   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0067c8   fff4
0067ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0067cc   fff3
0067ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067d0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0067d2   f004
0067d4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0067d6   f003
0067d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0067da   f002
0067dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0067de   f001
0067e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0067e2   f000
0067e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0067e6   ffd9
0067e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutArray	code
                                           _UDPPutArray:
                                           ;	.line	514; TCPIP_Stack/UDP.c	WORD UDPPutArray(BYTE *cData, WORD wDataLen)
005ce8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005cea   ffe5
005cec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005cee   ffd9
005cf0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005cf2   ffe5
005cf4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005cf6   ffe5
005cf8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005cfa   ffe5
005cfc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005cfe   ffe5
005d00   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005d02   ffe5
005d04   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005d06   ffe5
005d08   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005d0a   ffe5
005d0c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005d0e   ffe5
005d10   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005d12   ffe5
005d14   0e02     movlw	0x2                	MOVLW	0x02
005d16   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005d18   f000
005d1a   0e03     movlw	0x3                	MOVLW	0x03
005d1c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005d1e   f001
005d20   0e04     movlw	0x4                	MOVLW	0x04
005d22   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005d24   f002
005d26   0e05     movlw	0x5                	MOVLW	0x05
005d28   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005d2a   f003
005d2c   0e06     movlw	0x6                	MOVLW	0x06
005d2e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005d30   f004
                                           ;	.line	518; TCPIP_Stack/UDP.c	wTemp=(MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER))-wPutOffset;
005d32   ca4f     movff	0xa4f, 0x5         	MOVFF	_wPutOffset, r0x05
005d34   f005
005d36   ca50     movff	0xa50, 0x6         	MOVFF	(_wPutOffset + 1), r0x06
005d38   f006
005d3a   6a07     clrf	0x7, 0              	CLRF	r0x07
005d3c   6a08     clrf	0x8, 0              	CLRF	r0x08
005d3e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005d40   08c0     sublw	0xc0               	SUBLW	0xc0
005d42   6e05     movwf	0x5, 0             	MOVWF	r0x05
005d44   0e05     movlw	0x5                	MOVLW	0x05
005d46   5606     subfwb	0x6, 0x1, 0       	SUBFWB	r0x06, F
005d48   0e00     movlw	0                  	MOVLW	0x00
005d4a   5607     subfwb	0x7, 0x1, 0       	SUBFWB	r0x07, F
005d4c   0e00     movlw	0                  	MOVLW	0x00
005d4e   5608     subfwb	0x8, 0x1, 0       	SUBFWB	r0x08, F
                                           ;	.line	519; TCPIP_Stack/UDP.c	if(wTemp < wDataLen) wDataLen = wTemp;
005d50   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005d52   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
005d54   e102     bnz	0x5d5a               	BNZ	_00209_DS_
005d56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005d58   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00209_DS_:
005d5a   e204     bc	0x5d64                	BC	_00202_DS_
005d5c   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
005d5e   f003
005d60   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
005d62   f004
                                           _00202_DS_:
                                           ;	.line	521; TCPIP_Stack/UDP.c	wPutOffset += wDataLen;
005d64   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005d66   010a     movlb	0xa                	BANKSEL	_wPutOffset
005d68   274f     addwf	0x4f, 0x1, 0x1     	ADDWF	_wPutOffset, F, B
005d6a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005d6c   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
005d6e   2350     addwfc	0x50, 0x1, 0x1    	ADDWFC	(_wPutOffset + 1), F, B
005d70   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	522; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount) UDPTxCount = wPutOffset;
005d72   5150     movf	0x50, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
005d74   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
005d76   5d56     subwf	0x56, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
005d78   e104     bnz	0x5d82               	BNZ	_00210_DS_
005d7a   010a     movlb	0xa                	BANKSEL	_wPutOffset
005d7c   514f     movf	0x4f, 0, 0x1        	MOVF	_wPutOffset, W, B
005d7e   010a     movlb	0xa                	BANKSEL	_UDPTxCount
005d80   5d55     subwf	0x55, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00210_DS_:
005d82   e204     bc	0x5d8c                	BC	_00204_DS_
005d84   ca4f     movff	0xa4f, 0xa55       	MOVFF	_wPutOffset, _UDPTxCount
005d86   fa55
005d88   ca50     movff	0xa50, 0xa56       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
005d8a   fa56
                                           _00204_DS_:
                                           ;	.line	525; TCPIP_Stack/UDP.c	MACPutArray(cData, wDataLen);
005d8c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005d8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d90   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005d92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d9c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005da0   ec41     call	0x6882, 0           	CALL	_MACPutArray
005da2   f034
005da4   0e05     movlw	0x5                	MOVLW	0x05
005da6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; TCPIP_Stack/UDP.c	return wDataLen;
005da8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005daa   fff3
005dac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005dae   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005db0   f008
005db2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005db4   f007
005db6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005db8   f006
005dba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005dbc   f005
005dbe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005dc0   f004
005dc2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005dc4   f003
005dc6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005dc8   f002
005dca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005dcc   f001
005dce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005dd0   f000
005dd2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005dd4   ffd9
005dd6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPut	code
                                           _UDPPut:
                                           ;	.line	472; TCPIP_Stack/UDP.c	BOOL UDPPut(BYTE v)
006918   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00691a   ffe5
00691c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00691e   ffd9
006920   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006922   ffe5
006924   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006926   ffe5
006928   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00692a   ffe5
00692c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00692e   ffe5
006930   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006932   ffe5
006934   0e02     movlw	0x2                	MOVLW	0x02
006936   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006938   f000
                                           ;	.line	475; TCPIP_Stack/UDP.c	if(wPutOffset >= (MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)))
00693a   ca4f     movff	0xa4f, 0x1         	MOVFF	_wPutOffset, r0x01
00693c   f001
00693e   ca50     movff	0xa50, 0x2         	MOVFF	(_wPutOffset + 1), r0x02
006940   f002
006942   6a03     clrf	0x3, 0              	CLRF	r0x03
006944   6a04     clrf	0x4, 0              	CLRF	r0x04
006946   0e00     movlw	0                  	MOVLW	0x00
006948   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00694a   e108     bnz	0x695c               	BNZ	_00195_DS_
00694c   0e00     movlw	0                  	MOVLW	0x00
00694e   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006950   e105     bnz	0x695c               	BNZ	_00195_DS_
006952   0e05     movlw	0x5                	MOVLW	0x05
006954   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006956   e102     bnz	0x695c               	BNZ	_00195_DS_
006958   0ec0     movlw	0xc0               	MOVLW	0xc0
00695a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00195_DS_:
00695c   e302     bnc	0x6962               	BNC	_00188_DS_
                                           ;	.line	477; TCPIP_Stack/UDP.c	return FALSE;
00695e   6ae8     clrf	0xe8, 0             	CLRF	WREG
006960   d019     bra	0x6994               	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	481; TCPIP_Stack/UDP.c	MACPut(v);
006962   5000     movf	0, 0, 0             	MOVF	r0x00, W
006964   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006966   ecdf     call	0x79be, 0           	CALL	_MACPut
006968   f03c
00696a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00696c   010a     movlb	0xa                	BANKSEL	_wPutOffset
                                           ;	.line	482; TCPIP_Stack/UDP.c	wPutOffset++;
00696e   2b4f     incf	0x4f, 0x1, 0x1      	INCF	_wPutOffset, F, B
006970   e302     bnc	0x6976               	BNC	_20297_DS_
006972   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
006974   2b50     incf	0x50, 0x1, 0x1      	INCF	(_wPutOffset + 1), F, B
                                           _20297_DS_:
006976   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	483; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount)
006978   5150     movf	0x50, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
00697a   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
00697c   5d56     subwf	0x56, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00697e   e104     bnz	0x6988               	BNZ	_00196_DS_
006980   010a     movlb	0xa                	BANKSEL	_wPutOffset
006982   514f     movf	0x4f, 0, 0x1        	MOVF	_wPutOffset, W, B
006984   010a     movlb	0xa                	BANKSEL	_UDPTxCount
006986   5d55     subwf	0x55, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00196_DS_:
006988   e204     bc	0x6992                	BC	_00190_DS_
                                           ;	.line	484; TCPIP_Stack/UDP.c	UDPTxCount = wPutOffset;
00698a   ca4f     movff	0xa4f, 0xa55       	MOVFF	_wPutOffset, _UDPTxCount
00698c   fa55
00698e   ca50     movff	0xa50, 0xa56       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
006990   fa56
                                           _00190_DS_:
                                           ;	.line	486; TCPIP_Stack/UDP.c	return TRUE;
006992   0e01     movlw	0x1                	MOVLW	0x01
                                           _00191_DS_:
006994   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006996   f004
006998   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00699a   f003
00699c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00699e   f002
0069a0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0069a2   f001
0069a4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0069a6   f000
0069a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0069aa   ffd9
0069ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsPutReady	code
                                           _UDPIsPutReady:
                                           ;	.line	434; TCPIP_Stack/UDP.c	WORD UDPIsPutReady(UDP_SOCKET s)
006ad4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006ad6   ffe5
006ad8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006ada   ffd9
006adc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006ade   ffe5
006ae0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006ae2   ffe5
006ae4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006ae6   ffe5
006ae8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006aea   ffe5
006aec   0e02     movlw	0x2                	MOVLW	0x02
006aee   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006af0   f000
                                           ;	.line	436; TCPIP_Stack/UDP.c	if(!MACIsTxReady())
006af2   ecc1     call	0x6f82, 0           	CALL	_MACIsTxReady
006af4   f037
006af6   6e01     movwf	0x1, 0             	MOVWF	r0x01
006af8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006afa   e103     bnz	0x6b02               	BNZ	_00174_DS_
                                           ;	.line	437; TCPIP_Stack/UDP.c	return 0;
006afc   6af3     clrf	0xf3, 0             	CLRF	PRODL
006afe   6ae8     clrf	0xe8, 0             	CLRF	WREG
006b00   d026     bra	0x6b4e               	BRA	_00177_DS_
                                           _00174_DS_:
006b02   0108     movlb	0x8                	BANKSEL	_LastPutSocket
                                           ;	.line	439; TCPIP_Stack/UDP.c	if(LastPutSocket != s)
006b04   5149     movf	0x49, 0, 0x1        	MOVF	_LastPutSocket, W, B
006b06   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
006b08   e00e     bz	0x6b26                	BZ	_00176_DS_
                                           ;	.line	441; TCPIP_Stack/UDP.c	LastPutSocket = s;
006b0a   c000     movff	0, 0x849           	MOVFF	r0x00, _LastPutSocket
006b0c   f849
006b0e   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	442; TCPIP_Stack/UDP.c	UDPTxCount = 0;
006b10   6b55     clrf	0x55, 0x1           	CLRF	_UDPTxCount, B
006b12   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
006b14   6b56     clrf	0x56, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	443; TCPIP_Stack/UDP.c	UDPSetTxBuffer(0);
006b16   0e00     movlw	0                  	MOVLW	0x00
006b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b1a   0e00     movlw	0                  	MOVLW	0x00
006b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b1e   ec82     call	0x6f04, 0           	CALL	_UDPSetTxBuffer
006b20   f037
006b22   0e02     movlw	0x2                	MOVLW	0x02
006b24   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	445; TCPIP_Stack/UDP.c	activeUDPSocket = s;
006b26   c000     movff	0, 0xa66           	MOVFF	r0x00, _activeUDPSocket
006b28   fa66
                                           ;	.line	447; TCPIP_Stack/UDP.c	return MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)-UDPTxCount;
006b2a   ca55     movff	0xa55, 0           	MOVFF	_UDPTxCount, r0x00
006b2c   f000
006b2e   ca56     movff	0xa56, 0x1         	MOVFF	(_UDPTxCount + 1), r0x01
006b30   f001
006b32   6a02     clrf	0x2, 0              	CLRF	r0x02
006b34   6a03     clrf	0x3, 0              	CLRF	r0x03
006b36   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b38   08c0     sublw	0xc0               	SUBLW	0xc0
006b3a   6e00     movwf	0, 0               	MOVWF	r0x00
006b3c   0e05     movlw	0x5                	MOVLW	0x05
006b3e   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
006b40   0e00     movlw	0                  	MOVLW	0x00
006b42   5602     subfwb	0x2, 0x1, 0       	SUBFWB	r0x02, F
006b44   0e00     movlw	0                  	MOVLW	0x00
006b46   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
006b48   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006b4a   fff3
006b4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00177_DS_:
006b4e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006b50   f003
006b52   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006b54   f002
006b56   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006b58   f001
006b5a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006b5c   f000
006b5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006b60   ffd9
006b62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetRxBuffer	code
                                           _UDPSetRxBuffer:
                                           ;	.line	400; TCPIP_Stack/UDP.c	void UDPSetRxBuffer(WORD wOffset)
007202   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007204   ffe5
007206   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007208   ffd9
00720a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00720c   ffe5
00720e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007210   ffe5
007212   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007214   ffe5
007216   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007218   ffe5
00721a   0e02     movlw	0x2                	MOVLW	0x02
00721c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00721e   f000
007220   0e03     movlw	0x3                	MOVLW	0x03
007222   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007224   f001
                                           ;	.line	402; TCPIP_Stack/UDP.c	IPSetRxBuffer(wOffset+sizeof(UDP_HEADER));
007226   5000     movf	0, 0, 0             	MOVF	r0x00, W
007228   0f08     addlw	0x8                	ADDLW	0x08
00722a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00722c   0e00     movlw	0                  	MOVLW	0x00
00722e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007230   6e03     movwf	0x3, 0             	MOVWF	r0x03
007232   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007236   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00723a   ec30     call	0x7260, 0           	CALL	_IPSetRxBuffer
00723c   f039
00723e   0e02     movlw	0x2                	MOVLW	0x02
007240   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	403; TCPIP_Stack/UDP.c	wGetOffset = wOffset;
007242   c000     movff	0, 0xa51           	MOVFF	r0x00, _wGetOffset
007244   fa51
007246   c001     movff	0x1, 0xa52         	MOVFF	r0x01, (_wGetOffset + 1)
007248   fa52
00724a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00724c   f003
00724e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007250   f002
007252   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007254   f001
007256   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007258   f000
00725a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00725c   ffd9
00725e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetTxBuffer	code
                                           _UDPSetTxBuffer:
                                           ;	.line	370; TCPIP_Stack/UDP.c	void UDPSetTxBuffer(WORD wOffset)
006f04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006f06   ffe5
006f08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006f0a   ffd9
006f0c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006f0e   ffe5
006f10   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006f12   ffe5
006f14   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006f16   ffe5
006f18   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006f1a   ffe5
006f1c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006f1e   ffe5
006f20   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006f22   ffe5
006f24   0e02     movlw	0x2                	MOVLW	0x02
006f26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006f28   f000
006f2a   0e03     movlw	0x3                	MOVLW	0x03
006f2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006f2e   f001
                                           ;	.line	372; TCPIP_Stack/UDP.c	IPSetTxBuffer(wOffset+sizeof(UDP_HEADER));
006f30   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
006f32   f002
006f34   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
006f36   f003
006f38   6a04     clrf	0x4, 0              	CLRF	r0x04
006f3a   6a05     clrf	0x5, 0              	CLRF	r0x05
006f3c   0e35     movlw	0x35               	MOVLW	0x35
006f3e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
006f40   0e1a     movlw	0x1a               	MOVLW	0x1a
006f42   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006f44   0e00     movlw	0                  	MOVLW	0x00
006f46   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
006f48   0e00     movlw	0                  	MOVLW	0x00
006f4a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
006f4c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f50   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006f52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006f54   ecc0     call	0x6d80, 0           	CALL	_MACSetWritePtr
006f56   f036
006f58   0e02     movlw	0x2                	MOVLW	0x02
006f5a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/UDP.c	wPutOffset = wOffset;
006f5c   c000     movff	0, 0xa4f           	MOVFF	r0x00, _wPutOffset
006f5e   fa4f
006f60   c001     movff	0x1, 0xa50         	MOVFF	r0x01, (_wPutOffset + 1)
006f62   fa50
006f64   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006f66   f005
006f68   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006f6a   f004
006f6c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006f6e   f003
006f70   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006f72   f002
006f74   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006f76   f001
006f78   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006f7a   f000
006f7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006f7e   ffd9
006f80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPClose	code
                                           _UDPClose:
                                           ;	.line	339; TCPIP_Stack/UDP.c	void UDPClose(UDP_SOCKET s)
006b64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006b66   ffe5
006b68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006b6a   ffd9
006b6c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006b6e   ffe5
006b70   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006b72   ffe5
006b74   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006b76   ffe5
006b78   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006b7a   ffe5
006b7c   0e02     movlw	0x2                	MOVLW	0x02
006b7e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006b80   f000
                                           ;	.line	341; TCPIP_Stack/UDP.c	if(s >= MAX_UDP_SOCKETS) return;
006b82   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006b84   f001
006b86   6a02     clrf	0x2, 0              	CLRF	r0x02
006b88   0e00     movlw	0                  	MOVLW	0x00
006b8a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006b8c   e102     bnz	0x6b92               	BNZ	_00158_DS_
006b8e   0e0a     movlw	0xa                	MOVLW	0x0a
006b90   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00158_DS_:
006b92   e223     bc	0x6bda                	BC	_00155_DS_
                                           ; ;multiply lit val:0x0e by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	342; TCPIP_Stack/UDP.c	UDPSocketInfo[s].localPort = INVALID_UDP_PORT;
006b94   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b96   0d0e     mullw	0xe                	MULLW	0x0e
006b98   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
006b9a   f000
006b9c   6a01     clrf	0x1, 0              	CLRF	r0x01
006b9e   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
006ba0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006ba2   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
006ba4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006ba6   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ba8   0f0c     addlw	0xc                	ADDLW	0x0c
006baa   6e02     movwf	0x2, 0             	MOVWF	r0x02
006bac   0e00     movlw	0                  	MOVLW	0x00
006bae   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
006bb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
006bb2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
006bb4   ffe9
006bb6   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
006bb8   ffea
006bba   0e00     movlw	0                  	MOVLW	0x00
006bbc   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
006bbe   0e00     movlw	0                  	MOVLW	0x00
006bc0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	343; TCPIP_Stack/UDP.c	UDPSocketInfo[s].remoteNode.IPAddr.Val = 0x00000000;
006bc2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006bc4   ffe9
006bc6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
006bc8   ffea
006bca   0e00     movlw	0                  	MOVLW	0x00
006bcc   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
006bce   0e00     movlw	0                  	MOVLW	0x00
006bd0   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
006bd2   0e00     movlw	0                  	MOVLW	0x00
006bd4   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
006bd6   0e00     movlw	0                  	MOVLW	0x00
006bd8   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00155_DS_:
006bda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006bdc   f003
006bde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006be0   f002
006be2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006be4   f001
006be6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006be8   f000
006bea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006bec   ffd9
006bee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPOpen	code
                                           _UDPOpen:
                                           ;	.line	258; TCPIP_Stack/UDP.c	UDP_SOCKET UDPOpen(UDP_PORT this_localPort,
0032dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032de   ffe5
0032e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032e2   ffd9
0032e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032e6   ffe5
0032e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032ea   ffe5
0032ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0032ee   ffe5
0032f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0032f2   ffe5
0032f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0032f6   ffe5
0032f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0032fa   ffe5
0032fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0032fe   ffe5
003300   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003302   ffe5
003304   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003306   ffe5
003308   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00330a   ffe5
00330c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00330e   ffe5
003310   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003312   ffe5
003314   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003316   ffe5
003318   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00331a   ffe5
00331c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00331e   ffe5
003320   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003322   ffe5
003324   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
003326   ffe5
003328   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00332a   ffe5
00332c   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
00332e   ffe5
003330   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
003332   ffe5
003334   0e02     movlw	0x2                	MOVLW	0x02
003336   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003338   f000
00333a   0e03     movlw	0x3                	MOVLW	0x03
00333c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00333e   f001
003340   0e04     movlw	0x4                	MOVLW	0x04
003342   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003344   f002
003346   0e05     movlw	0x5                	MOVLW	0x05
003348   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00334a   f003
00334c   0e06     movlw	0x6                	MOVLW	0x06
00334e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003350   f004
003352   0e07     movlw	0x7                	MOVLW	0x07
003354   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003356   f005
003358   0e08     movlw	0x8                	MOVLW	0x08
00335a   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00335c   f006
                                           ;	.line	269; TCPIP_Stack/UDP.c	p = UDPSocketInfo; //pointer to the table of UDP sockets
00335e   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
003360   6e08     movwf	0x8, 0             	MOVWF	r0x08
003362   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
003364   6e07     movwf	0x7, 0             	MOVWF	r0x07
003366   0e80     movlw	0x80               	MOVLW	0x80
003368   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
00336a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00336c   c007     movff	0x7, 0xb           	MOVFF	r0x07, r0x0b
00336e   f00b
003370   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
003372   f00c
003374   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
003376   f00d
003378   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00134_DS_:
00337a   c00e     movff	0xe, 0xf           	MOVFF	r0x0e, r0x0f
00337c   f00f
00337e   6a10     clrf	0x10, 0             	CLRF	r0x10
003380   0e00     movlw	0                  	MOVLW	0x00
003382   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
003384   e102     bnz	0x338a               	BNZ	_00146_DS_
003386   0e0a     movlw	0xa                	MOVLW	0x0a
003388   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00146_DS_:
00338a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00338c   d0ac     bra	0x34e6               	BRA	_00137_DS_
                                           ;	.line	272; TCPIP_Stack/UDP.c	if(p->localPort == INVALID_UDP_PORT)
00338e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003390   0f0c     addlw	0xc                	ADDLW	0x0c
003392   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
003394   0e00     movlw	0                  	MOVLW	0x00
003396   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
003398   6e10     movwf	0x10, 0            	MOVWF	r0x10
00339a   0e00     movlw	0                  	MOVLW	0x00
00339c   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
00339e   6e11     movwf	0x11, 0            	MOVWF	r0x11
0033a0   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0033a2   ffe9
0033a4   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0033a6   fff3
0033a8   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0033aa   ecb8     call	0x7770, 0           	CALL	__gptrget2
0033ac   f03b
0033ae   6e12     movwf	0x12, 0            	MOVWF	r0x12
0033b0   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
0033b2   f013
0033b4   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0033b6   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
0033b8   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0033ba   d085     bra	0x34c6               	BRA	_00133_DS_
                                           ;	.line	274; TCPIP_Stack/UDP.c	p->localPort = this_localPort;	
0033bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0033be   ffe5
0033c0   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0033c2   fff4
0033c4   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0033c6   ffe9
0033c8   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0033ca   fff3
0033cc   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0033ce   ecd3     call	0x79a6, 0           	CALL	__gptrput2
0033d0   f03c
                                           ;	.line	276; TCPIP_Stack/UDP.c	if(this_localPort == 0x0000u) //select any free port
0033d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0033d4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0033d6   e132     bnz	0x343c               	BNZ	_00128_DS_
                                           ;	.line	278; TCPIP_Stack/UDP.c	if(NextPort > LOCAL_UDP_PORT_END_NUMBER || 
0033d8   0e20     movlw	0x20               	MOVLW	0x20
0033da   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0033dc   5d54     subwf	0x54, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
0033de   e103     bnz	0x33e6               	BNZ	_00147_DS_
0033e0   0e01     movlw	0x1                	MOVLW	0x01
0033e2   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
0033e4   5d53     subwf	0x53, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00147_DS_:
0033e6   e208     bc	0x33f8                	BC	_00124_DS_
                                           ;	.line	279; TCPIP_Stack/UDP.c	NextPort < LOCAL_UDP_PORT_START_NUMBER)
0033e8   0e10     movlw	0x10               	MOVLW	0x10
0033ea   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0033ec   5d54     subwf	0x54, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
0033ee   e103     bnz	0x33f6               	BNZ	_00148_DS_
0033f0   0e00     movlw	0                  	MOVLW	0x00
0033f2   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
0033f4   5d53     subwf	0x53, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00148_DS_:
0033f6   e205     bc	0x3402                	BC	_00125_DS_
                                           _00124_DS_:
0033f8   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
                                           ;	.line	280; TCPIP_Stack/UDP.c	NextPort = LOCAL_UDP_PORT_START_NUMBER;
0033fa   6b53     clrf	0x53, 0x1           	CLRF	_UDPOpen_NextPort_1_1, B
0033fc   0e10     movlw	0x10               	MOVLW	0x10
0033fe   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003400   6f54     movwf	0x54, 0x1          	MOVWF	(_UDPOpen_NextPort_1_1 + 1), B
                                           _00125_DS_:
                                           ;	.line	282; TCPIP_Stack/UDP.c	p->localPort    = NextPort++;
003402   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003404   0f0c     addlw	0xc                	ADDLW	0x0c
003406   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
003408   0e00     movlw	0                  	MOVLW	0x00
00340a   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
00340c   6e10     movwf	0x10, 0            	MOVWF	r0x10
00340e   0e00     movlw	0                  	MOVLW	0x00
003410   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
003412   6e11     movwf	0x11, 0            	MOVWF	r0x11
003414   ca53     movff	0xa53, 0x12        	MOVFF	_UDPOpen_NextPort_1_1, r0x12
003416   f012
003418   ca54     movff	0xa54, 0x13        	MOVFF	(_UDPOpen_NextPort_1_1 + 1), r0x13
00341a   f013
00341c   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
00341e   2b53     incf	0x53, 0x1, 0x1      	INCF	_UDPOpen_NextPort_1_1, F, B
003420   e302     bnc	0x3426               	BNC	_30298_DS_
003422   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003424   2b54     incf	0x54, 0x1, 0x1      	INCF	(_UDPOpen_NextPort_1_1 + 1), F, B
                                           _30298_DS_:
003426   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003428   ffe5
00342a   c013     movff	0x13, 0xff4        	MOVFF	r0x13, PRODH
00342c   fff4
00342e   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
003430   ffe9
003432   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
003434   fff3
003436   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003438   ecd3     call	0x79a6, 0           	CALL	__gptrput2
00343a   f03c
                                           _00128_DS_:
                                           ;	.line	286; TCPIP_Stack/UDP.c	if(this_remoteNode)
00343c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00343e   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
003440   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
003442   e015     bz	0x346e                	BZ	_00130_DS_
                                           ;	.line	289; TCPIP_Stack/UDP.c	sizeof(p->remoteNode));
003444   0e00     movlw	0                  	MOVLW	0x00
003446   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003448   0e0a     movlw	0xa                	MOVLW	0x0a
00344a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00344c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00344e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003450   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003452   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003454   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003456   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003458   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00345a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00345c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00345e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003460   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003462   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003464   ec71     call	0x5ae2, 0           	CALL	_memcpy
003466   f02d
003468   0e08     movlw	0x8                	MOVLW	0x08
00346a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00346c   d014     bra	0x3496               	BRA	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	294; TCPIP_Stack/UDP.c	memset((void*)&(p->remoteNode), 0xFF, sizeof(p->remoteNode));
00346e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003470   f00f
003472   c008     movff	0x8, 0x10          	MOVFF	r0x08, r0x10
003474   f010
003476   c009     movff	0x9, 0x11          	MOVFF	r0x09, r0x11
003478   f011
00347a   0e00     movlw	0                  	MOVLW	0x00
00347c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00347e   0e0a     movlw	0xa                	MOVLW	0x0a
003480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003482   0eff     movlw	0xff               	MOVLW	0xff
003484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003486   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
003488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00348a   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00348c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00348e   ec8c     call	0x6318, 0           	CALL	_memset
003490   f031
003492   0e05     movlw	0x5                	MOVLW	0x05
003494   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	297; TCPIP_Stack/UDP.c	p->remotePort = this_remotePort;
003496   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003498   0f0a     addlw	0xa                	ADDLW	0x0a
00349a   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00349c   0e00     movlw	0                  	MOVLW	0x00
00349e   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0034a0   6e10     movwf	0x10, 0            	MOVWF	r0x10
0034a2   0e00     movlw	0                  	MOVLW	0x00
0034a4   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0034a6   6e11     movwf	0x11, 0            	MOVWF	r0x11
0034a8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0034aa   ffe5
0034ac   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
0034ae   fff4
0034b0   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0034b2   ffe9
0034b4   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0034b6   fff3
0034b8   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0034ba   ecd3     call	0x79a6, 0           	CALL	__gptrput2
0034bc   f03c
                                           ;	.line	302; TCPIP_Stack/UDP.c	activeUDPSocket = s;
0034be   c00a     movff	0xa, 0xa66         	MOVFF	r0x0a, _activeUDPSocket
0034c0   fa66
                                           ;	.line	303; TCPIP_Stack/UDP.c	return s;
0034c2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0034c4   d011     bra	0x34e8               	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	305; TCPIP_Stack/UDP.c	p++;
0034c6   0e0e     movlw	0xe                	MOVLW	0x0e
0034c8   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
0034ca   0e00     movlw	0                  	MOVLW	0x00
0034cc   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0034ce   0e00     movlw	0                  	MOVLW	0x00
0034d0   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
0034d2   c00b     movff	0xb, 0x7           	MOVFF	r0x0b, r0x07
0034d4   f007
0034d6   c00c     movff	0xc, 0x8           	MOVFF	r0x0c, r0x08
0034d8   f008
0034da   c00d     movff	0xd, 0x9           	MOVFF	r0x0d, r0x09
0034dc   f009
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0034de   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
0034e0   c00e     movff	0xe, 0xa           	MOVFF	r0x0e, r0x0a
0034e2   f00a
0034e4   d74a     bra	0x337a               	BRA	_00134_DS_
                                           _00137_DS_:
                                           ;	.line	308; TCPIP_Stack/UDP.c	return (UDP_SOCKET)INVALID_UDP_SOCKET;
0034e6   68e8     setf	0xe8, 0             	SETF	WREG
                                           _00138_DS_:
0034e8   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0034ea   f013
0034ec   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0034ee   f012
0034f0   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0034f2   f011
0034f4   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0034f6   f010
0034f8   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0034fa   f00f
0034fc   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0034fe   f00e
003500   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003502   f00d
003504   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003506   f00c
003508   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00350a   f00b
00350c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00350e   f00a
003510   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003512   f009
003514   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003516   f008
003518   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00351a   f007
00351c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00351e   f006
003520   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003522   f005
003524   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003526   f004
003528   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00352a   f003
00352c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00352e   f002
003530   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003532   f001
003534   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003536   f000
003538   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00353a   ffd9
00353c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPTask	code
                                           _UDPTask:
                                           ;	.line	215; TCPIP_Stack/UDP.c	void UDPTask(void)
0079d2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0079d4   ffe5
0079d6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0079d8   ffd9
                                           ;	.line	217; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
0079da   0eff     movlw	0xff               	MOVLW	0xff
0079dc   0108     movlb	0x8                	BANKSEL	_LastPutSocket
0079de   6f49     movwf	0x49, 0x1          	MOVWF	_LastPutSocket, B
0079e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0079e2   ffd9
0079e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPInit	code
                                           _UDPInit:
                                           ;	.line	177; TCPIP_Stack/UDP.c	void UDPInit(void)
0074f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0074f4   ffe5
0074f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0074f8   ffd9
0074fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0074fc   ffe5
0074fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007500   ffe5
007502   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007504   ffe5
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007506   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00105_DS_:
007508   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00750a   f001
00750c   6a02     clrf	0x2, 0              	CLRF	r0x02
00750e   0e00     movlw	0                  	MOVLW	0x00
007510   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007512   e102     bnz	0x7518               	BNZ	_00114_DS_
007514   0e0a     movlw	0xa                	MOVLW	0x0a
007516   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00114_DS_:
007518   e207     bc	0x7528                	BC	_00108_DS_
                                           ;	.line	184; TCPIP_Stack/UDP.c	UDPClose(s);
00751a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00751c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00751e   ecb2     call	0x6b64, 0           	CALL	_UDPClose
007520   f035
007522   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007524   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007526   d7f0     bra	0x7508               	BRA	_00105_DS_
                                           _00108_DS_:
007528   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	186; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
00752a   8365     bsf	0x65, 0x1, 0x1       	BSF	_Flags, 1, B
00752c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00752e   f002
007530   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007532   f001
007534   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007536   f000
007538   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00753a   ffd9
00753c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4642 (0x1222) bytes ( 3.54%)
                                           ;           	 2321 (0x0911) words
                                           ; udata size:	  198 (0x00c6) bytes ( 5.16%)
                                           ; access size:	   28 (0x001c) bytes
                                           
                                           
                                           	end
